<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ernad Mujakic Knowledge Base]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://emujakic.github.io/TechKB/</link><image><url>https://emujakic.github.io/TechKB/site-lib/media/favicon.png</url><title>Ernad Mujakic Knowledge Base</title><link>https://emujakic.github.io/TechKB/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 13 Sep 2025 16:02:06 GMT</lastBuildDate><atom:link href="https://emujakic.github.io/TechKB/site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 13 Sep 2025 16:02:04 GMT</pubDate><copyright><![CDATA[Ernad Mujakic]]></copyright><ttl>60</ttl><dc:creator>Ernad Mujakic</dc:creator><item><title><![CDATA[Computer Organization and Design RISC-V Edition Summary]]></title><description><![CDATA[
Name: David A Patterson and John L. Hennessy
Edition: 6th Edition
Computer Organization and Design: RISC-V Edition serves as a comprehensive guide to understanding the principles and practices of modern computer systems. The book covers essential topics including data representation, instruction execution, pipelining, and memory hierarchy. This summary attempts to break down the main ideas and insights from the book. Personal Computer (PC): A dedicated computer for use by an individual. Server: A specialized computer used to run programs for multiple clients. Supercomputer: a high-performance server, typically used for advanced scientific calculations or simulations. Embedded Computer: A computer integrated into another system such as a car or smart TV. Personal Mobile Device: A portable computer designed for personal use, typically battery-operated with WiFi capabilities. Cloud Computing: Large collections of servers which provide computing services over the internet. Integrated Circuit (IC): A compact assembly of electronic components made from <a data-href="Semiconductor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Semiconductor</a> material. It can contain billions of components integrated into a single package. ICs enable the abstraction of specific computational capabilities and the efficient mass manufacturing of cost-effective electronic components. <br>
<a data-href="Central Processing Unit" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Central Processing Unit</a> (CPU): The primary component of a computer responsible for executing program instructions. Modern CPUs typically have multiple cores. Multicore Processor: A single IC containing multiple independent cores, or processing units.
<br>Multicore processors allow <a data-href="Parallel Processing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Parallel Processing</a>, which is the simultaneous execution of tasks. The seven great ideas in computer architecture include: Abstraction: Hiding lower-level details from higher level representations, allowing a simpler model at high levels.
Common Case Fast: Focusing on improving the performance of the tasks that occur most.
Parallelism: Executing multiple tasks simultaneously.
Pipelining: The technique of breaking a complex task into a series of subtasks, allowing for the simultaneous execution of these subtasks sequentially, improving processing throughput.
Prediction: Anticipating the outcome of an action based on historical data or patterns, allowing for proactive decision-making rather than waiting for results.
Hierarchy of Memories: Organizing different types of memory where critical information is stored in the fastest, scarcest memory, and less-critical information is stored in slower, larger memory.
Dependability via Redundancy: Detecting failures and including redundant components that can take over when a failure occurs. <br>
<a data-href="Moore's Law" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Moore's Law</a>: A prediction made by Gordon Moore which states that the number of <a data-tooltip-position="top" aria-label="Transistor" data-href="Transistor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">transistors</a> that could be fit on an IC will double every two years. Moore's Law has slowed in recent years, making it no longer accurate. <br>
Systems Software: Software designed to manage and control computer hardware. Acts as an interface between hardware and application software. This includes software such as operating systems, device drivers, firmware, or <a data-tooltip-position="top" aria-label="Bootloader" data-href="Bootloader" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">bootloaders</a>. <br>
<a data-href="Operating System" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Operating System</a>: A type of systems software which managers computer hardware resources and provides services for user programs. <br>
<a data-href="Compiler" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Compiler</a>: A software which translates high-level programming language statements (such as <a data-href="C" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">C</a>) into <a data-href="Assembly Language" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Assembly Language</a> statements. <br>
Electric signals are the only way to speak directly to hardware. Digital systems typically use binary signals which are either on or off. These signals are represented in base 2 numbers called <a data-tooltip-position="top" aria-label="Binary Number" data-href="Binary Number" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">binary numbers</a>. Each binary digit is called a bit. Instruction: A command that the computer hardware can decode and execute. <br>
<a data-href="Assembler" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Assembler</a>: A program which translates assembly instructions into <a data-href="Machine Language" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Language</a>, a binary representation of instructions which the computer hardware can understand. The compilation and translation from a high-level language into machine language is an example of abstraction. High-level languages allow for the concise development of complex programs in a symbolic syntax that humans can understand. The five classic components of a computer are: Input: Devices, such as keyboards which feed information to a computer.
Output: Devices such as monitors which display information to the user.
Memory: The components which store data and instructions.
Datapath: The hardware components responsible for the processing and transportation of data.
Control: The hardware components which direct the operation of datapath components. <br>
Graphics display devices, such as monitors, displays an image as a <a data-href="Matrix" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Matrix</a> of pixels, which is typically represented as a matrix of bits called a bitmap. A frame buffer is typically used to store the bitmap. Memory can be either volatile or nonvolatile. Volatile memory loses its data whenever power is turned off, volatile memory retains its data even after power loss. Some major memory types include: <br>
<a data-href="DRAM" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">DRAM</a> (Dynamic Random Access Memory): A type of volatile memory built as an IC which can provide random access to any address. DRAM is typically the main memory of a computer, that is, the memory used to store programs while they are running. <br>Memory cells consist of a <a data-href="Capacitor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Capacitor</a> and a <a data-href="Transistor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transistor</a> which stores each bit of data as an electrical charge. Because the capacitor leaks charge over time, the data has to be periodically refreshed.
DRAM permits access times of around 50 nanoseconds. <br>
<a data-href="Cache Memory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Cache Memory</a>: A small, high-speed volatile memory, typically found inside the CPU. Cache memory acts as a buffer for slower, larger memory like DRAM. The fastest L1 cache allows access times of around 3 nanoseconds. <br>
<a data-href="SRAM" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">SRAM</a> (Static Random Access Memory): Similar to DRAM, SRAM is a type of volatile memory built as an IC, though SRAM is faster, does not need to be refreshed, and is more reliable. Though this comes at a higher cost per bit and larger footprint. <br>SRAM access times typically <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="28" to="33" origin-text="range" class="internal-link virtual-link-a">range</a> from 10 to 20 nanoseconds. <br>
Secondary Memory: Typically consists of <a data-href="Flash Memory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Flash Memory</a> and magnetic disks. Secondary memory is nonvolatile, therefore it is used to store perpetual data across program runs. Secondary memory is significantly slower than primary memory. <br>
<a data-href="Instruction Set Architecture" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Instruction Set Architecture</a> (ISA): The vocabulary of instructions which a computer can decode and execute. Popular ISAs include <a data-href="RISC-V" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">RISC-V</a>, <a data-href="x86" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">x86</a>, MIPS, and <a data-href="ARMv8" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ARMv8</a>. Application Binary Interface (ABI): The combination of the instruction set and the operating system interface for application programmers. Networks: Interconnect multiple computers together, thus, allowing them to communicate, share resources, and enable non-local access. Local Area Network (LAN): A network which interconnects devices within a limited geographical area, typically a single building. Wide Area Network (WAN): A network which spans over a large geographical area, connecting multiple LANs together. WANs can span across entire continents. <br>
<a data-href="Semiconductor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Semiconductor</a>: A material which does not conduct electricity very well. <br>
<a data-href="Transistor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transistor</a>: A Semiconductor device, typically used as an electrically controlled switch. <br>
<a data-href="VLSI" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">VLSI</a> (Very large-scale integrated circuit): An IC which consists of millions of transistors. Performance: Multiple factors are required to effectively assess the performance of a processor. <br>
Response/Execution Time: The total time required for the CPU to complete a task. This includes disk/memory access times, I/O times, etc. The performance of a CPU is the <a data-href="Reciprocal" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reciprocal</a> of the execution time. CPU Time: The time the CPU takes to compute a specific task. This does not include factors external to the CPU like I/O or memory accesses. Throughput/Bandwidth: The number of tasks a CPU can complete per unit time. The primary unit time used is the clock cycle of the CPU. <br><a data-href="Clock Cycle" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clock Cycle</a>: Each CPU has an internal clock, which is a periodic <a data-href="Square Wave" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Square Wave</a> that oscillates between high and low. A clock cycle is one complete cycle of the CPU clock. Clock Period: The length of one complete clock cycle. The clock rate is the inverse of the clock cycle. CPI (Clock Cycles per Instruction): The average number of clock cycles it takes for a processor to complete an instruction. The average is taken because different instructions require different amounts of clock cycles to complete. Instruction Count: The number of instructions executed by a program. Workload: A set of programs that a computer is required to execute.
Instruction Mix: The distribution of different types of instructions in a given program or workload. The CPU time of program can now be defined as: Since the clock rate is the inverse of the clock cycle time, we can also define the equation as: Power Wall: A term used to describe the limitations on processor design due to power consumption and heat dissipation requirements. Making processors faster would require making them disproportionately less power-efficient, which is a problem for embedded computers which are typically battery-operated; heat dissipation is a major problem for data centers and supercomputers which require significant cooling infrastructure.
<br>For <a data-href="CMOS" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">CMOS</a> ICs, the primary source of energy consumption is dynamic energy, that is, the energy consumed when a transistor switches states. Benchmark: A program used to compare and measure computer performance. MIPS (Million Instructions per Second): Measures how many millions of instructions a computer can execute in a second. Amdahl's Law: A rule which states that the performance improvement possible is limited by the amount that the improved component is used. Instruction Set: The vocabulary of instructions which a computer can decode and execute. <br><a data-href="RISC-V" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">RISC-V</a>: An open standard instruction set designed to be simple and efficient. RISC stands for (reduced instruction set computing).
<br><a data-href="x86" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">x86</a>: An instruction set developed by Intel. x86 is a much more complex instruction set, allowing for more high-level operations. Stored-Program Concept: The idea that programs themselves can be stored in computer memory, allowing for more flexibility by making programs easier to modify. The stored-program concept also enables dynamic program execution. The principles of hardware design are: Simplicity Favors Regularity.
Smaller is Faster.
Good Design Demands Good Compromises. Every computer must be able to perform arithmetic. The RISC-V add instruction is add a, b, c. This instruction adds variables b and c, and stores their result in a. There is also a corresponding sub instruction with the same format.
Each RISC-V arithmetic instruction takes three operands and performs exactly one operation on them. The operands of arithmetic instructions must come from registers. Therefore, if a variable is in memory, it must first be loaded into a register in order to be able to operate on it.
Requiring each instruction to have exactly three operands conforms to the principle simplicity favors regularity. Byte: A group of 8 bits. Each bit is a binary digit. Word: A group of 32 bits, or four bytes.
Doubleword: A group of 64 bits, or two words. <br>
<a data-href="Register" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Register</a>: Small, fast memory locations inside the CPU that hold temporary data during processing. RISC-V has a set of 32 general-purpose registers. These registers are denoted as x0-x31. Each register is 32 bits (one word) wide. The RISC-V convention is the letter x, followed by the register number. Registers are visible to the programmer. Using only 32 registers conforms to the design principle smaller is faster. Having more than 32 registers may increase the clock cycle time since electrical signals must travel farther. Since most programs need to store more than 32 variables, the compiler tries to keep the most frequently used variables in registers, in order to minimize the number of data transfer instructions required. The compiler puts less frequently used variables in memory, this process is called spilling registers. RISC-V dedicates the register x0 to be hard-wired to the value 0, regardless of what operations are performed on it. To access data in main memory, data transfer instructions are used. To access a word in memory, the instruction must supply a memory address. RISC-V uses byte addressing, meaning sequential addresses differ by one byte. Since each word has 4 bytes, the addresses of sequential words differ by 4 bytes. Some computers use the address of the most-significant bit, the leftmost bit, as the word address; while other computers use the address of the least-significant bit, the rightmost bit, as the word address. RISC-V uses the latter, this is referred to as little-endian.
Byte addressing also effects the array index. If you want to get the first element from a base address, you offset the base address with 0, lw x5, 0(x6). To access the next element in the array, you need to offset the base address by the size of each element, in this case, the size of each word is 4 bytes. Therefore, the next element would be loaded using lw x5, 4(x6). Memory is just a large single-dimensional array, so addressing acts as the index to the array. To copy a value in memory to a register, the load instruction is used. To save the value of a register into memory, a store instruction is used. For example, in the instruction lw x5, 40(x6), the register x6 stores the base memory address. That memory address is offset by the immediate value 40, and the data in the new memory address is stored in register x5. The instruction lw stands for load word.
The instruction sw x5, 40(x6) stores the data in register x5 in the memory address in register , plus the offset 40. The instruction sw stands for store word. RISC-V assembly language includes arithmetic, data transfer, logical, conditional/unconditional branch, and shift instructions. <br>A more detailed description of the RISC-V assembly language is described <a data-tooltip-position="top" aria-label="RISC-V" data-href="RISC-V" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">here</a>. Many programs require the use of constants in operations. In RISC-V, these constants are called immediates, and RISC-V offers versions of the arithmetic instructions where one of the operands is an immediate. The instruction addi x5, x6, 4, stores the sum of the value in register x6 and 4 in the register x5. addi stands for add immediate. Overflow occurs when the result of an operation is larger than the register it is to be stored in. <br>
<a data-href="Twos's Complement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Twos's Complement</a>: A method for representing signed numbers in binary form. In two's complement, the value of the most-significant bit (the leftmost bit) determines the sign of the value. If the most-significant bit is a 1, the value is negative, else, it is positive. Positive numbers are represented the same way as in standard binary notation. <br>
Negative numbers are represented by taking the corresponding positive representation, flipping all the bits, then adding 1. The flipping of the bits without adding 1 is referred to as <a data-href="One's Complement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">One's Complement</a>. For example, to represent -5 in two's complement, we start with the binary representation of 5, which is 0000 0101. We then flip each bit, resulting in the one's complement representation 1111 1010. Then we add one, 1111 1011. Sign extension is a technique used to preserve the sign bit of a number when converting from a smaller bit-width to a larger one. If you're loading a signed byte into a 4 byte register, the three remaining bytes should be filled with 0's if the number is positive, and 1's if the number is negative. RISC-V offers a load byte unsigned instruction lbu, which zero-extends the leftmost bits with 0 regardless of the sign of the number. The load byte instruction, lb, preserves the sign of the data. <br>
Instruction Format: Each RISC-V instruction is 32 bits long. The layout of each segment of the instruction is the instruction format. Each segment of the instruction is referred to as a field. The binary representation of the assembly instruction is referred to as <a data-href="Machine Language" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Language</a> and a sequence of such instructions is called machine code. The R-Type (register type) instruction format is used when all three operands of the instruction are registers, such as arithmetic or logical instructions. The R-type instruction format has the following fields: opcode: Denotes the operation and instruction format of the instruction. The opcode is 7 bits wide.
rd: The destination register which receives the operation. This field, like all register fields, is 5 bits wide.
funct3: An additional opcode field. This field is 3 bits wide.
rs1: The first register operand. This field is 5 bits wide.
rs2: The second register operand. This field is 5 bits wide.
funct7: An additional opcode field. This field is 7 bits wide. The I-Type (immediate type) instruction format is used for arithmetic or logical instructions where one of the operands is a constant value. The load word instruction, lw, is also an I-type instruction where the immediate represents the address offset. the I-type instruction format has the following fields: opcode: Denotes the operation and instruction format of the instruction. The opcode is 7 bits wide.
rd: The destination register which receives the operation. This field, like all register fields, is 5 bits wide.
funct3: An additional opcode field. This field is 3 bits wide.
rs1: The first register operand. This field is 5 bits wide.
immediate: A 12 bit two's complement value which stores the constant operand. The S-Type (store type) instruction format is used for sw (store word) instructions. In this format, the 12 bit immediate is split into two fields to ensure that the rs1 and rs2 fields are in the same bits for all formats. The S-type instruction format has the following fields: opcode: Denotes the operation and instruction format of the instruction. The opcode is 7 bits wide.
immediate[4:0]: The lower 5 bits of the 12 bit immediate.
funct3: An additional opcode field. This field is 3 bits wide.
rs1: The first register operand. This field is 5 bits wide.
rs2: The second register operand. This field is 5 bits wide.
immediate[11:5]: The upper 7 bits of the 12 bit immediate. <br>
<a data-href="Hexadecimal" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hexadecimal</a>: A base-16 numerical system where values 0-9 represent the numbers 0 to 9, and values A-F represent values 10 to 15. Memory addresses are commonly represented in hexadecimal notation. Logical operations are used to operate on individual bits, or fields of bits. These operations are also called bit-wise operations. Shifts move all the bits in a variable either right or left, filling the emptied bits with 0's. Shifting left by bits is the same as multiplying by , while shifting right by bits is the same as dividing by . The RISC-V shift operations include slli (shift left logical immediate) and srli (shift right logical immediate). These instructions take as arguments, a destination register, the register to shift, and the amount to shift by. These instructions use the I-type instruction format. For example, the instruction slli x11, x19, 4 takes the data in register x19, shifts it left 4 times, fills the emptied bits with zeros, and stores the result in x11.U-type RISC-V also provides a srai (shift right arithmetic immediate), which fills the emptied bits with copies of the sign bit to preserve the sign of the data. RISC-V also provides bitwise and, or, xor instructions, as well as their immediate counterparts andi, ori, and xori. The and instruction leaves a 1 in a bit position only if both operands have a 1 in that position. <br>The and instruction is commonly used to create a <a data-href="Bit Mask" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bit Mask</a>, which is used to force certain bits to 0. The or instruction leaves a 1 in a bit position if either operand has a 1 in that position. The or instruction is commonly used to set certain bits to 1. The xor instruction leaves a 1 in a bit position if exactly one operand has a 1 in that position. The xor instruction can be used to with an immediate operand where all bits are 1 to perform a bitwise operation. Decision-making statements allow a computer to perform different operations conditionally. Conditional branches are a type of decision-making instruction which branch to a certain instruction if a condition holds true. The beq (branch if equal) instruction branches to a address if two registers are equal. For example, the instruction beq x2, x3, L1 branches to the statement labelled L1 if the data in registers x2 and x3 are equal.
RISC-V also provides: bne (branch if not equal)
blt (branch if less than)
bge (branch if greater than or equal)
bltu (branch if less than unsigned)
bgeu (branch if greater than or equal unsigned) Loops are used to iterate a computation a number of times. Loops are constructed in assembly language using the conditional branches discussed earlier. Basic Blocks are a sequence of assembly instructions which execute linearly without any jumps or branches. Unconditional branches always branch to a certain instruction. Unconditional branches will be explained further in the section about procedures. Case/Switch statements are commonly encoded as a table of addresses called a branch address table. This allows the program to index the table directly with the variable used in the condition. Procedures, or functions, are subroutines of a program which get passed arguments, which are then used to perform a specific task. Procedures can also return results. The caller is the program that called the procedure. The callee is the procedure that was called. To execute a procedure, the program must: Put parameters in a place that is accessible to the procedure.
Transfer control to the procedure.
Acquire the storage resources needed for the procedure.
Perform the desired task.
Put the result value in a place accessible to the calling program.
Return control to the caller. RISC-V allocates its 32 registers using the following convention for procedure calling: x1: One register for storing the return address of the caller. x10-x17: Eight registers for passing parameters and return values. <br>
If a procedure needs more registers than the eight allocated for arguments, then we would need to spill registers to memory. This is typically done using a <a data-href="Stack" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stack</a> data structure, which is a LIFO (last-in first-out) structure. <br>
A stack keeps a <a data-href="Pointer" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pointer</a> to the most recently allocated address. In RISC-V, the stack pointer is commonly stored in register x2, also called sp. Placing data onto the stack is called a push, while removing data from the stack is a pop. Stacks typically grow from higher addresses to lower addresses. That means, to push values onto the stack you must decrement the stack pointer by 4. While adding to the stack pointer shrinks the stack. RISC-V also separates 19 of the 32 registers into one of two groups: x5-x7 and x28-x31: Temporary registers that are not preserved by the callee on a procedure call. x8-x9 and x18-x27: Saved registers which must be preserved by the callee. RISC-V provides a unconditional branch instruction, also called a jump instruction, specifically for procedures. The jal (jump and link) instruction branches to an address, and simultaneously stores the address of the following instruction in the destination register, typically x1. The address The jalr (jump and link register) instruction branches to an address stored in a register. This is typically used to by a procedure to return to the return address of the caller. For example, the instruction jalr x0, 0(x1) jumps to the address stored in x1, without storing the current address by dumping it to register x0. <br>
<a data-href="Program Counter" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Program Counter</a> (PC): The register which holds the address of the current instruction being executed. Leaf procedures are procedures that do not call any other procedures. If a procedure does call other procedures, it is a nonleaf procedure. Recursive procedures are procedures that invoke clones of themselves. Some recursive functions can be implemented iteratively, which can significantly reduce overhead. To handle nonleaf procedures, care must be taken that the argument and return address registers are not overwritten. One solution is to push all the other registers that must be preserved onto the stack; then upon the return, the registers are restored from memory, and the stack pointer is readjusted. The stack pointer, sp, is preserved by the procedure by adding exactly the same amount of bytes that was subtracted from it. <br>
The portion of the stack that is used to store a procedures spilled registers is called the <a data-href="Procedure Frame" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Procedure Frame</a>. Some RISC-V compilers use register x8 as a frame pointer, which points to the first word in the procedure frame. <br>
<a data-href="Storage Classes" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Storage Classes</a>: The C language supports the auto and static storage classes. These storage classes define the lifetime, and scope of the variable. auto is the default storage class for any variable declared inside of a function/procedure. These variables are local to the procedure and are discarded when the procedure exits.
static is the default storage class for variables that are not declared within any function. These variables are commonly called global variables. Static variables are preserved across function calls. Some RISC-V compilers reserve register x3 for the global pointer, that is, the register reserved for pointing to static data. <br>
In the <a data-href="Linux" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linux</a> <a data-href="Operating System" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Operating System</a>, memory is allocated as follows: Reserved Memory: The first portion of low-end memory is reserved for the operating system and system-level functions.
Text Segment: Following this is the text segment, which contains the machine code for the routines defined in the source file.
Static Data Segment: Above the text segment lies the static data segment, which holds static and constant variables.
<br><a data-href="Heap" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heap</a>: The static data segment is followed by the heap, which is used for dynamic data structures, such as <a data-tooltip-position="top" aria-label="Linked List" data-href="Linked List" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">linked lists</a>. The heap typically grows upwards, while the stack grows downwards towards the heap. <br>
<a data-href="Dynamic Memory Allocation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamic Memory Allocation</a>: The C language provides explicit functions for memory allocation. The malloc() function allocates space on the heap and returns a <a data-href="Pointer" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pointer</a> to it. The free() function releases space on the heap to which the passed pointer points to. <br>Forgetting to free memory which is no longer in use causes a <a data-href="Memory Leak" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Memory Leak</a>. This is the cause of many bugs in C programs.
If memory is freed too early, this creates dangling pointers, which are pointers that point to some unknown data in the heap. <br>
<a data-href="ASCII" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ASCII</a>: A character encoding standard which represents characters as 8-bit bytes. Though, since RISC-V software is required to keep the stack aligned to quadword (16 byte) addresses, a char variable may occupy as much as 16 bytes. RISC-V provides instructions to transfer bytes including lbu (load byte unsigned), which loads a byte from memory and places it in the 8 rightmost bits of a register. The lb (load byte) instruction sign extends the byte. The sb (store byte) instruction takes the 8 rightmost bits of a register and writes it to memory.
<br>Characters are normally combined to form <a data-tooltip-position="top" aria-label="String" data-href="String" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Strings</a>. In C, the end of a string is denoted by the null character \0. RISC-V provides instructions to load and store 16-bit halfwords including lhu (load half unsigned), lh (load half), and sh (store half). RISC-V provides the lui (load upper immediate) instruction, which loads a 20-bit constant into the top 20 bits of a register, the lower 12 bits are filled with zeros. This instruction enables the creation of a 32 bit constant with 2 instructions. The first instruction, lui, loads bits 12-31 of the immediate, followed by an addi instruction to load to bottom 12 bits.
lui uses a new instruction format, the U-type format, since other formats cannot accommodate a 20 bit immediate. The U-type format has the following fields: opcode: Denotes the operation and instruction format of the instruction. The opcode is 7 bits wide.
rd: The destination register which receives the operation. This field, like all register fields, is 5 bits wide.
immediate[31:12]: The upper 20 bits of the immediate. <br>
<a data-href="PC-Relative Addressing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">PC-Relative Addressing</a>: An addressing scheme where the address to branch or jump to is the sum of the current program counter, and the constant/immediate in the instruction. RISC-V uses PC-relative addressing for both conditional branches and unconditional jumps. Procedure calls, on the other hand, may need to jump to addresses that are very far from the current PC. RISC-V allows for very long jumps using 2 instructions: The lui (load upper immediate) instruction writes the upper 20 bits of the address to a temporary register.
The jalr (jump and link register) instruction adds the lower 12 bits of the address to the register and jumps to the sum. RISC-V branch instructions represent the number of halfwords (2 bytes) between the branch and the branch target. Note that RISC-V instructions have byte addresses, meaning sequential words (4 bytes) differ by 4. <br>
<a data-href="Addressing Mode" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Addressing Mode</a>: Defines how operands are identified to determine an address. In RISC-V, the primary addressing modes are as follows: Immediate Addressing: The operand is a constant within the instruction.
Register Addressing: The operand is a register.
Base Addressing: The operand is at the memory location defined as the sum of the base address stored in a register, and an immediate in the instruction.
PC-Relative Addressing: The branch address is the sum of the current PC and an immediate in the instruction. Parallel execution is when multiple processors perform tasks simultaneously. Parallelism is simple to implement if tasks are independent, though in the real world, tasks often need to cooperate. <br>
Cooperation means some tasks are writing values that others must read. When tasks cooperate, care must be taken to ensure that the processes are synchronized, else a <a data-href="Data Race" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Race</a> may occur. A data race occurs when two or more memory accesses to the same location occur across threads simultaneously and at least one is a write operation. This leads to unpredictable results because the final value of the shared data depends on the order of the memory accesses. An atomic exchange is an operation which interchanges a value in a register for a value in memory. The operation is atomic because the exchange is indivisible, meaning nothing can happen in between the memory read and write. The pair of instructions is effectively atomic if all other operations performed by all processors occur before or after the pair.
In RISC-V, the pair of instructions include a special load lr.w (load-reserved word) and a special store sc.w (store-conditional word). These instructions are used in sequence, if the contents of the memory location specified by the load are changed before the store to the same address occurs, then the store-conditional fails and aborts the write operation. sc.w specifies three registers: one to hold the address, one to indicate whether the operation failed or succeeded, and one to hold the value to be stored. Store-conditional returns 0 only if it succeeds, and writes a non-zero value otherwise. A loop is typically implemented to continue attempting the store-conditional until it returns a zero. Lock and unlock synchronization mechanisms create regions, called mutual exclusions, where only a single processor can operate. To implement synchronization in a multiprocessor, the ability to atomically read and write a memory location is critical. A lock is a synchronization primitive which allows a processor to create a mutual exclusion. If two or more threads try to perform an exchange simultaneously, the processor which performs the exchange first will lock the memory, preventing the other processor from operating on the memory until the first processor unlocks it. The steps to translate a C program into a program running on the computer are: Preprocessing: The C preprocessor handles preprocessor directives such as #include and #define and removes comments.
Compilation: The compiler translates the C program into an assembly language program.
<br>Assembly: The assembler translates the assembly language into machine language. This results in the creating of an <a data-href="Object File" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Object File</a> which has a .o or .obj file extension. The assembler uses a <a data-href="Symbol Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Symbol Table</a> to keep track of labels used in branches and data transfer instructions. The assembler may also use pseudoinstructions, which are abstractions of assembly language to make the assembly language more readable.
<br>Linking: The <a data-href="Linker" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linker</a> is responsible for combining multiple object files into a single executable. The linker makes it possible to compile and assemble procedures independently, thus allowing for local changes in a procedure without having to recompile the entire program.
Loading: The loader is responsible for loading the executable file into memory and setting up the program's runtime environment. <br>
<a data-href="Dynamically Linked Libraries" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamically Linked Libraries</a> (DLLs): Library routines that are linked to a program at runtime rather than compile time. DLLs allow for multiple programs to share the same library code, thus, reducing memory requirements. <br>
<a data-tooltip-position="top" aria-label="Pointer" data-href="Pointer" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pointers</a>: In the C language, pointers are variables that store addresses. It is a common fallacy to believe that using pointers rather than array indices leads to more efficient programs. Though, modern compilers can produce code for array indexing that is just as efficient as pointers. Modern C compilers adhere to the following structure: Front-End: Responsible for checking the syntax and semantics of the source program, and translating the source into an intermediate form. The front-end includes four separate functions: Scanning reads in characters and tokenizes them. Tokens include reserved words, names, operators, etc.
Parsing takes the token stream, validates its syntax, and produces and abstract syntax stream, which is a representation of the syntactic structure of the program.
Semantic analysis takes the abstract syntax tree and checks for semantic correctness. This includes checking for the proper declaration of variable types, and that the types of operators and objects match. This process is called type checking. During this process, a symbol table is generated representing all named classes, variables, and functions, which is used to type check the program.
Intermediate representation generation takes the symbol table and abstract syntax tree and generates the intermediate representation as the output of the front end. Intermediate representations usually use simple operations on a set of primitive types. The most common forms looks similar to the RISC-V assembly language with an infinite number of virtual registers. <br>
High-Level Optimizations: Transformations that are done close to source level. The most common high-level optimizations performed include <a data-href="Procedure Inlining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Procedure Inlining</a> and <a data-href="Loop Unrolling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Loop Unrolling</a>. Procedure inlining replaces a call to a function with the function itself.
Loop unrolling replicates the body of a loop multiple times. This reduces loop overhead. Local and Global Optimizations: This stage includes three classes of optimizations: Local Optimizations: Optimizations that are local to a single basic block. This is often run before and after global optimizations. Global Optimizations: Optimizations across multiple basic blocks. Code motion finds code in the body of a loop that is loop invariant, meaning the code computes the same value for each iteration of the loop. This code can be taken out of the loop and only be computed once.
Data flow analysis gathers information about how data is read and modified throughout the execution of a program. A control flow graph represents nodes as basic blocks and arcs represent control flow between basic blocks. Global Register Allocation: Allocates variables to registers for regions of the code. Several optimizations are performed both locally and globally including: Common Subexpression Elimination: Finds multiple instances of the same expression and computes them only once, storing the result for future use. For example, a = b+c followed by d = b+c and be optimized to a = b+c, d = a.
Constant Propagation: Collapses constant values whenever possible.
Copy Propagation: Propagates values that are simple copies of other variables.
Dead Store Elimination: Finds stores to values that are not used again and eliminates the store. Dead code elimination finds and eliminates unused code.
Strength Reduction: Replaces complex expressions, such as multiply or divide, with simpler ones like left/right shift. Compilers must be conservative when optimizing. That is, a compiler should only attempt an optimization if it is certain that it will not affect the functionality of the program. Register allocation is one of the most important optimizations for modern load-store architectures. Global register allocation uses a region-based approach, where a region is a section of code during which a particular variable could be allocated to a register. A region is selected using an iterative process: Choose a definition (change) of a variable in a given basic block, add that block to the region.
Find any uses of that definition, which is a data flow analysis problem. Add any basic block that contains such uses, as well as any basic block through which the value passes through to reach a use, to the region.
Find any other definitions that also can affect a use found in the previous step and add the basic blocks containing those definitions, as well as the blocks through which the definitions pass through to reach a use, to the region.
Repeat steps 2 and 3 until convergence. The set of basic blocks found by this process have the following property: If the designated variable is allocated to a register in all these basic blocks, then there is no need for loading or storing the variable.
Modern global register allocators start by constructing the regions for each virtual register in a function. Since certain regions will overlap, they may not use the same registers. This interference can be organized with a interference graph, where each node represents a region, and the arcs between nodes represent that the regions share some basic blocks. <br>Once the interference graph has been constructed, the problem of register allocation is equivalent to the problem of <a data-href="Graph Coloring" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Graph Coloring</a>, where you must color each node in the graph such that no two adjacent nodes are the same color. If the graph cannot be colored using the number of registers available, the allocator must spill registers to memory.
Spilling is equivalent to splitting up a region. When a region is split, loads and stores must be used to get the value from memory. The final steps of the compiler are code generation and assembly. Most compilers do not use a stand-alone assembler, they instead perform most of the same functions, such as filling in symbolic values and generating the machine code as the last stage of code generation. <br>
In an <a data-href="Object-Oriented Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Object-Oriented Programming</a> language like Java, programmers can think in terms of abstract objects. The type of an object is called a class, a particular object is an instance of a class, and creating an instance of an object is called instantiation. The operations in a class are called methods, the variable members of class are called fields. Inheritance allows for child classes to extend parent classes, which allows the child to redefine some of the methods of its parent, as well as inherit the methods it leaves unchanged.
Java uses an automatic garbage collector, which frees memory without explicit direction from the programmer.
Java programs are distributed as Java bytecodes which are interpreted by the Java Virtual Machine (JVM). <br>
<a data-href="MIPS" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">MIPS</a> is another RISC architecture that is widely used in embedded systems. The MIPS instruction set architecture share some common features with RISC-V, including: All instructions are 32 bits wide.
Both have 32 general-purpose registers, with one being hardwired to zero.
There are no instructions for loading or storing many registers.
Both have branch if zero and branch if not zero instructions.
Both sets of addressing modes work for all word sizes. One of the main differences between RISC-V and MIPS is for conditional branches. While RISC-V simply provides branch instructions to compare two registers, MIPS' comparison instructions set a register to 1 or 0 depending on the outcome of the comparison. <br>
<a data-href="ARMv8" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ARMv8</a> is another RISC ISA, and is the most popular ISA for embedded devices. ARMv8 is very similar to MIPS, though ARMv8 is a 64-bit ISA. V8 has 32 general-purpose registers, where one register is hardwired to zero. Its addressing modes work for all word sizes. <br>
<a data-href="x86" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">x86</a> is a CISC (complex instruction set computing) ISA, which provides more powerful instructions than a RISC architecture with the goal to reduce the instruction count of programs. This reduced instruction count comes at the cost of slower, more complex instructions which may result in a slower clock cycle time. The RISC-V architecture is partitioned into a base architecture, and several extensions. Each extension is named with a letter of the alphabet with the base architecture labelled as I "Integer". The following are some unmentioned instructions in the base RISC-V architecture: auipc is used for PC-relative memory addressing. Like the lui instruction, it holds a 20-bit constant that corresponds to bits 12 through 31 of an integer. This instruction adds this constant to the PC and writes the sum to a register.
slt (set less than) and sltu (set less than unsigned) compare two integers and write the Boolean result to a register.
slti(set less than immediate) and sltiu (set less than immediate unsigned) do the same but with an immediate as the second register. The five standard extensions of the base architecture are: M (Multiply and Divide): Adds instructions for multiplication and division.
A (Atomic Memory Operations): Adds atomic memory operations for multiprocessor synchronization.
F and D (Floating-Point): Provides operations on floating-point numbers.
C (16-Bit Instructions): Provides equivalent instructions that are only 16 bits long. Some common fallacies and pitfalls include: <br>Fallacy: More powerful instructions <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="36" to="40" origin-text="mean" class="internal-link virtual-link-a">mean</a> higher performance. More powerful instructions typically incur more overhead and force a longer clock cycle time. Fallacy: Write in assembly language to obtain the highest performance. Modern compilers can produce code just as fast or even faster than assembly language programmers. Pitfall: Forgetting that sequential word addresses in machines with byte addressing do not differ by one. Sequential addresses should be incremented by the number of bytes in a word (typically 4). D. A. Patterson and J. L. Hennessy, Computer Organization and Design RISC-V Edition: The Hardware Software Interface. Amsterdam: Morgan Kaufmann, 2021.
]]></description><link>https://emujakic.github.io/TechKB/textbooks/computer-organization-and-design-risc-v-edition-summary.html</link><guid isPermaLink="false">TEXTBOOKS/Computer Organization and Design RISC-V Edition Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 19 Aug 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Artificial Intelligence A Modern Approach Summary]]></title><description><![CDATA[
Name: Stuart Russell and Peter Norvig
Edition: 4th Edition
AI: A Modern Approach by Norvig and Russel is a foundational text in the dynamic field of artificial intelligence. The book covers a wide <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="117" to="122" origin-text="range" class="internal-link virtual-link-a">range</a> of topics, from Markov models and evolutionary algorithms, to natural language processing. This summary attempts to break down the main ideas and insights from the book. The field of AI is concerned with the understanding, engineering, and implementation of intelligent agents. Intelligence can be defined through several perspectives: <br>Acting Humanly- The ability to pass a <a data-href="Turing Test" href="https://emujakic.github.io/TechKB/notes/ai/turing-test.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Turing Test</a>.
Thinking Humanly- Thinking like a human.
Thinking Rationally- Acting in such a way as to achieve the 'best' possible outcome.
Beneficial Machines- Acting in a way beneficial to humans. <br>
<a data-href="Utility" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility</a> is the subjective value of an outcome. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a> is a branch of logic made up of predicates that return either true or false, universal/existential quantifiers, terms, and logical connectives such as 'and' 'or' 'not'. <br>
<a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> extends logic to scenarios involving uncertainty, allowing for the modeling of real-world conditions where information is incomplete or ambiguous. <br>
<a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a> deals with the principles and methods for making rational decisions under uncertainty. <br>
<a data-href="Game Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game Theory</a> is a framework for analyzing interdependent multi-agent environments. <br>
<a data-href="Control Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Control Theory</a> is the design of systems that can automatically adjust their behavior to achieve desired outcomes. A cost function quantifies the cost of a particular action or sequence of actions. Something is 'stochastic' if it exhibits uncertainty. <br>
A <a data-href="Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Model</a> is a system where the following state depends only on the current state. A Markov Process is a stochastic process that satisfies the Markov Model. A <a data-href="Hidden Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hidden Markov Model</a> is a statistical model that represents systems that transition between different hidden states, while perceiving observable outputs. <br>
A <a data-href="Bayesian Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayesian Network</a> is a probabilistic model implemented as a directed acyclic graph that represents a set of <a data-tooltip-position="top" aria-label="Random Variable" data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variables</a> and their conditional dependencies, as well as a set of conditional <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="69" to="80" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution tables. <br>
<a data-href="Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent</a> - Anything that can perceive its environment with sensors and act upon it with actuators. <br>
<a data-href="Percept Sequence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percept Sequence</a> - Everything an agent has perceived. <br>
<a data-href="Agent Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent Function</a> - An abstract mathematical function that maps percept sequences to actions. Agent Program - A concrete implementation of some abstract agent function. Performance Measure - Evaluates the desirability of an outcome. Information Gathering - Performing potentially sub-optimal actions in order to perceive new information about the environment. Rationality maximizes expected performance based on the knowledge available. What is rational at a given time-step is based on the agent's performance measure, its available actions, its prior knowledge of the environment, as well as its percept sequence up until that time-step. <br>
<a data-href="Task Environment" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Task Environment</a> - The factors that determine how an agent operates. The task environment consists of the performance measure, sensors, actuators, and external environment. A task environment can be fully observable, meaning the agent's sensors give it complete knowledge about all relevant variables of the environment at all times. A Task environment is partially observable if the sensors provide a noisy or incomplete description of the actual state at any time step. A task environment is single agent if there is only one actor that influences the environment, else, it is a multi-agent environment. <br>
A task environment is deterministic if the next state is completely determined by the current state and the action taken. Otherwise, the environment is nondeterministic or stochastic. An environment is uncertain if there is uncertainty in either the <a data-href="Sensor Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Sensor Model</a> - which returns the perceived output of the current state, or if there is uncertainty in the <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a> - which returns the next state based on the current state and the action taken. Together the transition and sensor model allow the agent to keep track of the state of the world . A task environment is episodic if the sequence of states are divided into atomic episodes, that is, the next state (episode) does not depend on the actions from previous states. A task environment is sequential if actions at any given state can impact the actions taken in future states. A task environment is dynamic if it can change while the agent is deliberating, otherwise, the environment is static. If the environment itself doesn't change but the passage of time impacts the agent's performance measure, the environment is considered semi-dynamic. <br>
An environment is known if the outcomes (or <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a> of outcomes) of actions are given. Otherwise, the environment is unknown and the agent will have to learn the result of its actions. Discrete variables can take on distinct, separate values. <br>
Continuous variables can take on any value in a <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="28" to="33" origin-text="range" class="internal-link virtual-link-a">range</a>. Simple Reflex Agent - An agent that selects an action that selects based only on the current percept. Is susceptible to infinite loops in partially-observable environments which can be avoided if the agent selects actions with an element of randomization. Model-Based Reflex Agent - An agent which maintains an internal state which is constructed based on the percept history. The agent's internal state keeps track of the result of actions, as well as how the world evolves independent of itself. Goal-Based Agent - An agent that maintains a current state description as well as goal information which determines the desirability of a state or action. Though, goals treat all non-goal states with equal desirability which leads to poor performance. <br>
Utility-Based Agent - Instead of a goal, the agent has a <a data-href="Utility Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Function</a> which assigns a continuous value to a state or action, allowing the agent to act in such a way that maximizes its utility function. The utility function is simply and internalization of the agent's performance measure, in the case where all an agent's current actions lead to non-goal states, a utility-based agent will choose the action that leads to the "best" state, rather than treating each action as equal like a goal-based agent would. Utility also allows an agent to rationally deal with multiple goals by selecting the goal with the maximum utility. <br>
<a data-href="Learning Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Agent</a> - An agent that can learn and improve from experience or training. A learning agent can be any of the mentioned types. Learning agents typically consist of four main components: Learning Element - The element responsible for making improvements.
Performance Element - The element responsible for selecting external actions. The performance element is what we previously considered as the entire agent.
Critic - The element which provides feedback to the learning element on how well the agent is performing. Problem-solving agent: an agent that needs to plan, and consider a sequence of actions to reach a goal. Search: the computational process a problem-solving agent undertakes. <br>
An algorithm is informed if the agent can estimate its proximity to the goal using a <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a>. Otherwise, the algorithm is uninformed. A problem-solving agent: Formulates its goal
Devises a description of the states and actions needed to reach its goal.
Simulates a sequence of actions until it finds a solution.
Executes the solution, if one is found. An system is considered open-loop if it ignores its percepts while executing its solution. This is done so if the environment is known and deterministic, meaning the agent needs not to keep track of its percepts. <br>A system is closed-loop if it keeps track of its percepts during execution. The term closed loop is used to <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="85" to="89" origin-text="mean" class="internal-link virtual-link-a">mean</a> that the loop between the agent and its environment is not broken. A search problem is defined by the following five components: <br>The set of possible states (<a data-href="State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State Space</a>).
The initial state.
A set of one or more goals states.
The set of actions available to the agent.
<br>The <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a>, which describes the result of the agent taking a action in its current state. A sequence of actions forms a path within the state space, and a path is considered a solution if it reaches a goal state from the initial state. A solution is considered optimal if it has the lowest cost among all possible solutions. <br>
The state space can be represented as a <a data-href="Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Graph</a> where the vertices represent states, and edges represent actions which lead to other states. The diameter of a graph is the greatest distance between any 2 nodes. A state can be abstracted by removing as much detail as possible, while still retaining validity. <br>
<a data-href="Search Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Algorithm</a>: Takes a search problem and returns a solution or failure. There are four ways to evaluate the performance of a search algorithm: Completeness: Does the algorithm always find a solution if one exists?
Optimality: Does the algorithm find the optimal solution?
<br><a data-href="Time Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Time Complexity</a>: How does the search time scale as the size of the problem scales?
<br><a data-href="Space Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Space Complexity</a>: How does the memory usage scale as the size of the problem scales? In bounded suboptimal search we look for a solution within some constant factor of the optimal solution. In bounded-cost search we look for a solution whose cost is less than some constant. In unbounded-cost search we accept any solution and prioritize the speed of the algorithm. For a search algorithm to be complete in an infinite state space, it needs to systematically explore the space. <br>
<a data-href="Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Tree</a>: Describes the path between states. The root node represents the initial state, and the current node can be expanded by considering the actions available, then generating a new child node for each resulting state. <br>
Frontier: The collection of nodes that have been generated but not yet explored and is typically implemented as a <a data-href="Queue" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Queue</a> or a <a data-href="Stack" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stack</a>. The functions available on the frontier are: is-Empty, which checks if the frontier is empty.
pop, which returns and removes the first element.
top, which returns the first element but does not remove it.
add, which adds a new element to the end of the queue. A best-first search, also known as a greedy search, chooses the node with the lowest cost in the frontier. A node is made up of the following four components: The state that it represents.
Its parent node, which allows us to backtrack from a goal state back to the initial state.
The action which generated it.
Its total path cost from the root. An uninformed search algorithm is completely unaware of how far any state is from the goal. Uninformed algorithms are differ in the way that they expand nodes in the frontier. Some common uninformed search algorithms include: <br><a data-href="Breadth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Breadth-First Search</a>: Expands all the nodes in the current depth, starting at the root, before moving deeper into the tree. This search in implemented using a queue, which is a FIFO data structure. BFS is a systematic search, meaning, it is complete even in infinite state spaces.
BFS is cost optimal if the edges are unweighted or have a global constant weight.
The goal test may be early, meaning each node is checked to be a goal when it is first generated; or the goal test may be late, meaning each node is checked when it is popped from the queue.
The time and space complexity of BFS is where is the number of children and is the depth of the tree. <br><a data-href="Dijkstra's Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dijkstra's Algorithm</a>: is a greedy search algorithm that uses a late goal test to ensure optimality. It maintains a list of the shortest distances to each node from the root where, initially, the distance to the root is 0 and the distance to all other nodes is . The frontier is implemented as a priority queue, where the node with the smallest distance is expanded first. Then all the current node's neighbors are examined and if a shorter distance is found, the distance to the corresponding node is updated. This process is iterated until the optimal path is found. Dijkstra's is complete and optimal for weighted graphs with non-negative weights.
The time complexity of Dijkstra's is where is the number of vertices, and is the number of edges. The space complexity of Dijkstra's is . <br><a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a>: Expands the deepest node in the frontier. DFS uses a stack as opposed to a queue, which is a LIFO data structure. This algorithm is commonly implemented as a tree search, meaning, it doesn't keep track of the states that it has reached. DFS continues down a path until either a goal is found, or a leaf node is found. In the latter case, the algorithm backtracks to the next deepest node and expands its children if any. DFS is not cost-optimal. DFS is complete in finite state spaces though not in infinite state spaces.
The time complexity of DFS is and the space complexity is .
<br><a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a> is a variation of DFS where only one successor is generated at a time, and the current state description is updated in place, rather than allocating memory for a new state. <br><a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>: Treats nodes at depth as if they are leaf nodes. This prevents the node from traveling down an infinite path. <br>The time complexity of depth-limited search is where is the <a data-href="Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Branching Factor</a> and is the depth limit.
The diameter of the state space is a good limit value, though, it is rarely known beforehand. <br><a data-href="Iterative Deepening DFS" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening DFS</a>: A depth limited search which iteratively increments the depth limit until a solution is found or a failure is returned. This combines the benefits of depth first and breadth first search. Optimal for unweighted paths.
Complete for finite, acyclic state spaces.
Time complexity of <br><a data-href="Bidirectional Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bidirectional Search</a>: Searches forward from the initial state and backward from the goal state until the 2 meet. The goal test returns true when the two paths meet. Since 2 frontiers need to be tracked, the space requirements are higher than most of the previously discussed algorithms. An informed (heuristic) search algorithm uses a heuristic function to estimate the distance of any given node from the goal. A search is considered greedy if it expands the node with the lowest always. Greedy searches are complete on finite spaces, but not on infinite spaces.
<br><a data-href="A* Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">A* Search</a>: The evaluation function, , is the path cost from the current state to node plus . A* is complete and optimal if the heuristic is admissible or optimistic - meaning it never overestimates the cost to the goal.
A* prunes nodes that are unnecessary for finding a solution.
If we allow A* to use an inadmissible heuristic, there is a risk of finding a suboptimal solution, but the heuristic may be more accurate, thus, reducing the number of expanded nodes.
A variant of A, called **weighted A search** emphasizes the heuristic by multiplying by some constant . Weighted A finds a solution somewhere between and . A heuristic is consistent if for every node , its successor : , where represents the cost from to .
<br>This means that the cost of reaching the goal from node is never greater than the cost of getting to from , plus the estimated cost of reaching the goal from . This is a version of the <a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>.
Every consistent heuristic is admissible, but not every admissible heuristic is consistent.
A composite heuristic combines multiple heuristics, and for certain complex problems, can be more effective than a single heuristic. A node is surely expanded if it can be reached from the initial state on a path where every node has , where is the optimal cost.
<br><a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>: Keeps track of only the nodes with the best f-scores. Is incomplete and suboptimal, but very fast and memory efficient. <br><a data-href="Iterative Deepening A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening A*</a>: Combines the advantages of A* and iterative deepening DFS, where, at each iteration, the cutoff values is the smallest f-score of any node that exceeds the cutoff of the previous iteration. The initial cutoff is the heuristic value of the root node. <br>Can be visualized using <a data-href="Search Contours" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Contours</a>. <br><a data-href="Recursive Best-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive Best-First Search</a>: Uses a f-limit variable to keep track of the f-value of the best alternative path from any ancestor of the current node. If the current node exceeds that f-limit, the recursion unwinds to the alternative path. Is optimal if the heuristic is admissible. Both RBFS and IDA use too little* memory, meaning they forget most of what they've done.
<br><a data-href="Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Memory-Bounded A*</a>: And <a data-href="Simplified Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simplified Memory-Bounded A*</a> uses all the memory that is allocated to it. SMA proceeds like A, expanding the node with the best f-score until memory is full. In that case, it drops the node with the highest f-score and passes its value to the parent, similar to RBFS. If all nodes have the same f-score, the oldest node is deleted and the newest is expanded.
Is complete and optimal if the optimal solution can fit in memory. <br>
One way to analyze the quality of a heuristic is the <a data-href="Effective Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Effective Branching Factor</a> . <br>If is the total number of nodes generated by A and the solution depth is , $b^$ is the branching factor a <a data-href="Uniform Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Uniform Tree</a> of depth must have to contain nodes. A well-designed heuristic should have a branching factor close to 1. <br>
<a data-href="Relaxed Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Relaxed Problems</a>: problems with fewer restrictions on available actions. For example, allowing illegal moves in the <a data-href="N-Queens Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">N-Queens Problem</a>. The cost of an optimal solution in a relaxed problem is an admissible and consistent heuristic for the original problem.
Admissible heuristics can also be derived from subproblems of the original problem where the optimal cost in the subproblem is a lower bound on the cost of the complete problem. <br>
<a data-href="Pattern Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Database</a>: Stores the exact solution costs for possible subproblem instances. Commonly used to store <a data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebase</a>s for an AI <a href="https://emujakic.github.io/TechKB/projects/ai-chess-robot/chess-engine.html" target="_self" rel="noopener noreferrer" from="12" to="24" origin-text="chess engine" class="internal-link virtual-link-a">chess engine</a>, for example. When searching for a solution, the agent can use the pattern database to quickly estimate the cost for a given state.
Disjoint pattern databases ignore rather than abstract the rest of the problem. Pre-computation stores the optimal path between pairs of vertices. Landmark points can be precomputed and used as an efficient but inadmissible heuristic. <br>
<a data-href="Metalevel State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Metalevel State Space</a>: Allows an agent to reason about its own reasoning process by evaluating potential strategies and their outcomes. Metalevel state spaces allow an agent to learn from experience and dynamically adjust their strategy based on observed output. Local search algorithms search the state space without keeping track of a path or previously reached states. These algorithms are not systematic, though they use very little memory, and usually have constant space complexity.
Local search is good for problems where only the final state is desired and not so much the path to get there. The most common application of local search is solving optimization problems, where the goal is to find the best state according to some objective function. Consider the states of a problem laid out in a state-space landscape—a line chart where each state has an elevation defined by the objective function. <br>If the goal is to find the highest peak, then the problem is called <a data-href="Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hill Climbing</a>.
<br>If the goal is to find the lowest valley, the problem is called <a data-href="Gradient Descent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient Descent</a>. Hill Climbing: An optimization algorithm which keeps track of the current state, and on each iteration, moves to the neighboring state which provides the steepest ascent, that is, it moves uphill. Hill climbing terminates when it reaches a peak, or local maximum, a point where no neighboring state has a higher value.
Since it doesn't look ahead past it's immediate neighbors, nor does it consider more than the next move, hill climbing is considered a greedy local search.
Hill climbing is also susceptible to plateaus, a flat region of the state space landscape. A plateau is a shoulder if it immediately neighbors a better state. <br>
<a data-href="Stochastic Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stochastic Hill Climbing</a>: Chooses randomly from the set of available uphill moves. Typically, the <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probability</a> of a move being selected is linear to the steepness of the move. <br>
<a data-href="First-Choice Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Choice Hill Climbing</a>: Randomly generates successors until a state better than the current one is generated. <br>
<a data-href="Random-Restart Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random-Restart Hill Climbing</a>: Conducts a series of searches from random initial states, until a goal is found. Random-restart is complete, since it will eventually generate a goal as the initial state.
If each search has a probability of success, the expected number of restarts is . <br>
<a data-href="Simulated Annealing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simulated Annealing</a>: A local search algorithm with a temperature which determines the <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="22" to="33" origin-text="probability" class="internal-link virtual-link-a">probability</a> of the algorithm accepting a downhill move. The algorithms starts with a high temperature, which decreases over iterations. The probability of a move being selected decreases with the "badness" of the move.
Since simulated annealing can make downhill moves, this allows it to escape local maxima that other algorithms can't. <br>
<a data-href="Local Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Local Beam Search</a>: A local search algorithm which keeps track of states rather than just one. It begins with randomly generated states, and at each iteration, generates all the neighbors of all states. If one of the successors is a goal state, then the algorithm halts; else, the algorithm selects the best successors and repeats. A variant of local beam search, called stochastic beam search, chooses successors with probabilities proportional to their values. <br>
<a data-href="Genetic Algorithms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Genetic Algorithms</a>: A variant of local beam search inspired by the principles of natural selection and genetics. Successor states are generated by a process called recombination, where two parent states are combined to make a new state. One approach to recombination is to randomly select a crossover point, which splits each of the parent strings and recombines them to form a child. Genetic algorithms starts with a "population" of states, where each state is evaluated based on its fitness level, which determines the likelihood of that state being selected for reproduction. The mutation rate determines the probability that each bit in the offspring string is flipped. This ensures diversity in the population. Elitism is where a number of high-scoring individuals from the previous generation are propagated forward into the current generation without modification. This ensures that high-quality solutions are preserved while still maintaining diversity. Culling is where individuals performing under a certain threshold are removed from the population. Schema: A substring where some positions are left unspecified. Schemas can be thought of as templates or patterns for a full solution. Genetic algorithms work best when schemas correspond to meaningful components of a solution. Continuous Space: A state space with an infinite branching factor. Most real-world environments are continuous. You can discretize a continuous space be limiting values to fixed intervals.
Alternatively, you can make the branching factor finite by sampling successor states randomly, in a random direction by some small amount . <br>
<a data-href="Gradient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient</a>: A <a data-href="Vector" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Vector</a> that contains all the <a data-tooltip-position="top" aria-label="Partial Derivative" data-href="Partial Derivative" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">partial derivatives</a> of a function. Empirical Gradient: The gradient of a function based on observed data rather than analytical calculation. <br>
<a data-href="Line Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Line Search</a>: An optimization technique that is used to find a satisfactory step size along a specific direction to minimize a function. <br>
<a data-href="Newton-Raphson Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Newton-Raphson Algorithm</a>: A general method for finding roots of functions, that is, solutions to equations of the form . Constrained Optimization Problem: An optimization problem where solutions must satisfy some constraints on the value of variables. <br>The most well-known category of constrained optimization problems are <a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems.
<br>Linear programming is a case of the more general problem of <a data-href="Convex Optimization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convex Optimization</a>. Search with Nondeterministic Actions: When the environment is partially-observable or is nondeterministic, the agent either doesn't exactly know it's current state (sensor model), or the next state (transition model) respectively. <br>
<a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>: The set of states that the agent believes it could be in. In nondeterministic or partially-observable environments, the solution to a problem is a conditional plan rather than a sequence of actions. The action to take is conditionally dependent on the percepts received. In a nondeterministic environment, the transition model returns a set of possible states, rather than a single state. The conditional plan can contain if-else statements, which allows solutions to be represented as trees rather than sequences. In a deterministic environment, the only branching is introduced by the agent's actions. These are called 'or' nodes. In a non-deterministic environment, branching is also introduced by the environments choice of outcome for each action. These are called 'and' nodes. <br>
These two nodes alternate to create an <a data-href="And-Or Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">And-Or Tree</a>. A solution for an and-or search problem is a subtree where: Every leaf is a goal node.
Specifies an action at each OR node.
Includes each outcome of each AND node. And-or graphs can be explored using breadth-first or depth-first search. Cycles can arise in nondeterministic problems, one case is where an action has no effect on the current state. If an agent is in an environment where actions can fail, there are no acyclic solutions.
One workaround is to use a while construct, where an action is repeated until it succeeds. This is only useful if repeating the action increases the probability that it succeeds. Sensorless Problems: A problem where an agent's percepts provide no information on the state of the environment. The solution to sensorless problems is a sequence of actions, not a conditional plan, since there are no possible percepts to condition on.
If problem has states, the belief-state problem has states.
The initial state is typically all the states of .
If the agent is unsure about what state it is in, and if some actions are only legal in particular states, then the agent is unsure about what actions it can legally perform. If illegal actions have no consequence on the environment, then the agent can take the union of all actions. Though, if performing illegal actions can be detrimental, then it is safer to take the intersection of available actions.
The transition model for belief states results in a new belief state with all the possible results of the action for each state in the current belief state.
The agent is possibly in a goal state if the current belief state contains a goal state. The agent is necessarily in a goal state if every state in the current belief state is a goal state.
The path cost could be one of several values if the same action has different costs in different states.
In ordinary graph search, newly reached states are tested to see if they've been visited previously, this can be done for belief states as well. If the current belief state is a superset of a previous belief state, we can discard the superset belief state since a solution to the superset must be a solution for each state in the corresponding subset.
Additionally, if the superset has been proven to be solvable, then any of its subsets are guaranteed to be solvable. This extra level of pruning can dramatically increase the efficiency of sensorless solutions. Though, even with this pruning, sensorless problems are still too vast to be solved efficiently.
One alternative is to avoid standard search algorithms, and use algorithms that look within belief states and develop incremental belief-state search algorithms. Partially Observable Problems: Problems where the agent has a PERCEPTS function which returns the percept received by the agent's sensors in a given state. If sensing is nondeterministic, the PERCEPTS function can return a set of possible percepts.
With partial observability, many states can produce the same percepts.
The two main differences between agents in partially observable environments and fully observable deterministic environments is: The solution is a conditional plan rather than a sequence.
The agent needs to maintain a belief state. Online Search: A search algorithm which interleaves action and planning. This is useful in dynamic or semi-dynamic environments, where the environment can change while the agent is deliberating. Online search is also useful in nondeterministic environments by focusing on contingencies which actually occur, rather than the set of all possible contingencies.
The competitive ratio is the discovered solution cost to the optimal cost if the environment was known.
Online agents can get stuck in dead-ends, states from which no goal is reachable.
<br>One common example of online search are <a data-href="Simultaneous Localization and Mapping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simultaneous Localization and Mapping</a> or SLAM problems, where an agent must build a map of an unknown environment while simultaneously keeping track of its position within that environment.
An offline algorithm explores a model of the state space, while an online algorithm explores the real world. Therefore, an online algorithm can only discover successors for the state it is currently in, while offline algorithms can jump around the state space.
In an online DFS, when an agent has tried all the actions in a given state, it must backtrack in the physical world. This can be done by keeping track of the predecessor states of the current state. Though this only works if the actions in the state-space are reversible. Online Local Search: Algorithms like hill climbing or gradient descent are already considered online algorithms. Though, these algorithms are not as good for exploration due to getting stuck at local maxima/minima. A random walk simply selects one of the actions available at random. Preference can be given to actions that have yet to be tried.
Hill climbing can be augmented with memory, where a heuristic value is stored for each visited state.
Optimism under uncertainty encourages the agent to explore new paths, rather than go down already explored paths.
<br><a data-href="Learning Real-Time A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Real-Time A*</a>* updates the cost element for the state it just left, then chooses the best move according to it's current cost element. Factored Representation: A way of representing states as a set of variables that each have a value. <br>
<a data-href="Constraint Satisfaction Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Satisfaction Problem</a>: Specifies constraints on the values of variables of a state. The solutions is the set of states where each variable satisfies every constraint on it. A CSP has three components: : The set of variables.
: The set of domains, one for each variable. A domain can be discrete, continuous, finite, or infinite.
: The set of constraints. Each constraint is a pair , where is a tuple of variables and is a relationship defining the values that each in-scope variable can take on. A relationship may be written as an explicit set of tuples, or as a function.
A unary constraint deals with one variable, a binary constraint deals with two. A constraint that deals with more than two variables is called a global constraint, even if it doesn't involve all variables.
Precedence constraints assert that one task must be complete before another.
Disjunctive constraints allow a disjunction of conditions to satisfy the constraint.
<br>Preference constraints are encoded as costs on variable assignments. CSPs with preferences can be solved using path-based or local optimization search algorithms. Such a problem is called a <a data-href="Constraint Optimization Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Optimization Problem</a>.
With infinite domains, you must use implicit constraints.
<br><a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems are an example of CSPs in continuous domains, since each constraint is a linear equality/inequality. An assignment which satisfies all constraints is consistent or legal. An assignment is complete if it assigns a value to each variable.
A solution is a legal and complete assignment. <br>
<a data-href="Constraint Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Graph</a>: A data structure in which nodes correspond to state variables, and edges correspond to binary constraints between variables. Constraint Hypergraph: Consists of nodes (circles) and square nodes—hypernodes that represent -ary constraints involving variables. Auxiliary Variables: A temporary variable used to simplify problems or represent certain constraints. Constraint Propagation: Uses the constraints on variables to reduce the legal values for variables, which could reduce the domains of other variables, and so on. Enforcing local consistency on nodes in a constraint graph causes inconsistent values to be eliminated throughout the graph. Node Consistency: A variable is node-consistent if all the values in its domain satisfies all the unary constraints on out.
Arc Consistency: A variable is arc-consistent if every value in its domain satisfies all binary constraints it's a part of. <br>
<a data-href="AC-3" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">AC-3</a>: The most popular arc-consistency algorithm which maintains a queue of arcs to consider. AC-3 pops an arc from the queue, (), and makes arc-consistent with respect to .
If the domain of , remains the same, it moves on to the next arc.
If the domain of changes, then all arcs are enqueued, where is a neighbor of .
The complexity is where is the number of arcs and is the maximum size of the domain. Path Consistency: A set of variables are path consistent if, for every assignment to and consistent with their constraints, there is an assignment to that satisfies constraints on () and (). This refers to the overall consistency of the path from to through a third variable . -Consistency: A CSP is -consistent if, for any set of variables, and for any consistent assignment to those variables, a consistent value can be assigned to any th variable. Arc-consistency is considered 2-consistent.
A CSP is strongly -consistent if it is -consistent, -consistent, all the way to 1-consistent. The alldiff constraint says that all in-scope variables must have distinct values. The resource constraint, also called the at-most constraint, is a limitation on the availability of a particular resource. <br>
For large problems, it is common to represent domains using upper and lower bounds. These domains are managed by <a data-href="Bounds Propagation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bounds Propagation</a>. A CSP is bounds-consistent if, for every variable , the lower and upper bounds of have corresponding values in the domain of every variable such that the constraints on and are satisfied. This means that for each value within the bounds of , there exists at least one compatible value in the domain of that meets the constraints. <br>
For a CSP with variables, the tree representing the CSP has leaves even though there are only possible complete assignments. We can reduce this by a factor of if we recognize that CSPs are <a data-tooltip-position="top" aria-label="Commutative Property" data-href="Commutative Property" href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">commutative</a>. Commutativity means that the order of application of a set of actions does not matter. With this restriction, the number of leaves is . <br>
<a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>: A depth-first search for CSPs is used when after performing constraint propagation, there are still multiple possible values for variables. A recursive backtracking search chooses an unassigned variable, then chooses a value for that variable which satisfies all the constraints on the variable. If the call assigns a value to all variables successfully, then a solution is returned. If a variable's domain becomes empty, then the call backtracks by undoing the last assignment and tries another legal value.
The simplest strategy for selecting an unassigned variable is called static ordering. This strategy simply chooses the variables in the order that they appear in. The next simplest strategy is choosing randomly. Neither of these are optimal.
Minimum-Remaining-Values Heuristic: Chooses the variable with the least amount of values in its domain. If some variable has no legal values left, the MRV heuristic will recognize this immediately and start backtracking.
Degree Heuristic: Chooses the variable that is involved in the largest number of constraints with other unassigned variables. This is typically used as a tiebreaker for the MRV heuristic.
Least-Constraining-Value Heuristic: Chooses the value in the current variables domain which rules out the fewest choices for neighboring values in the constraint graph. Forward Checking: A form of inference where whenever a variable is assigned a value, the forward-checking process establishes arc-consistency for it. For each unassigned neighbor of , delete any values from its domain that is inconsistent with the value chosen for .
For many problems, the search is more efficient if the MRV heuristic and forward-checking are combined.
Forward-checking is not a complete method for discovering inconsistencies. <br>
<a data-href="Maintaining Arc-Consistency" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Maintaining Arc-Consistency</a>: An algorithm that can detect more inconsistencies than forward checking. It creates a queue of all arcs in the CSP, then pops one ().
For each value in 's domain, check if there exists a value in that satisfies the constraint. If not, remove the value from 's domain.
If the domain of changes, add all arcs that are connected to back in the queue. Chronological Backtracking: A backtracking method which backtracks to the previous assigned variable and tries a new value for it. This is not an intelligent way to backtrack. A better way is to backtrack to variables that are more likely to fix the problem. One way to do so is to keep a conflict set—a set of assignments that are in conflict with some value of the current variable.
<br>The <a data-href="Backjumping Method" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backjumping Method</a> moves back to the most recent assignment in the conflict set. Forward checking can be modified to supply a conflict set.
<br><a data-href="Conflict-Directed Backjumping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conflict-Directed Backjumping</a>: The conflict set for a variable is the set of preceding variables that cause to current variable to fail, together with any subsequent failed variables. <br>
<a data-href="Constraint Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Learning</a>: The process of learning and adding new constraints whenever an inconsistency is detected. It involve finding the minimum set of variables from the conflict set which causes the inconsistency. Local Search For CSPs: Local search algorithms can be effective for solving CSPs. A complete state formulation is used, meaning each state assigns a value to every variable and the search changes the value of one variable at a time. The landscape of a CSP using the min-conflicts heuristic usually has a series of plateaus. Plateau search allows sideways movements across plateaus which helps avoid getting stuck at local maxima.
Tabu search can avoid wandering back and forth on a plateau by keeping a list of recently visited states and forbidding the algorithm to return to such states. Constraint Weighing: Assigns weights to constraints based on their importance. All constraints are initiated with a weight of 1, and each time a constraint is violated, its weight is incremented. This adds topography to plateaus, and it adds a form of machine learning. Independent Subproblem: A subset of variables and constraints in a CSP which can be solved without considering the rest of the problem. Independence can be discovered by finding independent components in the constraint graph. Though, comp
Independent subproblems can be solved in time linear in , the number of variables. Without this decomposition into subproblems, the work required is exponential in . Though, fully independent subproblems are rare in practice. There are constraint graph structures other than independent subproblems which are easy to solve. A constraint graph is a tree when any two variables are connected by only one path. Tree-structured CSPs can also be solved in linear time using directional arc-consistency. A CSP is DAC if under an ordering of variables , every is arc-consistent with every where .
To solve a tree-structured CSP, pick any variable as the root of the tree, then choose an ordering such that each variable appears after its parent in the tree. This is called a topological sort. Once you have a DAC graph, you can simply go down the list of variables and choose any remaining values. A constraint graph can be reduced to a tree by fixing the values of some variables, such that the remaining unassigned variables form a tree. A cycle cutset is a set of edges whose removal would disconnect the graph or eliminate cycles. There are approximation algorithms for finding the smallest cycle cutset. Tree Decomposition: Another technique for reducing a constraint graph to a tree. It is a transformation in which each node of the resulting tree consists of a set of variables from the original graph. A tree decomposition must satisfy three requirements: Every variable appears in at least one tree node.
If two variables have an edge between them, both variables and their constraint must appear in at least one tree node.
If a variable appears in two nodes, it must appear in each node along the path connecting those nodes. Value Symmetry: The situation where distinct values of a variable's domain lead to the same solution. You can reduce the search space by a factor of by breaking up symmetry in the assignments. This is achieved using symmetry breaking constraints. For example, you can enforce the values of three variables to be in alphabetical order, allowing only one solution. <br>
Competitive Environment: A multi-agent environment in which agents have conflicting goals. This results in <a data-href="Adversarial Search Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Search Problems</a>. In the case where there is a large number of agents, we can consider them in the aggregate as an economy, allowing us to make predictions without considering the actions of each individual agent.
We can also model adversaries as a stochastic part of the environment itself.
<br>A third option is to model the adversarial agents explicitly with the techniques of <a data-href="Adversarial Game Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Game Search Tree</a>. Pruning is the process of ignoring certain parts of the search tree that don't impact the optimal move.
A heuristic evaluation function estimates who is winning in each state based on the features of the state. An agent has imperfect information if it doesn't have complete knowledge about the environment. Imperfect information is also called partial observability, where perfect information is called full observability. <br>
Chess is a two-player, deterministic, turn-taking, perfect-information, <a data-href="Zero-Sum" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Zero-Sum</a> game. In multi-agent environments, actions are called moves and states are called positions.
A zero-sum game is a game where the sum of the payoffs to all players equals 0. Meaning whatever one player gains is directly cancelled out by the loss of another player. A game can be formally defined with the following components: : The initial state of the game.
TO-MOVE(s): A function that returns the player whose turn it is in state .
ACTION(s): Returns the set of legal actions in state .
RESULT(s, a): The transition model defining the result of action in state .
IS-TERMINAL(s): Returns true if state is a terminal state, meaning the game is over.
UTILITY(s,p): A utility function defining the utility value to player when the game ends in terminal state . <br>
<a data-href="State-Space Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State-Space Graph</a>: Defined by the initial state, actions, and result function. Nodes represents positions (states), and edges represent moves. <br>
<a data-href="Game-Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game-Tree</a>: A specialized form of a state-space graph, it assumes a two-player turn-taking game. One player is designated the MAX player, who is trying to maximize the objective function; the other player is the MIN player, who is trying to minimize the objective function.
A ply refers to a single move made by a single agent. <br>
For an agent to act rationally, its <a data-href="Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Strategy</a> must be conditioned upon the actions of the other player. <br>
<a data-href="Minimax Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minimax Algorithm</a>: Given a game tree, the optimal move can be determined by working out the minimax value of each state, denoted as MINIMAX(s). MAX prefers a higher value, while MIN prefers a lower value.
<br>The algorithm performs a complete <a data-href="Recursive" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive</a> <a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a> exploration. It proceeds down to a leaf node, and backs up the minimax value through the tree as the recursion unwinds.
The complexity of minimax by itself is where is the branching factor of the tree and is the max depth of the tree. <br>
<a data-href="Alpha-Beta Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Alpha-Beta Pruning</a>: An optimization technique used in the minimax algorithm which prunes suboptimal branches. It keeps track of two values: Alpha: The highest-value choice found so-far along the path for the MAX player.
Beta: The lowest-value choice found so-far along the path for the MIN player.
If MAX's score exceeds MIN's beta value, the branch is beta-pruned.
If MIN's score is less than MAX's alpha value, the branch is alpha-pruned. The effectiveness of alpha-beta pruning is dependent on the order in which states are examined. If we could first examine the best states, minimax with pruning would reduce to . This is in the case of perfect move ordering. If the best moves are evaluated first, the alpha and beta values can be updated more quickly. This allows for more effective pruning of suboptimal branches. Using heuristics can lead to better move orderings. For example, moves that capture pieces or attack the king can be examined first, in the case of a chess game.
Killer moves are moves that have caused pruning in previous searches. Prioritizing these moves is called the killer moves heuristic. Repeated states may occur in a game tree due to transpositions, which are different permutations of the same move sequence leading to the same position. <br>Transpositions are addressed using <a data-href="Transposition Tables" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transposition Tables</a>. Say two move sequences, and both lead to the same state . We can find the value of state when exploring sequence and store it in the transposition table. Then, when we reach state from sequence , we can simply look up its value in the table. <br>
<a data-href="Type A Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type A Strategy</a>: Evaluates all possible moves to a certain depth in the game tree and uses a heuristic function to estimate the utility of states at that depth. This cuts the search off early and applies a heuristic function to states, effectively treating non-terminal states as terminal.
In this case, you replace the utility function with an EVAL function, and the terminal test function is replaced with a cutoff test, which returns true for terminal nodes, but is otherwise free to decide when to cut off a search. <br>
<a data-href="Type B Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type B Strategy</a>: Ignores moves that look bad, and follows promising lines as far as possible. <br>
<a data-href="Heuristic Evaluation Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic Evaluation Function</a>: Returns an estimate of the expected utility of a state to player . For terminal states, EVAL(s,p) must equal UTILITY(s,p). For non-terminal states, the evaluation must be between a loss and a win.
Most evaluations work by calculating various features of states. The features taken together define various categories or equivalence classes of states. This enables the evaluation function to return a single variable which estimated the proportion of states with each outcome in that equivalence class.
<br>A weighted linear function computes separate contributions from each feature, and combines them for the total value. It's defined as: . The weights should be normalized so that the sum is always within the <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="59" to="64" origin-text="range" class="internal-link virtual-link-a">range</a> . <br>
Cutting-Off: The most straightforward approach to cutting the search early. This method sets a fixed depth limit as the cutoff point. This is called a <a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>. <br>
<a data-href="Iterative Deepening" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening</a>: Iteratively performs depth-limited searches, incrementing the depth limit on each iteration. The evaluation function should only apply to positions that are quiescent or stable, meaning there is no pending move that would drastically change the evaluation. <br>The IS-CUTOFF function should return false for non-quiescent states. This is called a <a data-href="Quiescent Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quiescent Search</a>. Horizon Effect: Occurs when the agent is facing a devastating move from the opponent, but can delay it beyond its horizon by performing other moves. <br>One way to address this is to allow <a data-href="Singular Extensions" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Singular Extensions</a>, which are moves that are clearly better than all other available moves in a given position. <br>
<a data-href="Forward Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Pruning</a>: Prunes moves that appear to be poor moves, but might in fact be good. This saves computation time by incurring the risk of pruning good moves and is considered a type B strategy.
<br>One approach, called <a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>, on each ply, considers only the beam of the best moves according to the evaluation function.
Probabilistic Cut Algorithm: A forward-pruning approach to alpha-beta search that uses statistics derived from previous experience to lessen the chance that the optimal move gets pruned. <br>
<a data-href="Late Move Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Late Move Reduction</a> assumes that move ordering has been done well, therefore, moves that are later in the sequence are less likely to be good moves. Rather than pruning the late moves, we just reduce the depth at which they are searched. If the shallow search returns a value above the current alpha, the search is re-run at full depth. Table Lookup: Rather than search, table lookup stores and retrieves the best move from a data structure. A program can then produce a policy, which is a mapping from every possible state to the optimal move in that state. <br>This is commonly used in chess engines to save <a data-tooltip-position="top" aria-label="Endgame Tablebase" data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebases</a>, which allows the engine to play endgames perfectly. This table is constructed with a <a data-href="Retrograde Minimax Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Retrograde Minimax Search</a>, which involves evaluating the end of the game backward to the beginning. <br>
<a data-href="Monte-Carlo Tree Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monte-Carlo Tree Search</a>: A search algorithm that doesn't use a heuristic evaluation function, instead it calculates the average utility over a number of complete games starting from a given state. This is the same as the win percentage for games with binary win/lose outcomes MCTS is considered a kind of <a data-href="Reinforcement Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reinforcement Learning</a>. Playout Policy: chooses which moves to make during a play-out simulation. These policies can be learned by self-play using neural networks.
Early playout termination is when a playout is stopped early because it is taking too many moves. The playout is either evaluated with a heuristic or is declared a draw.
<br>A pure MCTS does simulations starting from the current state and tracks which possible moves have the highest win percentage. For some stochastic games, this converges to optimal play as increases, though it isn't sufficient for most games. We instead need a selection policy which balances the <a data-href="Exploration-Exploitation Tradeoff" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Exploration-Exploitation Tradeoff</a>.
MCTS does this by maintaining a search tree and growing it at each iteration of the following four steps: Selection: Starting at the root, we choose a move (according to the selection policy), leading to a successor state, and repeat this process to a leaf node.
Expansion: We grow the tree by generating a new child of the selected node.
Simulation: We perform a playout from the newly generated node, choosing moves according to the playout policy.
Back-Propagation: We use the result of the simulation to update all nodes going up to the root. <br>
<a data-href="Upper Confidence Bound" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Upper Confidence Bound</a>: A selection policy which ranks possible moves according to the UCB formula: Where is the average reward obtained from action , is the total number of trials, is the total number of trials where action was selected, and is a constant which controls the degree of exploration. Stochastic Games: A class of games which are in an environment that exhibit randomness. A standard game tree cannot be used to model stochastic game because of their inherit uncertainty. <br>Chance nodes are included which denote the possible outcomes of some random variable and their <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a>.
<br>Positions do not have definite MINIMAX values, an <a data-href="Expected Value" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Expected Value</a> is calculated instead. This leads to the expectminimax values for games with chance nodes. Knowledge-Based Agent: Uses reasoning processes over an internal knowledge representation. The central component of a knowledge-based agent is its knowledge base (KB). <br>
<a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>: A set of sentences, each expressed in a knowledge representation language and represents some assertion about the world. When the sentence isn't derived from other sentences, it is called an axiom.
A KB may initially contain some background knowledge. TELL and ASK are the names for adding to or querying the KB, respectively. Each of these operations may include inference: deriving new sentences from existing ones. Each time a knowledge-based agent is called it: TELLs the KB what it saw (its percepts).
ASKs the KB what action to perform. This usually requires extensive reasoning.
TELLs the KB what action was chosen and returns that action. Declarative Approach: Starts with an empty KB, and the agent designer TELLs sentences one by one until the agent can operate in its environment. Procedural Approach: Encodes desired behavior directly as program code. <br>
<a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a>: A formal system that uses symbols and syntax to represent logical expressions and arguments. A logic must also define the semantics, or meaning, of sentences. The semantics defines the truth of each sentence with respect to each possible world.
The term model is commonly used in place of possible world. When possible worlds represent potentially real environments, a model is a mathematical abstraction, which has a fixed truth value for every relevant sentence. Logical entailment between two sentences means that a sentence follows logically from another sentence. Entailment is represented symbolically as . This means entails if and only if, in every model where is true, is also true. <br>
<a data-href="Logical Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logical Inference</a>: The process of deriving new conclusions from existing premises. Model Checking: Enumerating all possible models to check if is true in all models where the KB is true. <br>
<a data-href="Inference Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Inference Algorithm</a>: A computational method which derives entailed sentences based on a KB. IF a inference algorithm derives only entailed sentences, it is sound or truth preserving. If it derives all entailed sentences, it is complete. If some inference algorithm can derive from KB, it is said that " is derived from KB by ". This sentence is represented symbolically as: Grounding: The connection between logical reasoning processes and the real environment. The agent's sensors create this connection and the general rules of this environment are produced by a sentence construction process called learning. <br>
<a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a>: A branch of <a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a> that deals with propositions, which are statements that are either true or false. <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="2" to="21" origin-text="Propositional logic" class="internal-link virtual-link-a">Propositional logic</a> is made up of: Propositional Symbols: Symbols that start with an uppercase letter and refer to a proposition. For example, , , and are examples of propositional symbols. Each symbol represents a distinct statement that can be true or false. Individual symbols are commonly referred to as literals. A literal is negative if there is a negation applied to it (e.g. ), else, it's a positive literal. Logical Connectives: Operators which combine propositional symbols to create complex sentences. The common connectives include: Negation (NOT, ¬)
Conjunction (AND, ∧)
Disjunction (OR, ∨)
Implication (IMPLIES, →)
Biconditional (IF AND ONLY IF, ↔)
XOR (EXCLUSIVE OR, ) Atomic Sentence: An atomic sentence consists of a single propositional symbol and represents a basic assertion. Complex Sentence: A complex sentence is made up of propositional symbols connected by parenthesis and logical connectives. They are also called formulas. In propositional logic, a model is simply a setting of truth values for each propositional symbol. There are possible models, where is the number of propositional symbols. <br>
<a data-href="Truth Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Truth Table</a>: species the truth value of sentences for each possible assignment of truth values for symbols. <br>
Propositional logic is <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonic</a>, meaning that when you add knowledge to a propositional <a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>, it cannot lead to the loss of previously established truths. <br>
<a data-href="Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Theorem Proving</a>: Applying rules of inference to sentences in a KB to construct a proof of a sentence without checking models. <br>
<a data-href="Rules of Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rules of Inference</a>: Logical rules which provide the structure for how new statements can be derived from existing ones. Proofs: In propositional logic, proofs are essential for establishing the truth of a statement or the validity of an argument. A proof is a demonstration that a conclusion follows from a set of premises. Any of the ch.3 search algorithms can be used to find a sequence of steps to constitute a proof. We define a proof as the following components: Initial State: The initial KB.
<br>Actions: The set of all the inference rules applied to all the sentences that match the top half of the inference rule. The top half refers to the numerator of the inference rule in <a data-href="Gentzen Notation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gentzen Notation</a>.
Result: The bottom half of the inference rule, or the denominator of the inference rule in Gentzen notation.
Goal: A state that contains the sentence which we are trying to prove. <br>
<a data-href="Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modus Ponens</a>: Modus Ponens is a syllogistic argument form and rule of inference. It has the following structure: If then .
.
Therefore, . <br>
Logical Equivalence: Two sentences are said to be logically equivalent if they have the same truth table. This is denoted using the symbol. A <a data-href="Rule of Replacement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rule of Replacement</a> is a logical principle that allows for the substitution of one logical expression, for another, logically equivalent expression. Rules of replacement are used to construct proofs, simply logical expressions, and verify the correctness of logical statements. <br>
Validity: A sentence is valid if it is true in all models. This is called a <a data-href="Tautology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Tautology</a>, meaning that the sentence is necessarily true. Satisfiability: A formula is satisfiable if there is at least one assignment of truth values which makes the formula true. If there is no assignment of truth values to make the formula true, then it is unsatisfiable, also called a contradiction. <br>
<a data-href="Proof by Contradiction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Contradiction</a>: An indirect proof that assumes the conclusion is false, then proves that this assumption leads to a contradiction. If assuming the conclusion is false does lead to a contradiction, then the conclusion must be true. A clause is a disjunction/conjunction of literals. When talking about clauses, usually it refers to a disjunctive clause, which is a logical expression formed by connecting literals with the OR operator. The empty clause is a clause with no literals, commonly denoted as , , or . An empty disjunctive clause is always false, making it analogous to a contradiction. This is an important concept in proof by contradiction, as reaching an empty clause indicates that a contradiction has been proven. <br>
<a data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clause</a>: A disjunctive clause with at most one positive literal. Definite Clause: If a Horn clause has exactly one positive literal, it is a definite clause. For example, .
Goal Clause: If it has no positive literals, it is a goal clause. For example, .
<br>Horn clauses are computationally efficient for algorithms such as <a data-href="Resolution Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution Theorem Proving</a>, or for <a data-href="Forward/Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward/Backward Chaining</a>. This makes them the basis of many <a data-href="Logic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic Programming</a> languages, as well as for automated theorem proving or database querying. <br>
Proof by <a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Resolution resolves two clauses which contain complementary literals. Two literals are complements of one another if one is the negation of the other (e.g. and ). Resolution is defined: The above example resolves and resulting in a new clause called the resolvent. Only one pair of complementary literals can be resolved at a time.
<br>In the context of <a data-href="Automated Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Automated Theorem Proving</a>, resolution is applied repeatedly to derive a contradiction, thereby proving that the negation of the statement that's being proven, is unsatisfiable. Resolution closure of a set of clauses is the set of all clauses derivable by repeated application of the resolution rule to clauses in or their derivatives.
<br>The completeness theorem for resolution in <a data-tooltip-position="top" aria-label="Propositional Logic" data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">propositional logic</a> is called the ground resolution theorem. <br>
<a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a>: A sentence is considered to be in conjunctive normal form (CNF) if it's a conjunction (AND) of one or more clauses. A -CNF sentence is a CNF sentence where each clause has at most literals. If a KB contains only definite clauses: Every definite clause can be written as an implication whose premise is a conjunction of positive literals and whose conclusion is a single positive literal. Ex: .
In Horn form, the premise is called the body and the conclusion is called the head. <br>
<a data-href="Forward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Chaining</a>: An algorithm which determines if a single propositional symbol (the query), is entailed by a knowledge base of definite clauses. It starts with known facts (single, positive literals), if all the premises of an implication are known, then its conclusion is added to the set of known facts.
This process continues until the query is added, or until no further inferences is made.
Forward chaining runs in linear time, is sound, and complete. <br>
<a data-href="Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backward Chaining</a>: Works backwards from the query. If is known to be true then no work is needed. Else, the implications in the KB whose conclusion is are found.
If all the premises of one of those implications is known to be true, then is true.
Often runs in sublinear time. Model checking is used to check the satisfiability of a query. <br><a data-href="Davis-Putnam Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Davis-Putnam Algorithm</a>: A model checking algorithm which takes as input a formula in CNF. Like <a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>, it is essentially a depth-first enumeration of possible models. Early termination occurs if the algorithm detects that the sentence must be true or false, even with a partially completed model. For example, a clause is true if any literal is true.
Pure Symbol Heuristic: A pure symbol is a symbol that always appears with the same sign in all clauses. If a sentence has a model, then it has a model with the pure symbols assigned so as to make their literals true, because doing so never makes a clause false.
Unit Clause Heuristic: In the context of DPLL, a unit clause also means a clause in which all but one literal are already assigned false by the model. Unit propagation occurs when a unit's truth value leads to the simplification of other clauses by removing the occurrence of the literal. Hill-Climbing can be assigned to satisfiability (SAT) problems, provided a correct evaluation function is selected. Since the goal is to find an assignment that satisfies every clause, an evaluation function that counts the number of unsatisfied clauses works well. <br>
<a data-href="WalkSAT Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">WalkSAT Algorithm</a>: A local search algorithm which, on every iteration, picks an unsatisfied clause and picks a symbol to flip. The symbol that is picked is the one that minimizes the number of unsatisfied clauses in the new state. A fluent variable is an aspect of the world that changes. An atemporal variable is static. Hybrid Agent maintains and updates a KB as well as a current plan. The initial KB contains the atemporal variables. At each time step , the new percept sequence is added, along with all the fluent axioms, such as the successor state axioms.
The agent then uses logical inference to to derive new knowledge and update its knowledge base (KB).
Though, with this program, as increases, the computational expense to logically infer increases due to inferences having to go further back and involve more propositional symbols. <br>One solution is to save or cache the results of inference. This is a form of <a data-href="Dynamic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamic Programming</a>. <br>
The percept history and all their ramifications can be replaced with the <a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>, which is the set of all possible states of the world currently. The process of updating the belief state as new percepts arrive is called state estimation.
<br>The set of belief states is the <a data-href="Powerset" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Powerset</a> of the set of physical states, hence the size of the belief state set is . Programming languages are the largest class of formal languages in common use. The main drawback of programming languages is that they lack a general mechanism for deriving facts from other facts. In a compositional language, the meaning of a sentence is a function of its parts. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>: Extends <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="10" to="29" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> by introducing quantifiers and predicates, allowing for the representation of the relationships between objects. Predicates are symbols that represent properties or relations among objects. For example, might denote a certain property of , while could represent a relationship between objects and . <br>
The primary difference between propositional and <a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a> (<a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="2" to="5" origin-text="FOL" class="internal-link virtual-link-a">FOL</a>) is their ontological commitments, that is, what they assume about the nature of reality. Propositional logic assumes that facts are either true or false in the world. First-order logic assumes that the world consists of objects with relations that are either true or false.
In fuzzy logic, the ontological commitment allows degrees of truth between 0 and 1.
<br><a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a> assumes that facts hold at particular times, and that those times are ordered.
Higher-order logics view the relations and functions of first-order logic as objects themselves. A logic can also be characterized by its epistemological commitments, that is, the possible states of knowledge that it allows with respect to each fact. Both first-order and propositional logic sentences are either true, false, or unknown.
<br>Systems using <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="14" to="25" origin-text="probability" class="internal-link virtual-link-a">probability</a> theory can have any degree of belief ranging from 0 to 1. The domain of a model in FOL is the set of objects it contains. The domain is required to be non-empty. Relation: The set of tuples of objects that are related. Function: maps a tuple to a single output. Models require total functions, functions that have an output for every input tuple. Constant symbols stand for objects (e.g. ), predicate symbols stand for relations (i.e. or ), and function symbols stand for functions (e.g. ). Each predicate and function symbol has an arity, fixing the number of arguments it takes. Model checking cannot be used to determine entailment in FOL because the number of first-order models is unbounded. Term: A logical expression that refers to an object. Complex Term: Formed by a function symbol followed by a parenthetical list of arguments. Atomic Sentence: Formed from a predicate symbol optionally followed by a parenthetical list of terms (i.e. ). Atomic sentences can have complex terms as arguments. Complex Sentences: One or more atomic sentences combined using logical connectives or quantifiers. Quantifiers: Allows for statements about some or all objects in a domain. Universal Quantifier (): Asserts that a certain statement is true for all objects. For example, means "for all , is true". Implication is the natural connective for . Existential Quantifier (): Asserts that there is at least one object for which the statement is true. For example, means "there exists an , such that is true". Conjunction (AND) is the natural connective for . Uniqueness Quantifier (): Asserts that exactly one objects makes the statement true. For example, means "there is exactly one , such that is true."
Consecutive quantifiers of the same type can be written as one quantifier with multiple variables: If two quantifiers use the same variable name, the variable belongs to the innermost quantifier that mentions it.
<br> is a conjunction and is a disjunction over the universe of objects, therefore, they obey <a data-href="De Morgan's Laws" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">De Morgan's Laws</a>: We can use the equality symbol to say that two terms refer to the same object. For example, . <br>
<a data-href="Database Semantics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Semantics</a>: Consists of the closed-world, unique names, and domain-closure assumptions. Unique Names Assumption: Assumes that every constant symbol refers to a distinct object.
Closed-World Assumption: Assumes that atomics sentences not known to be true are false.
Domain Closure: Assumes that each model contains no more domain elements than those named by the constant symbols. Domain: Some part of the universe about which we wish to express definite knowledge of what the world contains. Assertions: Sentences that are added to a knowledge base. Questions: Queries or goals which receive information from a knowledge base. Axioms: Provide the basic factual knowledge from which conclusions can be derived. Theorems: Logical sentences that are entailed by axioms. Theorems add no new information, though they are essential for reducing the computational cost of inference. <br>
<a data-href="Knowledge Engineering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Engineering</a>: The general process of constructing a knowledge base (KB). The knowledge engineering process is as follows: Identify the questions that the KB will support ant the kinds of facts that will be available.
Assemble the relevant knowledge.
<br>Decide on a vocabulary of predicates, functions, and constants. Translate domain-level concepts into logic-level names. The result is a vocabulary, known as the <a data-href="Ontology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ontology</a> of the domain.
Encode general knowledge about the domain. Write the axioms for all vocabulary terms.
Encode a description of the problem instance. Write simple atomic sentences about concepts that are already a part of the ontology.
Pose queries to the inference procedure.
Debug and evaluate the knowledge base. <br>
<a data-href="First-Order Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Order Inference</a>: The process of deriving new conclusions from existing statements in <a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="70" to="87" origin-text="first-order logic" class="internal-link virtual-link-a">first-order logic</a>. <br>One way to do first order inference is to convert a first-order KB into propositional logic and use <a data-href="Propositional Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositional Inference</a>. This is called <a data-href="Propositionalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositionalization</a>. The first step is to eliminate universal quantifiers using the rule of universal instantiation, which says that we can infer any sentence obtained by substituting a ground term for a universally quantified variable.
<br>Existential instantiation replaces an existentially quantified variable with a single new constant symbol. A <a data-href="Skolem Constant" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Constant</a> is used to eliminate existential quantifiers. For example, in the formula , the existentially quantified variable can be replaced by a Skolem constant , as long as does not exist elsewhere in the KB. This process is called <a data-href="Skolemization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolemization</a>.
Next, replace ground atomic sentences, such as , with propositional symbols, such as .
Then, apply any of the complete propositional inference algorithms to obtain conclusions.
One problem is that if the KB contains a function symbol, the set of possible ground-term substitutions is infinite. This can be addressed by generating all instantiations with constant symbols, then all terms at depth 1, and so on until a proof of the entailed sentence can be constructed. <br>
<a data-href="Generalized Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Generalized Modus Ponens</a>: A lifted version of Modus Ponens, meaning it raises traditional Modus Ponens from variable-free <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="88" to="107" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> to FOL. Generalized Modus Ponens allows for the involvement of predicates and variables. For example: Substitution: A mapping of variables to terms. To apply a substitution, you replace all occurrences of a variable with the mapping defined by that substitution. Substitutions are denoted as , meaning substitute for the variable . <br>
<a data-href="Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Unification</a>: The process of finding substitutions which make different logical expressions look identical. This process is a key part of all first-order inference algorithms. For example, to unify the two sentences and , you can simply substitute for , . The substitution is known as the unifier.
If you try to unify the sentences , meaning "John knows everyone", and , meaning "Everyone knows Elizabeth", you will not be able to. This is because cannot be equal to and at the same time. This can be avoided by standardizing apart the variables. Standardizing apart a sentence involves renaming its variables to avoid name clashes. For example, you can rename the variable in to . Now the two sentences can be unified with the unifier . If there are multiple possible unifiers, it is best to choose the most general unifier. The most general unifier (MGU) is the unifier which places the fewest restrictions on variables. For example, on the sentence , the unifier is more general than . stores a sentence in the first-order KB, and returns all unifiers such that the query unifies with some sentence in the KB. can be made more efficient by not attempting to unify sentences that clearly have no chance of unifying. This can be done by implementing indexing. Predicate indexing buckets facts by their predicate and stores them in a hash table. For example, the facts may be stored in one bucket, and the facts in another.
<br>Given a sentence to be stored, it's possible to construct indices for all possible queries that unify with it. These queries form a <a data-href="Subsumption Lattice" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Subsumption Lattice</a>, where the child of any node is obtained from its parent by a single substitution, and the highest common descendant of any two nodes is the result of applying the most general unifier. <br>
The forward-chaining algorithm discussed earlier works for KBs of propositional definite clauses. Though, not all first-order sentences can be expressed as a <a data-href="Definite Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Definite Clause</a>—a clause with exactly one positive literal. Existential quantifiers aren't allowed, and universal quantifiers are left implicit. An example of a first-order definite clause is: Since the universal quantifier is implicit, the sentence means that all which is greedy and a king, is evil. A first-order forward-chaining algorithm starts from the known facts, and triggers all the rules whose premises are satisfied, adding their conclusions to the knowledge base. This is repeated until the query is answered, or no new facts can be derived. A fact is not new if it is just a renaming of an existing fact. A sentence is a renaming of another if they're identical except for the names of their variables.
If no new inferences are possible on a KB, then the KB is called a fixed point of the inference process. Forward-chaining can be made more efficient by considering the conjunct ordering problem—finding an ordering of the conjuncts in the premise so that the total cost of inference is minimized. <br>The minimum-remaining-values (MRV) heuristic would suggest an ordering where the next variable to be assigned a value is the variable with the least amount of valid values available. This is an example of <a data-href="Pattern Matching" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Matching</a>, and is very similar to the previously discussed constraint satisfaction problems. We can view each conjunct as a constraint on the variables that it contains.
<br><a data-href="Rete Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Algorithm</a>: A pattern matching algorithm which preprocesses the set of rules in the KB to construct a <a data-href="Rete Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Network</a>—A graph data structure where each node is a literal from a rule premise. Variable bindings flow through the network and are filtered out when they fail to match a literal. If two literals in a rule share a variable, then the bindings from each literal are filtered through an equality node.
Rete networks are a key component to production systems and in cognitive architecture. Backward chaining over definite clauses works backwards from the goal, chaining through rules to find known facts that support the proof. Logic Programming: Programming paradigms based on formal logic systems. In logic programming, program statements express facts and rules about some problem domain, and computation is performed via logical inference. <br><a data-href="Prolog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Prolog</a> and <a data-href="Datalog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Datalog</a> are two common logic programming languages. <br>
<a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Here, we extend resolution to FOL. The first step to perform resolution is to convert the sentences in the KB into <a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a> (CNF). That is, a conjunction (AND) of clauses, where a clause is a disjunction (OR) of literals. In CNF, literals can contain variables, which are considered to be universally quantified. Every FOL sentence can be converted into an equivalent CNF sentence. To convert a sentence to CNF, you may have standardize variable names, that is, for sentences that use the same variable name twice, you must change one of them.
<br>You also may have to Skolemize a sentence. That is, eliminating existentially quantified variables with a <a data-href="Skolem Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Function</a>. These are functions which take as arguments all the universally quantified variables in scope of the existential quantifier. For example: Where is a Skolem function. The resolution rule for first-order clauses is a lifted version of the propositional rule discussed earlier. Two clauses, which are assumed to be standardized apart, can be resolved if they contain complementary literals. This is called the binary resolution rule, because it resolves two literals, and it isn't a complete inference procedure by itself. The full resolution rule resolves subsets of literals in each unifiable clause.
Another approach is first-order factoring, which reduces two literals to one if they are unifiable. The unifier must be applied to the entire clause. This combined with binary resolution is complete. Resolution is refutation-complete, meaning, that if a set of sentences is unsatisfiable, then resolution will always be able to derive a contradiction. Ground Resolution Theorem: States that propositional resolution is complete for ground sentences. <br>
<a data-href="Herbrand Universe" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand Universe</a>: If is a set of clauses, then the Herbrand universe of , denoted , is the set of all ground terms constructible from the function symbols in , and the constant symbols in ; if none, then a default constant symbol, . Saturation: If is a set of clauses and is a set of ground terms, then , the saturation of with respect to , is the set of all ground clauses obtained by applying all possible consistent substitutions of ground terms in for variables in .
Herbrand Base: The saturation of a set of clauses with respect to it's Herbrand universe is called the Herbrand base of , denoted <br><a data-href="Herbrand's Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand's Theorem</a>: If a set of clauses is unsatisfiable, then there exists a finite subset of that is also unsatisfiable. <br>
<a data-href="Equational Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Equational Unification</a>: The process of finding a substitution for variables in a set of equations that makes the equations become identical. Strategies for finding proofs by resolution efficiently include: <br>Unit Preference: Preferring resolutions where one of the sentences is a single literal, called a unit clause. This is complete for <a data-tooltip-position="top" aria-label="Horn Clause" data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clauses</a>.
Set of Support: Insisting that every resolution step involves at least one element from the set of clauses called the set of support.
Input Resolution: Every resolution combines one of the input sentences with some other sentence.
Subsumption: Eliminates all sentences that are subsumed (more specific than) an existing sentence in the KB.
<br>Learning: Training a <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a> model to learn from experience. <br>
Ontological Engineering: The process of developing, analyzing, and managing <a data-tooltip-position="top" aria-label="Ontology" data-href="Ontology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ontologies</a>. <br>Ontology: A framework which defines concepts, classes, and relationships within a specific domain. Classes and objects can be thought of in the same way of <a data-href="Object-Oriented Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Object-Oriented Programming</a>, where a class is a type of entity that is described by properties, an object is an instantiation of a class, and classes can have relationships via mechanisms like inheritance. Subcategories inherit properties from their superclass. Subclass relations organize categories into taxonomic hierarchies.
Taxonomy: A hierarchical classification of entities into categories.
Interaction with the world takes place with objects, while most reasoning happens at the level of categories. Categories also serve to make predictions about objects. The general framework of concepts is called an upper ontology.
General-Purpose Ontology: An ontology that should be applicable in any special-purpose domain, with the addition of domain-specific knowledge.
Special-Purpose Ontology: An ontology engineered for a particular domain. <br>
We will use <a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="12" to="29" origin-text="first-order logic" class="internal-link virtual-link-a">first-order logic</a> (FOL) to represent knowledge in this chapter, although FOL has some representational limitations. The main difficulty being that in the real-world, most generalizations have exceptions or only hold to a degree. We can represent categories in FOL as predicates or objects. For example, can say that object belongs to the class.
We can also define an object called , and use to say the same thing.
We can define properties of a class by saying . Exhaustive Decomposition: The process of breaking sets into subsets, such that all elements belong to a subset. If an exhaustive decomposition is made up of disjoint sets, it is called a partition. Categories are disjoint if they have no members in common. We'll use the relation to say that one thing is a part of another. This allows us to group objects into hierarchies. <br>The relation is <a data-tooltip-position="top" aria-label="Transitive Property" data-href="Transitive Property" href="https://emujakic.github.io/TechKB/notes/math/transitive-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">transitive</a> and <a data-tooltip-position="top" aria-label="Reflective Property" data-href="Reflective Property" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">reflective</a>. The world can be seen as composed of primitive objects, of which, composite objects are made of. Categories of composite objects are often characterized by structural relations among parts.
A bunch is a collection of objects that are grouped together based on certain criteria and can be considered as a composite object. Logical Minimization: Defining an object in its most efficient form, while preserving its original definition. Measures are the values assigned to properties like height or mass. Quantitative measures are represented by numerical values, and thus, are easy to represent.
<br><a data-tooltip-position="top" aria-label="Ordinal Data" data-href="Ordinal Data" href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Ordinal</a> measures are measures that have a meaningful order among values, though may not have a consistent magnitude between values. For example, the <a href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" target="_self" rel="noopener noreferrer" from="133" to="140" origin-text="ordinal" class="internal-link virtual-link-a">ordinal</a> measure may have values . These values have a clear order among them, though the difference between and may not be the same as the difference between and . <br>These sorts of <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">monotonic</a> relationships among measures form the basis of a subfield of AI known as qualitative physics. Some categories have strict definitions, like that of a square or a circle. Most categories in the real-world are natural kind categories, which have no clear-cut definition. This presents a challenge for logical agents, as they must identify atypical objects as still belonging to the same category. For instance, an agent should categorize a three-wheeled car as a car, even though most cars have four wheels. Intrinsic properties belong to the substance of the object itself and is independent of external conditions or quantity. For example, the boiling point of an object is intrinsic. Extrinsic properties are properties which depend on external factors or quantity. For example, weight or volume is an extrinsic property, since it changes with quantity. Count nouns are nouns whose quantities are described by a discrete number of individual entities. For example, books are a count noun. Categories described only by intrinsic properties are count nouns. Mass nouns are objects whose quantity is described by continuous measures. For example, water is a mass noun typically quantified using measures like fluid mass. Categories described by any extrinsic properties is a mass noun. Event: Actions or occurrences that can change the state of the world. Fluents are properties or conditions that are subject to change as a result of events. <br>
<a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a>: A formalism used to reason about propositions and how they change over time. Temporal representation uses time points to describe when events happen and how they relate to each other. We assume a first time point , which describe the initial state and what fluents are true at start time. Event calculus is a mathematical formalism used to reason about events and their effects. The set of predicates of event calculus are: : Fluent is true at all time between and .
: Event starts at time and ends at time .
: Event causes fluent to become true at time .
: Event causes fluent to become false at time .
: Fluent becomes true at some time between and .
: Time comes before time . We'll consider two types of time intervals: Moments, which have zero duration; and extended intervals, which have a duration greater than zero.
To establish a time scale, we first select an arbitrary moment as time 0, from which we can associate subsequent points to create absolute time points. A widely used time point is epoch time, also known as Unix time, which began on January 1, 1970, at zero seconds. This system is commonly utilized in digital environments for timekeeping and time-stamping. Physical objects can be described as generalized events, in the sense that objects are pieces of space-time. We can describe the properties of objects using state fluents, such as . Propositional Attitudes: Mental states that involve a relation between an agent and a proposition. Some examples include , or . These attitudes do not behave like normal predicates. Unlike normal predicates, which are referentially transparent, propositional attitudes are referentially opaque. Referential Transparency: An object if referentially transparent if the term used to refer to it does not matter. For example, if two terms, and both refer to the same object, referring to one term is the same as referring to the other.
Referential Opacity: An object is referentially opaque if the term used to refer to it does matter. For example, referring to is different from referring to because the agent may not know that these terms are co-referential. <br><a data-href="Modal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modal Logic</a> is designed to address this issue. Regular logic is centered around the modality of truth, while modal logic includes special modal operators that take sentences (rather than arguments) as terms. For example, ' knows ' is represented as where is the modal operator for knowledge. Otherwise, the syntax is the same as first-order logic, though the semantics are more complicated.
In modal logic, we need a model which consists of the collection of possible worlds rather than just the one true world. The worlds are connected via accessibility relations, one relation for each modal operator. A world is accessible from with respect to the modal operator if everything in is consistent with what knows in .
For example, Austin is the capital of Texas, but for an agent who doesn't know that, the possible world where Houston is the capital is accessible. A knowledge atom is true in world if is true in every world accessible from . The truth of complex sentences in derived with recursive application of this rule, along with the standard rules of FOL. Description Logics: A class of formal languages used to reason about the knowledge of a domain through structured concepts, roles, and instances. The main inference tasks for description logics are: Subsumption: Checking if a category is a subset of another.
Classification: Checking whether an object belongs to a particular category. Semantic Networks: A graph structure where nodes are objects or events, and edges are relationships between nodes. This notation makes it easy to perform inheritance reasoning. For example, a directed edge from the node to the node represents a hierarchical relationship saying that the cat is a pet.
Negation, disjunction, conjunction, nested functions, and existential quantification are all missing from this semantic network. Procedural attachment can be used to increase the expressive power of semantic networks. Procedural Attachment: A technique where a query about, or an assertion of a certain relation results in a call to a special procedure designed for that relation rather than a general inference algorithm. Semantic networks allow for default values for categories via an inheritance algorithm, these defaults can be overridden by a more specific value. <br>
<a data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonicity</a>: A property of logical systems which says that the addition of new information cannot invalidate previously established truths. Circumscription: A method in non-monotonic logics in which certain predicates are assumed to be false, unless they are explicitly mentioned to be true. For example, in the formula , can be circumscribed, and is assumed unless stated otherwise.
Circumscription is a form of model-preference logic, where models with the least abnormal objects are preferred. Default Logic is a non-monotonic formalism which allows for default rules to be defined. For example, the formula means that if is true, and if is consistent with the KB, then is concluded by default.
The extension of a default theory consists of the original known facts, as well as all default conclusions that can be drawn from the default rules in the KB. Belief revision is the process of retracting inferences in the face of new information. If a KB contains a sentence , and we want to perform , we'd have to first perform in order to prevent a contradiction. Additionally, if other sentences are necessarily derived from , then those sentences will have to be retracted as well. Truth maintenance systems (TMSs) were designed to handle belief revision. Justification-based TMS annotates each sentence in the KB with the set of sentences which justify it, that is, the set of sentences from which the sentence was inferred. JTSMs typically assume that retracted sentences may be reconsidered, and therefore saves the sentence and it's derivations. An assumption-based TMS keeps track, for each sentence that has ever been considered, which assumptions would cause the sentence to be true. Classical Planning: The task of finding a sequence of actions which constitute a solution in a discrete, static, deterministic, fully-observable environment. <br>
<a data-href="Planning Domain Definition Language" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Planning Domain Definition Language</a> (PDDL): A family of languages in a factored representation that provide a standardized way to express all actions with a single action schema, and does not need domain-specific knowledge. In PDDL, states are represented as conjunctions (AND) of ground atomic fluents. Ground meaning no variables.
<br>PDDL uses <a data-href="Database Semantics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Semantics</a>, that is, it assumes both the closed-world assumption and the unique names assumption.
There are no universal or existential quantifiers in PDDL. Action Schema: A representation of an action as a family of ground actions. A schema consists of the action name, a list of all variables used in the schema, a precondition, and an effect. For example: A ground action is applicable in state if entails the precondition of . The result of action in state is state which is the set of fluents formed by starting with , removing the negated fluents in the effect of action , and adding the positive fluents. A planning domain is a set of action schemas, and a problem within a domain is defined with the addition of an initial state and a goal. The states in the search state space are ground states, and the applicable actions in a state are the grounded instantiations of the action schema. The applicable actions are determined by unifying the current state against the preconditions of each action schema. If the unification returns a possible substitution, then that substitution is applied to create a ground action. There may be multiple possible substitutions.
A strong heuristic is needed to improve the worst case time complexity of , where is the number of actions per state, and is the number of steps in the solution. In backward search, at each step we consider an action which unifies with one of the goal literals, but with no effect which negates a goal literal. For most problem domains, backward search keeps the branching factor lower than forward search, though it is harder to come up with good heuristics. <br>
SAT Based Planners: Translate a PDDL problem description into <a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a> by propositionalizing the goals and actions, adding simultaneous exclusion axioms, adding precondition axioms, defining the initial state, and adding successor state axioms. Partial-order planning is a planning approach as a graph rather than a linear sequence. In the graph, each node is an action, and directed edges represent that the predecessor action establishes the precondition of the successor action. Planning using a factored-representation (representing states as a set of variables with values) makes it possible to define domain-independent heuristics. Admissible heuristics can be derived by relaxing the original problem, and using the cost of a solution for the relaxed problem from a given state as the heuristic value. Problems can be relaxed by either adding more edges, or abstracting nodes together.
The 'Ignore-Preconditions' heuristic, for example, drops all preconditions from actions, thus, adding more edges.
The 'Ignore-Delete Lists' heuristic removes all negative literals from action schema effects, thus, allowing monotonic progress towards the goal.
State abstractions are a one-to-many mapping of ground states to abstract states. The simplest way to abstract states is to ignore some fluents. Forward pruning prunes promising actions, with the risk of potentially pruning the optimal solution. A preferred action may be defined by defining a relaxed problem, and solving it to get the relaxed plan. Then, a preferred action can be a step of the relaxed plan, or an action which achieves a precondition of the relaxed plan. A problem has serializable subgoals if there exists an order of subgoals that a planner can solve in that order without having to undo any of the previous subgoals. This is not necessarily an optimal plan. The subgoal independence assumption assumes that the cost of solving a conjunction (AND) of subgoals is the sum of the cost of solving each subgoal independently. Hierarchical Decomposition: The process of decomposing a complex problem into smaller components organized in a hierarchy. In a hierarchical task network, there is a set of actions called primitive actions, with a standard precondition effect schema. Higher level actions (HLA) have one or more possible refinements, into a sequence of actions, each of which may be a primitive action or another HLA.
If an HLA refinement contains only primitives, it is called an implementation of the HLA. The reachable states of an HLA in state , is the set of all states reachable from for any of the HLAs implementations.
The reachable set of a sequence of HLAs is the union of all reachable states obtained by applying in each reachable state of , where is the th HLA in the sequence.
Given these two definitions, a high-level plan achieves the goal if its reachable set intersects the set of goal states. An implementation of a high-level plan is the concatenation of implementations of each HLA in the plan. Writing precondition-effect schemas for the HLAs themselves make it easier to prove that a high-level plan achieves the goal.
The downward refinement property says that every high-level plan that claims to achieve the goal must have an implementation that does so. Angelic semantics is a type of nondeterminism where the behavior of a system varies based on optimistic choices made by an agent or the environment. In many cases we can only approximate the effect of an HLA due to it having infinite implementations. An optimistic description approximation may overstate the reachable set, while a pessimistic description may understate the reachable set. To solve a partially-observable problem, an agent will have to reason about its percepts. The percepts will be supplied from the sensors when acting, but during planning it will need a model of its sensors. For planning, we augment PDDL with the percept schema, for example: In a fully-observable environment, we would have a percept schema with no preconditions for each fluent in the environment. In sensorless and partially-observable problems, we have to switch to an open-world assumption, where if a fluent doesn't appear, then its value is unknown. Given a belief state , the agent can consider any action whose preconditions are satisfied by . Then, the general formula for updating given an applicable action in a deterministic environment is: Where is the physical transition model. This means that is simply the set of states , where each is the action applied to all states in the belief state . To construct , we must consider what happens to each literal in each physical state in when action is applied. For literals whose truth value is known in , the value in is computed by the add/delete list of action . If the literal's value is unknown, there are three options: If the action adds , then the fluent will be true in .
If the action removes , then it will be false in .
If the action doesn't change , then it'll remain unknown. The family of belief states is defined as a conjunction (AND) of literals is closed under updates defined by PDDL action schemas. If the belief state starts as a conjunction of literals, then any update will also yield a conjunction of literals. This is only true for action schemas with the same effect for all states that satisfy their precondition. Alternatively, a conditional effect can have different outcomes based on the state in which the action is applied. The syntax for a conditional effect is . When applied to a belief state , a conditional effect makes it so that is no longer in 1-CNF form, thus, introducing dependencies among fluents and increasing the complexity. Contingent planning is the generation of plans with conditional planning based on received percepts. Variables in these plans are typically assumed to be existentially quantified. Calculating the new belief state after an action and subsequent percept is done in 2 stages: The first step calculates the belief state after the action: Suppose that percept literals are received. If a percept has exactly one percept schema, , where is a conjunction (AND) of literals, then those literals can be put into the belief state alongside . If has multiple percept schemas, then we add the disjunction (OR) of the preconditions of each schema. This takes the belief state out of 1-CNF. Online planning involves interleaving action and planning. Replanning requires some form of execution monitoring to determine the need for a new plan. Replanning may be needed if the agent's model of the world is incorrect. The model for an action may have an inaccurate precondition or effect.
The model may lack provision for exogenous events, that is, events that originate from outside the system. Online agents have a choice of at least 3 different approaches to execution monitoring: Action Monitoring: Before performing an action, the agent verifies that all preconditions for that action still hold.
Plan Monitoring: Before performing an action, the agent verifies that the current plan still leads to a goal.
Goal Monitoring: Before performing an action, the agent checks to see if there is a better set of goals it could try to achieve. Scheduling refers to when and how long an action occurs. Resource constraints refer to when an agent has a limitation on the type or amount of resources required to perform a task. Job-Shop Scheduling Problem: A problem which consists of a set of jobs, each of which require a sequence of actions with ordering constraints among them. Each action has a duration and a set of resource constraints required by the action. A constraint specifies the type of resource, the quantity required, and whether it's reusable.
Actions can also produce resources.
A solution to a job-shop scheduling problem specifies start times for each action, and must satisfy all the temporal ordering and resource constraints.
The quality of a solution can be quantified using the makespan cost function, which is the total duration of the plan.
Aggregation groups identical objects together and is essential for reducing complexity. For example, a resource can be represented as instead of . To minimize makespan, we must find the earliest start time for all actions consistent with the ordering constraints. The ordering constraints can be represented as a directed graph. <br>The <a data-href="Critical Path Method" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Critical Path Method</a> (CPM) can be applied to this graph to determine the possible start times to the actions. A path through a graph representing a partial-order plan is a linearly ordered sequence of actions. The critical path is the path whose total duration is longest.
Actions that are off the critical path have a window of time in which they can be executed. ES is the earliest start time, while LS is the latest start time. The quantity LS-ES is known as the slack of an action. If an action has 0 slack, it is a critical task.
Together, the LS and ES times for all actions constitutes a solution for the problem. The minimum slack heuristic, on each iteration, schedules for the earliest possible start time, the unscheduled action which has all its predecessors scheduled and has the least slack. Uncertainty in an environment may be due to partial-observability or non-determinism. <br>
<a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>: The set of all states that the agent could possibly be in currently. Trying to use pure logic in sufficiently complex domains tends to fail due to either: Laziness: It is too much work to list the complete set of antecedents and consequents needed to form an exception-less rule.
Theoretical Ignorance: There is no complete theory for the domain.
Practical Ignorance: It is impractical to gather all the necessary information. <br>
This means that the agent's knowledge can, at best, a degree of belief in the relevant sentences. Degrees of belief are a value between 0 (impossibility) and 1 (certainty). Our main tool for dealing with degrees of belief is <a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> theory. The ontological commitments of probability theory and logic are identical: the world is made up of propositions, that is, sentences that are either true or false.
The epistemological commitments differ significantly. A logical agent believes a fact to be either true, false, or it holds no opinion. A probabilistic agent, on the other hand, assigns a numerical degree of belief to a fact. An outcome is a completely specified state, where all variables are assigned a value. An agent must have preferences among the different possible outcomes. <br><a data-href="Utility Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Theory</a> is used to represent and reason with preferences quantitively. <br>
Preferences, as expressed by utilities, combined with <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="54" to="67" origin-text="probabilities" class="internal-link virtual-link-a">probabilities</a> form the general theory for rational decision-making called <a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a>. The fundamental idea of decision theory is that an agent is rational if it chooses the action which yields the highest expected utility. This is called the principle of maximum expected utility.
A decision-theoretic agent's belief state represents the probabilities of world states alongside the possibilities. A possible world is a complete assignment of values to variables. The set of all possible worlds, , is called the sample space. The possible worlds, , are mutually-exclusive, meaning only one world can be true at a time; and exhaustive, meaning there is always a world that is true at any time. <br>A complete probability model specifies a probability for each possible world, denoted . The total probability for a sample space is 1. This is<a data-tooltip-position="top" aria-label="Kolmogorov's Axioms" data-href="Kolmogorov's Axioms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Kolmogorov's normalization axiom</a>. Events are subsets of the sample space. In logic, a set of worlds corresponds to a proposition.
Variables in probability theory are called random variables and their names begin with uppercase letters, while the values of variables begin with lowercase letters.
A probability distribution is a mathematical function which describes the likelihood of different outcomes for the domain of a random variable. The probability of each outcome is between 0 and 1 (inclusive), and the sum of probabilities of each outcome must sum to 1. <br>Discrete probability distributions describe the probability of each possible value in the domain of a discrete random variable and are described by a <a data-href="Probability Mass Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a>.
<br>Continuous probability distributions describe the probability of a continuous random variable. These distributions are characterized by a <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a> (PDF). The probability of a proposition is defined as the sum of the probabilities of the worlds in which it holds: Unconditional probabilities, also called priors, refer to the degree of belief in a proposition, in the absence of any other information. Though, most of the time, we have some other information called evidence, which allows us to calculate conditional probability. Conditional, or posterior probabilities quantify the likelihood of one event occurring, given that another has already occurred. This is denoted as , read as 'the probability of given ' and is defined as: The product rule states that . Joint probability refers to the likelihood of two or more events occurring simultaneously. The joint probability denotes the likelihood of all combinations of the values of the variables. This results in a table of probabilities called the joint probability distribution.
- A probability model is completely determined by the joint probability for all the random variables, this is called the full joint probability distribution. Probabilistic inference the computation of posterior probabilities for query propositions given evidence. We use the full joint distribution as the knowledge base for a probabilistic agent. Marginal probability is the likelihood of an outcome occurring irrespective of the outcome of other events. It is defined as the sum of joint probabilities of the event with all possible outcomes of other events. It is defined as: ; this process is called marginalization.
Using the product rule, we can replace with , obtaining a rule called conditioning. <br>
The denominator of a conditional probability can be viewed as a <a data-href="Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Normalization</a> constant for the distribution , ensuring that it sums to 1. We can use to denote such constants. Therefore: This means we can calculate without knowing the prior probability . A general probabilistic inference procedure can be defined as follows: We begin with the case where the query involves a single variable . Let denote the set of evidence variables who have values . Let denote the remaining unobserved variables. The query can be evaluated as: Where the summation is over all the possible combinations of values for the unobserved variables .
Given the full-joint distribution, this equation can answer probabilistic queries for discrete variables, though it scales poorly. For a domain described by boolean variables, it requires an input table of size and takes time to process. For this reason, the full-joint distribution in tabular form is rarely used in practice for building reasoning systems. Two events are said to be independent if the occurrence of one does not affect the probability of the occurrence of the other. Mathematically: Independence assertions are typically based on knowledge of the domain. If the complete set of variables can be divided into independent subsets, the full-joint distribution can be factored into separate joint distributions on those subsets. <br>
<a data-href="Bayes' Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayes' Theorem</a> states that: One can avoid calculating the prior probability of the evidence by instead computing a posterior (conditional) probability for each value of the query variable () and then normalizing the results. Bayes' theorem is useful for answering queries with one evidence variable, though it is no better than the full-joint distribution for variables. Conditional Independence: Describes a situation where two random variables are independent of each other with respect to a third variable: separates and because it is a direct cause of both of them.
For variables that are all conditionally independent given , the size of the representation grows as opposed to . The full-joint distribution of the pattern where a single cause directly influences a number of effects, all of which are conditionally independent given the cause is defined as: <br>This distribution is called the <a data-href="Naive Bayes Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Naive Bayes Model</a>. It is naive because it assumes that features are independent of each other.
To obtain the probability of the cause given some observed effects , with denoting the unobserved variables, the standard inference method from the joint distribution can be used: This means that for each possible cause, multiply the prior probability of the cause by the product of the conditional probabilities of the observed effects given the cause, then normalize the result.
The runtime of this calculation is linear in the number of observed effects and does not depend on the number of unobserved effects. <br>
<a data-href="Bayesian Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayesian Network</a>: A <a data-tooltip-position="top" aria-label="Directed Acyclic Graph" data-href="Directed Acyclic Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">directed, acyclic graphical model</a> which represents variables and their conditional dependencies. Nodes denote variables, and directed edges represent probabilistic dependencies. Bayesian networks can represent any full joint <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="192" to="203" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution, and can often do so very concisely. If there is an edge from to , then has a direct influence on and is said to be a parent of . This suggests that causes should be the parents of effects. Often, domain experts decide the topology of the graph. The conditional independence of two variables is indicated by the absence of a link between them.
Each node has associated probability information which quantifies the effect of the parents on the node using a finite number of parameters. A node is a hidden variable if it is neither an input nor output node.
Once the topology of the graph is laid out, we only need to specify the local probability information for each variable, in the form of a conditional distribution given its parents. The local probability information for a node takes the form of a conditional probability table (if the variable is discrete). Conditional Probability Table (CPT): A table where each row gives the conditional probability for each possible value of a node for a conditioning case. Each row must sum to 1. A conditioning case is a possible combination of values for the parent nodes.
A Boolean variable with parents has rows in its CPT. For Boolean variables, if we know the probability of true is , then the probability of false must be , therefore, we often omit the 2nd number in the CPT.
A node with no parents has 1 row which represents the prior probabilities of the node. Assume a Bayes net containing variables, . A general entry in the joint distribution is . The semantics of a Bayesian network defines each entry in the joint distribution as: Therefore, each entry in the joint distribution is the product of the appropriate elements of the local conditional distributions in the Bayes net. If a Bayes net is a representation of the full joint distribution, then it can also be used to answer any query, by summing all the relevant joint probability values, each calculated as the product of probabilities from the local conditional distributions. We can prove that the parameters are exactly the conditional probabilities . The conditional probabilities can be computed from the joint distribution as: Where represents the values of all variables other than and its parents. This allows us to rewrite the previous equation as: This equation implies certain conditional independence relationships which will be used later to guide the construction of the network topology. To construct a Bayes net, we first rewrite the entries in the joint distribution in terms of conditional probability using the product rule: Then we repeat this process, reducing each joint probability to a conditional probability and a joint probability on a smaller set of variables. We then end up with one big product called the chain rule: Therefore, according to the previous equation, for every variable in the network: <br>
Provided that . This condition is satisfied by the numbering of nodes in <a data-href="Topological Order" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Topological Order</a>, that is, any order consistent with the directed graph structure. This equation says that the Bayesian network is a correct representation of the domain only if each node is conditionally independent of its other predecessors in the node ordering, given its parents. We satisfy this condition with this methodology: Nodes: Determine the set of variables required to model the domain. Then, order them such that causes precede effects.
Links: For each node: Choose a minimal set of parents for from , such that equation 13.3 is satisfied. These should be all the nodes that directly influence .
For each parent, insert a link from the parent to .
Write the conditional probability table, . Because each node is connected only to earlier nodes, the graph is necessarily acyclic. Bayes nets also contain no redundant probabilities, since the only parent nodes are the ones which have a direct influence on the child. This makes it impossible to create a Bayesian network that violates the axioms of probability. Because Bayesian networks are sparse systems, they are much more compact than the full joint distribution. In a sparse (locally structured) system, each sub-component interacts directly with only a bounded number of other components. This is usually associated with linear complexity. Even in a locally structured domain, the Bayesian network will only be compact if the nodes are well-ordered. If we stick to a causal model, that is, models where we focus on casual rules instead of diagnostic rules, the resulting Bayes net is often more compact. Specifying the conditional probability tables for a fully connected network, where each variable has all its predecessors as parents, is just as complex as specifying the full joint distribution. For this reason, we often omit links even if a slight dependency does exist. The non-descendants property states that each variable is conditionally independent of its non-descendants, given its parents. The non-descendants property, in conjunction with the interpretation of the network parameters as conditional probabilities suffices to reconstruct the full joint distribution defined in equation 13.2.
Therefore, the semantics of the Bayes net can be viewed as defining a set of conditional independence properties, from which the full joint distribution can be derived from.
Another independence property implied by the non-descendants property is that: <br>A variable is conditionally independent of all other nodes in the network, given its <a data-href="Markov Blanket" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Blanket</a>. A node's Markov blanked is its parents, children, and children's parents. <br>
A more general conditional independence question is whether a set of nodes is conditionally independent of another set , given a set . To determine whether <a data-tooltip-position="top" aria-label="D-Separation" data-href="D-Separation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">D-separates</a> and : Consider just the ancestral subgraph consisting of , and their ancestors.
Add links between any unlinked pair of nodes that share a child. This results in the so-called moral graph.
Replace all directed links with undirected links.
If blocks all paths between and in the resulting graph, then d-separates and , therefore, is conditionally independent , given . Otherwise, the original Bayes net does not require conditional independence. Note that a node's Markov blanked d-separates it from all other variables. Relationships between parents and children are usually describable by a canonical distribution that fits some standard pattern. In such cases, the complete table can be specified just by naming the pattern and perhaps supplying a few parameters. Many Bayes net systems allow users to specify deterministic function using a general-purpose programming language. Context-Specific Independence (CSI): A conditional distribution exhibits CSI if a variable is conditionally independent of some of its parents given certain values of others. Bayes nets often implement CSI using if-then-else statements. <br>
<a data-tooltip-position="top" aria-label="Noise-based Logic" data-href="Noise-based Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Noisy logical relationships</a> allow for uncertainty or randomness when defining logical connections. The noisy-OR model allows for uncertainty about the ability of each parent to cause the child to be true. The model makes two assumptions: It assumes that the possible causes listed are exhaustive, if some are missing, a leak-node can be added that covers unmentioned causes.
It assumes that inhibition of each parent is independent of inhibition of any other parents. Given these assumptions, the child is false iff (if and only if) all of its true parents are inhibited. The probability of this is simply the product of the inhibition probabilities for each parent. <br>
Continuous variables have an infinite number of values, so providing explicit probabilities for each value is impossible. Continuous variables can be handled by discretization, or using one of the standard families for probability density functions, such as a <a data-href="Gaussian Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gaussian Distribution</a>. <br><a data-href="Discretization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Discretization</a>: The process of dividing up the possible values of a continuous variable into a fixed set of intervals. Hybrid Bayesian Network: A Bayesian network with both continuous and discrete variables. To specify a hybrid network we have to specify the conditional distribution for a discrete variable given continuous parents, and the conditional distribution for a continuous variable given discrete or continuous parents. <br>
To handle continuous children with continuous parents, we specify how the distribution over the child depends on the continuous value of the parent. In other words, we specify the parameters of the child distribution as a function of the parent. A common choice is a linear-Gaussian conditional distribution, where the child has a Gaussian distribution whose <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="77" to="81" origin-text="mean" class="internal-link virtual-link-a">mean</a> varies linearly with the value of the parent and whose <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="56" to="74" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a> is fixed. The linear-Gaussian distribution takes the values of the child's other parents as parameters.
<br>A network containing only continuous variables with linear-Gaussian distributions has a joint distribution that is a <a data-href="Multivariate Gaussian Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Multivariate Gaussian Distribution</a> over all the variables. <br>
To handle the distribution of discrete children with continuous parents we can use parameterized models like the <a data-href="Probit Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probit Model</a>, <a data-href="Logistic Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logistic Function</a>, or a <a data-href="Threshold Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Threshold Function</a>. These models can be generalized to handle multiple continuous parents by taking a linear combination of the parent values. One way to make a soft threshold function is to use the integral of the standard Gaussian distribution: The basic task for any probabilistic inference system is to compute the posterior distribution for a set of query variables, given some evidence variables. will denote the query variable, will denote the set of evidence variables, will denote the value of an evidence variable, and will denote the hidden variables. A typical query is of the form . In the general case, it is intractable to calculate the exact posterior probabilities of the query variables. Some exact methods include: Enumeration: Computes the probability by summing terms from the full joint distribution, . Since a Bayes net gives a complete representation of the full joint distribution, a query can be answered by computing the sums of products of conditional probabilities from the network. The time complexity of this method is for a network with Boolean variables. <br>
<a data-href="Variable Elimination" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Variable Elimination</a>: Builds upon enumeration by using <a data-href="Dynamic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamic Programming</a> to store the results of calculations for later use. Variable elimination evaluates expressions such as equation 13.5 in right-to-left order. Intermediate results are stored and summations over each variable are done only for the portions of the expression which include that variable. The time complexity of exact inference on Bayesian networks depends strongly on the topology of the network. Networks where there is at most 1 undirected path between any two nodes are called singly connected or polytrees. Exact inference can be performed on these networks with time and space complexity linear in the size of the network.'
For multiply connected networks, variable elimination can have a exponential time and space complexity in the worst case. Approximate inference algorithms are useful for large networks where exact inference is impractical. We will focus on two families of sampling algorithms: direct sampling and Markov chain sampling. Direct Sampling: The basis of any sampling algorithm is the generation of samples from a known probability distribution. To sample from a Bayes net with no evidence variables, we sample each variable in turn, in topological order. The probability distribution from which a value is sampled is conditioned on the value sampled from the variable's parents. In any sampling algorithm, the values are computed by counting the samples generated. We expect these values to converge in the limit to the true probability. An estimate is consistent if it becomes exact in the large-sample limit. Rejection Sampling: A general method for producing samples from a hard-to-sample distribution given an easy-to-sample distribution. Rejection sampling generates samples from the prior distribution specified by the Bayes net, then, it rejects all samples that do not match the evidence. The estimate, is obtained by counting how often occurs in the remaining samples. The complexity of rejection sampling depends primarily on the fraction of samples that are accepted. This fraction is exactly equivalent to the prior probabilities of the evidence. Hence, for problems with many evidence variables, convergence is extremely slow. Importance Sampling: Estimates the effect of sampling from some distribution using samples from another distribution . We ensure that the answers are correct in the limit by applying a correction factor , known as the weight, to each sample when counting up the samples. Importance sampling allows us to sample from an easier distribution and apply the necessary conditions. Let the non-evidence variables be . The only technical requirement is that should not be zero for any where is nonzero.
<br>We want to pick a that is easy to sample from and is as close as possible to the true posterior . A common approach is <a data-href="Likelihood Weighting" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Likelihood Weighting</a>. The algorithm fixes the value for each evidence variable, and samples all the non-evidence variables in topological order, each conditioned on its parents. This guarantees that each sample is consistent with the evidence. Let the sampling distribution produced by this algorithm be .
In order to complete the algorithm, we need compute the weight for each sample generated. According to the general scheme for importance sampling, the weight should be: Where the normalizing factor is the same for all samples. Since and cover all the variables in the Bayes net, is just the product of all conditional probabilities. We can write this as the product of all the conditional probabilities for the non-evidence variables times the product of the conditional probabilities for the evidence variables: Thus, the weight is the product is simply the product of the conditional probabilities for the evidence variables given their parents. The weight is calculated iteratively, multiplying by the conditional probability each time an evidence variable is encountered. The normalization is done at the end. <br>
<a data-href="Markov Chain Monte Carlo" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Chain Monte Carlo</a>: Unlike the previous algorithms, which generate each new sample from scratch, MCMC algorithms generate samples by making a random change to a proceeding sample. A <a data-href="Markov Chain" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Chain</a> is a stochastic process that generates a sequence of states. <a data-href="Gibbs Sampling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gibbs Sampling</a> is a MCMC algorithm well-suited for Bayesian networks. We'll also discuss a more general <a data-href="Metropolis-Hastings" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Metropolis-Hastings</a> algorithm. Gibbs sampling starts with an arbitrary state with the evidence variables fixed at their observed values, and generates a new state by randomly sampling a value for one of the non-evidence variables . Since is independent of all other variables given its Markov blanked, Gibbs sampling for means sampling conditioned on the current values of the variables in its Markov blanket. The method of calculating the Markov blanket distribution , where denotes the values of the variables in 's Markov blanket, is given by: Therefore, for each value , the probability is given by the product of the probabilities from the CPTs of and its children. Metropolis-Hastings generates samples according to target probabilities . In the case of Bayesian networks, we want w. MH sampling has two stages in each iteration: Sample a new state from a proposal distribution , given the current state .
Probabilistically accept the new state according to the acceptance probability: If the proposal is rejected, the state remains at . The proposal distribution is responsible for proposing a next state . This could be defined as: With probability 0.90, perform Gibbs sampling to generate .
Else, generate using the Likelihood Weighting algorithm. This proposal distribution gets around the problem of Gibbs sampling get stuck in one part of the state space. Causal Networks are a restricted class of Bayesian networks that only permits causally compatible node orderings. This means that variables that are the causes of other variables should come first in the node ordering. Peter. R. Norvig, Artificial Intelligence: A Modern Approach, Global Edition. ]]></description><link>https://emujakic.github.io/TechKB/textbooks/artificial-intelligence-a-modern-approach-summary.html</link><guid isPermaLink="false">TEXTBOOKS/Artificial Intelligence A Modern Approach Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[AI A Modern Approach Summary]]></title><description><![CDATA[
Name: Stuart Russell and Peter Norvig
Edition: 4th Edition
AI: A Modern Approach by Norvig and Russel is a foundational text in the dynamic field of artificial intelligence. The book covers a wide <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="117" to="122" origin-text="range" class="internal-link virtual-link-a">range</a> of topics, from Markov models and evolutionary algorithms, to natural language processing. This summary attempts to break down the main ideas and insights from the book. The field of AI is concerned with the understanding, engineering, and implementation of intelligent agents. Intelligence can be defined through several perspectives: <br>Acting Humanly- The ability to pass a <a data-href="Turing Test" href="https://emujakic.github.io/TechKB/notes/ai/turing-test.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Turing Test</a>.
Thinking Humanly- Thinking like a human.
Thinking Rationally- Acting in such a way as to achieve the 'best' possible outcome.
Beneficial Machines- Acting in a way beneficial to humans. <br>
<a data-href="Utility" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility</a> is the subjective value of an outcome. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a> is a branch of logic made up of predicates that return either true or false, universal/existential quantifiers, terms, and logical connectives such as 'and' 'or' 'not'. <br>
<a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> extends logic to scenarios involving uncertainty, allowing for the modeling of real-world conditions where information is incomplete or ambiguous. <br>
<a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a> deals with the principles and methods for making rational decisions under uncertainty. <br>
<a data-href="Game Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game Theory</a> is a framework for analyzing interdependent multi-agent environments. <br>
<a data-href="Control Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Control Theory</a> is the design of systems that can automatically adjust their behavior to achieve desired outcomes. A cost function quantifies the cost of a particular action or sequence of actions. Something is 'stochastic' if it exhibits uncertainty. <br>
A <a data-href="Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Model</a> is a system where the following state depends only on the current state. A Markov Process is a stochastic process that satisfies the Markov Model. A <a data-href="Hidden Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hidden Markov Model</a> is a statistical model that represents systems that transition between different hidden states, while perceiving observable outputs. <br>
A <a data-href="Bayesian Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayesian Network</a> is a probabilistic model implemented as a directed acyclic graph that represents a set of <a data-tooltip-position="top" aria-label="Random Variable" data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variables</a> and their conditional dependencies, as well as a set of conditional <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="69" to="80" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution tables. <br>
<a data-href="Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent</a> - Anything that can perceive its environment with sensors and act upon it with actuators. <br>
<a data-href="Percept Sequence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percept Sequence</a> - Everything an agent has perceived. <br>
<a data-href="Agent Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent Function</a> - An abstract mathematical function that maps percept sequences to actions. Agent Program - A concrete implementation of some abstract agent function. Performance Measure - Evaluates the desirability of an outcome. Information Gathering - Performing potentially sub-optimal actions in order to perceive new information about the environment. Rationality maximizes expected performance based on the knowledge available. What is rational at a given time-step is based on the agent's performance measure, its available actions, its prior knowledge of the environment, as well as its percept sequence up until that time-step. <br>
<a data-href="Task Environment" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Task Environment</a> - The factors that determine how an agent operates. The task environment consists of the performance measure, sensors, actuators, and external environment. A task environment can be fully observable, meaning the agent's sensors give it complete knowledge about all relevant variables of the environment at all times. A Task environment is partially observable if the sensors provide a noisy or incomplete description of the actual state at any time step. A task environment is single agent if there is only one actor that influences the environment, else, it is a multi-agent environment. <br>
A task environment is deterministic if the next state is completely determined by the current state and the action taken. Otherwise, the environment is nondeterministic or stochastic. An environment is uncertain if there is uncertainty in either the <a data-href="Sensor Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Sensor Model</a> - which returns the perceived output of the current state, or if there is uncertainty in the <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a> - which returns the next state based on the current state and the action taken. Together the transition and sensor model allow the agent to keep track of the state of the world . A task environment is episodic if the sequence of states are divided into atomic episodes, that is, the next state (episode) does not depend on the actions from previous states. A task environment is sequential if actions at any given state can impact the actions taken in future states. A task environment is dynamic if it can change while the agent is deliberating, otherwise, the environment is static. If the environment itself doesn't change but the passage of time impacts the agent's performance measure, the environment is considered semi-dynamic. <br>
An environment is known if the outcomes (or <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a> of outcomes) of actions are given. Otherwise, the environment is unknown and the agent will have to learn the result of its actions. Discrete variables can take on distinct, separate values. <br>
Continuous variables can take on any value in a <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="28" to="33" origin-text="range" class="internal-link virtual-link-a">range</a>. Simple Reflex Agent - An agent that selects an action that selects based only on the current percept. Is susceptible to infinite loops in partially-observable environments which can be avoided if the agent selects actions with an element of randomization. Model-Based Reflex Agent - An agent which maintains an internal state which is constructed based on the percept history. The agent's internal state keeps track of the result of actions, as well as how the world evolves independent of itself. Goal-Based Agent - An agent that maintains a current state description as well as goal information which determines the desirability of a state or action. Though, goals treat all non-goal states with equal desirability which leads to poor performance. <br>
Utility-Based Agent - Instead of a goal, the agent has a <a data-href="Utility Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Function</a> which assigns a continuous value to a state or action, allowing the agent to act in such a way that maximizes its utility function. The utility function is simply and internalization of the agent's performance measure, in the case where all an agent's current actions lead to non-goal states, a utility-based agent will choose the action that leads to the "best" state, rather than treating each action as equal like a goal-based agent would. Utility also allows an agent to rationally deal with multiple goals by selecting the goal with the maximum utility. <br>
<a data-href="Learning Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Agent</a> - An agent that can learn and improve from experience or training. A learning agent can be any of the mentioned types. Learning agents typically consist of four main components: Learning Element - The element responsible for making improvements.
Performance Element - The element responsible for selecting external actions. The performance element is what we previously considered as the entire agent.
Critic - The element which provides feedback to the learning element on how well the agent is performing. Problem-solving agent: an agent that needs to plan, and consider a sequence of actions to reach a goal. Search: the computational process a problem-solving agent undertakes. <br>
An algorithm is informed if the agent can estimate its proximity to the goal using a <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a>. Otherwise, the algorithm is uninformed. A problem-solving agent: Formulates its goal
Devises a description of the states and actions needed to reach its goal.
Simulates a sequence of actions until it finds a solution.
Executes the solution, if one is found. An system is considered open-loop if it ignores its percepts while executing its solution. This is done so if the environment is known and deterministic, meaning the agent needs not to keep track of its percepts. <br>A system is closed-loop if it keeps track of its percepts during execution. The term closed loop is used to <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="85" to="89" origin-text="mean" class="internal-link virtual-link-a">mean</a> that the loop between the agent and its environment is not broken. A search problem is defined by the following five components: <br>The set of possible states (<a data-href="State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State Space</a>).
The initial state.
A set of one or more goals states.
The set of actions available to the agent.
<br>The <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a>, which describes the result of the agent taking a action in its current state. A sequence of actions forms a path within the state space, and a path is considered a solution if it reaches a goal state from the initial state. A solution is considered optimal if it has the lowest cost among all possible solutions. <br>
The state space can be represented as a <a data-href="Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Graph</a> where the vertices represent states, and edges represent actions which lead to other states. The diameter of a graph is the greatest distance between any 2 nodes. A state can be abstracted by removing as much detail as possible, while still retaining validity. <br>
<a data-href="Search Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Algorithm</a>: Takes a search problem and returns a solution or failure. There are four ways to evaluate the performance of a search algorithm: Completeness: Does the algorithm always find a solution if one exists?
Optimality: Does the algorithm find the optimal solution?
<br><a data-href="Time Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Time Complexity</a>: How does the search time scale as the size of the problem scales?
<br><a data-href="Space Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Space Complexity</a>: How does the memory usage scale as the size of the problem scales? In bounded suboptimal search we look for a solution within some constant factor of the optimal solution. In bounded-cost search we look for a solution whose cost is less than some constant. In unbounded-cost search we accept any solution and prioritize the speed of the algorithm. For a search algorithm to be complete in an infinite state space, it needs to systematically explore the space. <br>
<a data-href="Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Tree</a>: Describes the path between states. The root node represents the initial state, and the current node can be expanded by considering the actions available, then generating a new child node for each resulting state. <br>
Frontier: The collection of nodes that have been generated but not yet explored and is typically implemented as a <a data-href="Queue" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Queue</a> or a <a data-href="Stack" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stack</a>. The functions available on the frontier are: is-Empty, which checks if the frontier is empty.
pop, which returns and removes the first element.
top, which returns the first element but does not remove it.
add, which adds a new element to the end of the queue. A best-first search, also known as a greedy search, chooses the node with the lowest cost in the frontier. A node is made up of the following four components: The state that it represents.
Its parent node, which allows us to backtrack from a goal state back to the initial state.
The action which generated it.
Its total path cost from the root. An uninformed search algorithm is completely unaware of how far any state is from the goal. Uninformed algorithms are differ in the way that they expand nodes in the frontier. Some common uninformed search algorithms include: <br><a data-href="Breadth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Breadth-First Search</a>: Expands all the nodes in the current depth, starting at the root, before moving deeper into the tree. This search in implemented using a queue, which is a FIFO data structure. BFS is a systematic search, meaning, it is complete even in infinite state spaces.
BFS is cost optimal if the edges are unweighted or have a global constant weight.
The goal test may be early, meaning each node is checked to be a goal when it is first generated; or the goal test may be late, meaning each node is checked when it is popped from the queue.
The time and space complexity of BFS is where is the number of children and is the depth of the tree. <br><a data-href="Dijkstra's Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dijkstra's Algorithm</a>: is a greedy search algorithm that uses a late goal test to ensure optimality. It maintains a list of the shortest distances to each node from the root where, initially, the distance to the root is 0 and the distance to all other nodes is . The frontier is implemented as a priority queue, where the node with the smallest distance is expanded first. Then all the current node's neighbors are examined and if a shorter distance is found, the distance to the corresponding node is updated. This process is iterated until the optimal path is found. Dijkstra's is complete and optimal for weighted graphs with non-negative weights.
The time complexity of Dijkstra's is where is the number of vertices, and is the number of edges. The space complexity of Dijkstra's is . <br><a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a>: Expands the deepest node in the frontier. DFS uses a stack as opposed to a queue, which is a LIFO data structure. This algorithm is commonly implemented as a tree search, meaning, it doesn't keep track of the states that it has reached. DFS continues down a path until either a goal is found, or a leaf node is found. In the latter case, the algorithm backtracks to the next deepest node and expands its children if any. DFS is not cost-optimal. DFS is complete in finite state spaces though not in infinite state spaces.
The time complexity of DFS is and the space complexity is .
<br><a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a> is a variation of DFS where only one successor is generated at a time, and the current state description is updated in place, rather than allocating memory for a new state. <br><a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>: Treats nodes at depth as if they are leaf nodes. This prevents the node from traveling down an infinite path. <br>The time complexity of depth-limited search is where is the <a data-href="Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Branching Factor</a> and is the depth limit.
The diameter of the state space is a good limit value, though, it is rarely known beforehand. <br><a data-href="Iterative Deepening DFS" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening DFS</a>: A depth limited search which iteratively increments the depth limit until a solution is found or a failure is returned. This combines the benefits of depth first and breadth first search. Optimal for unweighted paths.
Complete for finite, acyclic state spaces.
Time complexity of <br><a data-href="Bidirectional Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bidirectional Search</a>: Searches forward from the initial state and backward from the goal state until the 2 meet. The goal test returns true when the two paths meet. Since 2 frontiers need to be tracked, the space requirements are higher than most of the previously discussed algorithms. An informed (heuristic) search algorithm uses a heuristic function to estimate the distance of any given node from the goal. A search is considered greedy if it expands the node with the lowest always. Greedy searches are complete on finite spaces, but not on infinite spaces.
<br><a data-href="A* Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">A* Search</a>: The evaluation function, , is the path cost from the current state to node plus . A* is complete and optimal if the heuristic is admissible or optimistic - meaning it never overestimates the cost to the goal.
A* prunes nodes that are unnecessary for finding a solution.
If we allow A* to use an inadmissible heuristic, there is a risk of finding a suboptimal solution, but the heuristic may be more accurate, thus, reducing the number of expanded nodes.
A variant of A, called **weighted A search** emphasizes the heuristic by multiplying by some constant . Weighted A finds a solution somewhere between and . A heuristic is consistent if for every node , its successor : , where represents the cost from to .
<br>This means that the cost of reaching the goal from node is never greater than the cost of getting to from , plus the estimated cost of reaching the goal from . This is a version of the <a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>.
Every consistent heuristic is admissible, but not every admissible heuristic is consistent.
A composite heuristic combines multiple heuristics, and for certain complex problems, can be more effective than a single heuristic. A node is surely expanded if it can be reached from the initial state on a path where every node has , where is the optimal cost.
<br><a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>: Keeps track of only the nodes with the best f-scores. Is incomplete and suboptimal, but very fast and memory efficient. <br><a data-href="Iterative Deepening A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening A*</a>: Combines the advantages of A* and iterative deepening DFS, where, at each iteration, the cutoff values is the smallest f-score of any node that exceeds the cutoff of the previous iteration. The initial cutoff is the heuristic value of the root node. <br>Can be visualized using <a data-href="Search Contours" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Contours</a>. <br><a data-href="Recursive Best-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive Best-First Search</a>: Uses a f-limit variable to keep track of the f-value of the best alternative path from any ancestor of the current node. If the current node exceeds that f-limit, the recursion unwinds to the alternative path. Is optimal if the heuristic is admissible. Both RBFS and IDA use too little* memory, meaning they forget most of what they've done.
<br><a data-href="Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Memory-Bounded A*</a>: And <a data-href="Simplified Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simplified Memory-Bounded A*</a> uses all the memory that is allocated to it. SMA proceeds like A, expanding the node with the best f-score until memory is full. In that case, it drops the node with the highest f-score and passes its value to the parent, similar to RBFS. If all nodes have the same f-score, the oldest node is deleted and the newest is expanded.
Is complete and optimal if the optimal solution can fit in memory. <br>
One way to analyze the quality of a heuristic is the <a data-href="Effective Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Effective Branching Factor</a> . <br>If is the total number of nodes generated by A and the solution depth is , $b^$ is the branching factor a <a data-href="Uniform Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Uniform Tree</a> of depth must have to contain nodes. A well-designed heuristic should have a branching factor close to 1. <br>
<a data-href="Relaxed Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Relaxed Problems</a>: problems with fewer restrictions on available actions. For example, allowing illegal moves in the <a data-href="N-Queens Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">N-Queens Problem</a>. The cost of an optimal solution in a relaxed problem is an admissible and consistent heuristic for the original problem.
Admissible heuristics can also be derived from subproblems of the original problem where the optimal cost in the subproblem is a lower bound on the cost of the complete problem. <br>
<a data-href="Pattern Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Database</a>: Stores the exact solution costs for possible subproblem instances. Commonly used to store <a data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebase</a>s for an AI <a href="https://emujakic.github.io/TechKB/projects/ai-chess-robot/chess-engine.html" target="_self" rel="noopener noreferrer" from="12" to="24" origin-text="chess engine" class="internal-link virtual-link-a">chess engine</a>, for example. When searching for a solution, the agent can use the pattern database to quickly estimate the cost for a given state.
Disjoint pattern databases ignore rather than abstract the rest of the problem. Pre-computation stores the optimal path between pairs of vertices. Landmark points can be precomputed and used as an efficient but inadmissible heuristic. <br>
<a data-href="Metalevel State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Metalevel State Space</a>: Allows an agent to reason about its own reasoning process by evaluating potential strategies and their outcomes. Metalevel state spaces allow an agent to learn from experience and dynamically adjust their strategy based on observed output. Local search algorithms search the state space without keeping track of a path or previously reached states. These algorithms are not systematic, though they use very little memory, and usually have constant space complexity.
Local search is good for problems where only the final state is desired and not so much the path to get there. The most common application of local search is solving optimization problems, where the goal is to find the best state according to some objective function. Consider the states of a problem laid out in a state-space landscape—a line chart where each state has an elevation defined by the objective function. <br>If the goal is to find the highest peak, then the problem is called <a data-href="Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hill Climbing</a>.
<br>If the goal is to find the lowest valley, the problem is called <a data-href="Gradient Descent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient Descent</a>. Hill Climbing: An optimization algorithm which keeps track of the current state, and on each iteration, moves to the neighboring state which provides the steepest ascent, that is, it moves uphill. Hill climbing terminates when it reaches a peak, or local maximum, a point where no neighboring state has a higher value.
Since it doesn't look ahead past it's immediate neighbors, nor does it consider more than the next move, hill climbing is considered a greedy local search.
Hill climbing is also susceptible to plateaus, a flat region of the state space landscape. A plateau is a shoulder if it immediately neighbors a better state. <br>
<a data-href="Stochastic Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stochastic Hill Climbing</a>: Chooses randomly from the set of available uphill moves. Typically, the <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probability</a> of a move being selected is linear to the steepness of the move. <br>
<a data-href="First-Choice Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Choice Hill Climbing</a>: Randomly generates successors until a state better than the current one is generated. <br>
<a data-href="Random-Restart Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random-Restart Hill Climbing</a>: Conducts a series of searches from random initial states, until a goal is found. Random-restart is complete, since it will eventually generate a goal as the initial state.
If each search has a probability of success, the expected number of restarts is . <br>
<a data-href="Simulated Annealing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simulated Annealing</a>: A local search algorithm with a temperature which determines the <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="22" to="33" origin-text="probability" class="internal-link virtual-link-a">probability</a> of the algorithm accepting a downhill move. The algorithms starts with a high temperature, which decreases over iterations. The probability of a move being selected decreases with the "badness" of the move.
Since simulated annealing can make downhill moves, this allows it to escape local maxima that other algorithms can't. <br>
<a data-href="Local Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Local Beam Search</a>: A local search algorithm which keeps track of states rather than just one. It begins with randomly generated states, and at each iteration, generates all the neighbors of all states. If one of the successors is a goal state, then the algorithm halts; else, the algorithm selects the best successors and repeats. A variant of local beam search, called stochastic beam search, chooses successors with probabilities proportional to their values. <br>
<a data-href="Genetic Algorithms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Genetic Algorithms</a>: A variant of local beam search inspired by the principles of natural selection and genetics. Successor states are generated by a process called recombination, where two parent states are combined to make a new state. One approach to recombination is to randomly select a crossover point, which splits each of the parent strings and recombines them to form a child. Genetic algorithms starts with a "population" of states, where each state is evaluated based on its fitness level, which determines the likelihood of that state being selected for reproduction. The mutation rate determines the probability that each bit in the offspring string is flipped. This ensures diversity in the population. Elitism is where a number of high-scoring individuals from the previous generation are propagated forward into the current generation without modification. This ensures that high-quality solutions are preserved while still maintaining diversity. Culling is where individuals performing under a certain threshold are removed from the population. Schema: A substring where some positions are left unspecified. Schemas can be thought of as templates or patterns for a full solution. Genetic algorithms work best when schemas correspond to meaningful components of a solution. Continuous Space: A state space with an infinite branching factor. Most real-world environments are continuous. You can discretize a continuous space be limiting values to fixed intervals.
Alternatively, you can make the branching factor finite by sampling successor states randomly, in a random direction by some small amount . <br>
<a data-href="Gradient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient</a>: A <a data-href="Vector" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Vector</a> that contains all the <a data-tooltip-position="top" aria-label="Partial Derivative" data-href="Partial Derivative" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">partial derivatives</a> of a function. Empirical Gradient: The gradient of a function based on observed data rather than analytical calculation. <br>
<a data-href="Line Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Line Search</a>: An optimization technique that is used to find a satisfactory step size along a specific direction to minimize a function. <br>
<a data-href="Newton-Raphson Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Newton-Raphson Algorithm</a>: A general method for finding roots of functions, that is, solutions to equations of the form . Constrained Optimization Problem: An optimization problem where solutions must satisfy some constraints on the value of variables. <br>The most well-known category of constrained optimization problems are <a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems.
<br>Linear programming is a case of the more general problem of <a data-href="Convex Optimization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convex Optimization</a>. Search with Nondeterministic Actions: When the environment is partially-observable or is nondeterministic, the agent either doesn't exactly know it's current state (sensor model), or the next state (transition model) respectively. <br>
<a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>: The set of states that the agent believes it could be in. In nondeterministic or partially-observable environments, the solution to a problem is a conditional plan rather than a sequence of actions. The action to take is conditionally dependent on the percepts received. In a nondeterministic environment, the transition model returns a set of possible states, rather than a single state. The conditional plan can contain if-else statements, which allows solutions to be represented as trees rather than sequences. In a deterministic environment, the only branching is introduced by the agent's actions. These are called 'or' nodes. In a non-deterministic environment, branching is also introduced by the environments choice of outcome for each action. These are called 'and' nodes. <br>
These two nodes alternate to create an <a data-href="And-Or Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">And-Or Tree</a>. A solution for an and-or search problem is a subtree where: Every leaf is a goal node.
Specifies an action at each OR node.
Includes each outcome of each AND node. And-or graphs can be explored using breadth-first or depth-first search. Cycles can arise in nondeterministic problems, one case is where an action has no effect on the current state. If an agent is in an environment where actions can fail, there are no acyclic solutions.
One workaround is to use a while construct, where an action is repeated until it succeeds. This is only useful if repeating the action increases the probability that it succeeds. Sensorless Problems: A problem where an agent's percepts provide no information on the state of the environment. The solution to sensorless problems is a sequence of actions, not a conditional plan, since there are no possible percepts to condition on.
If problem has states, the belief-state problem has states.
The initial state is typically all the states of .
If the agent is unsure about what state it is in, and if some actions are only legal in particular states, then the agent is unsure about what actions it can legally perform. If illegal actions have no consequence on the environment, then the agent can take the union of all actions. Though, if performing illegal actions can be detrimental, then it is safer to take the intersection of available actions.
The transition model for belief states results in a new belief state with all the possible results of the action for each state in the current belief state.
The agent is possibly in a goal state if the current belief state contains a goal state. The agent is necessarily in a goal state if every state in the current belief state is a goal state.
The path cost could be one of several values if the same action has different costs in different states.
In ordinary graph search, newly reached states are tested to see if they've been visited previously, this can be done for belief states as well. If the current belief state is a superset of a previous belief state, we can discard the superset belief state since a solution to the superset must be a solution for each state in the corresponding subset.
Additionally, if the superset has been proven to be solvable, then any of its subsets are guaranteed to be solvable. This extra level of pruning can dramatically increase the efficiency of sensorless solutions. Though, even with this pruning, sensorless problems are still too vast to be solved efficiently.
One alternative is to avoid standard search algorithms, and use algorithms that look within belief states and develop incremental belief-state search algorithms. Partially Observable Problems: Problems where the agent has a PERCEPTS function which returns the percept received by the agent's sensors in a given state. If sensing is nondeterministic, the PERCEPTS function can return a set of possible percepts.
With partial observability, many states can produce the same percepts.
The two main differences between agents in partially observable environments and fully observable deterministic environments is: The solution is a conditional plan rather than a sequence.
The agent needs to maintain a belief state. Online Search: A search algorithm which interleaves action and planning. This is useful in dynamic or semi-dynamic environments, where the environment can change while the agent is deliberating. Online search is also useful in nondeterministic environments by focusing on contingencies which actually occur, rather than the set of all possible contingencies.
The competitive ratio is the discovered solution cost to the optimal cost if the environment was known.
Online agents can get stuck in dead-ends, states from which no goal is reachable.
<br>One common example of online search are <a data-href="Simultaneous Localization and Mapping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simultaneous Localization and Mapping</a> or SLAM problems, where an agent must build a map of an unknown environment while simultaneously keeping track of its position within that environment.
An offline algorithm explores a model of the state space, while an online algorithm explores the real world. Therefore, an online algorithm can only discover successors for the state it is currently in, while offline algorithms can jump around the state space.
In an online DFS, when an agent has tried all the actions in a given state, it must backtrack in the physical world. This can be done by keeping track of the predecessor states of the current state. Though this only works if the actions in the state-space are reversible. Online Local Search: Algorithms like hill climbing or gradient descent are already considered online algorithms. Though, these algorithms are not as good for exploration due to getting stuck at local maxima/minima. A random walk simply selects one of the actions available at random. Preference can be given to actions that have yet to be tried.
Hill climbing can be augmented with memory, where a heuristic value is stored for each visited state.
Optimism under uncertainty encourages the agent to explore new paths, rather than go down already explored paths.
<br><a data-href="Learning Real-Time A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Real-Time A*</a>* updates the cost element for the state it just left, then chooses the best move according to it's current cost element. Factored Representation: A way of representing states as a set of variables that each have a value. <br>
<a data-href="Constraint Satisfaction Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Satisfaction Problem</a>: Specifies constraints on the values of variables of a state. The solutions is the set of states where each variable satisfies every constraint on it. A CSP has three components: : The set of variables.
: The set of domains, one for each variable. A domain can be discrete, continuous, finite, or infinite.
: The set of constraints. Each constraint is a pair , where is a tuple of variables and is a relationship defining the values that each in-scope variable can take on. A relationship may be written as an explicit set of tuples, or as a function.
A unary constraint deals with one variable, a binary constraint deals with two. A constraint that deals with more than two variables is called a global constraint, even if it doesn't involve all variables.
Precedence constraints assert that one task must be complete before another.
Disjunctive constraints allow a disjunction of conditions to satisfy the constraint.
<br>Preference constraints are encoded as costs on variable assignments. CSPs with preferences can be solved using path-based or local optimization search algorithms. Such a problem is called a <a data-href="Constraint Optimization Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Optimization Problem</a>.
With infinite domains, you must use implicit constraints.
<br><a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems are an example of CSPs in continuous domains, since each constraint is a linear equality/inequality. An assignment which satisfies all constraints is consistent or legal. An assignment is complete if it assigns a value to each variable.
A solution is a legal and complete assignment. <br>
<a data-href="Constraint Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Graph</a>: A data structure in which nodes correspond to state variables, and edges correspond to binary constraints between variables. Constraint Hypergraph: Consists of nodes (circles) and square nodes—hypernodes that represent -ary constraints involving variables. Auxiliary Variables: A temporary variable used to simplify problems or represent certain constraints. Constraint Propagation: Uses the constraints on variables to reduce the legal values for variables, which could reduce the domains of other variables, and so on. Enforcing local consistency on nodes in a constraint graph causes inconsistent values to be eliminated throughout the graph. Node Consistency: A variable is node-consistent if all the values in its domain satisfies all the unary constraints on out.
Arc Consistency: A variable is arc-consistent if every value in its domain satisfies all binary constraints it's a part of. <br>
<a data-href="AC-3" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">AC-3</a>: The most popular arc-consistency algorithm which maintains a queue of arcs to consider. AC-3 pops an arc from the queue, (), and makes arc-consistent with respect to .
If the domain of , remains the same, it moves on to the next arc.
If the domain of changes, then all arcs are enqueued, where is a neighbor of .
The complexity is where is the number of arcs and is the maximum size of the domain. Path Consistency: A set of variables are path consistent if, for every assignment to and consistent with their constraints, there is an assignment to that satisfies constraints on () and (). This refers to the overall consistency of the path from to through a third variable . -Consistency: A CSP is -consistent if, for any set of variables, and for any consistent assignment to those variables, a consistent value can be assigned to any th variable. Arc-consistency is considered 2-consistent.
A CSP is strongly -consistent if it is -consistent, -consistent, all the way to 1-consistent. The alldiff constraint says that all in-scope variables must have distinct values. The resource constraint, also called the at-most constraint, is a limitation on the availability of a particular resource. <br>
For large problems, it is common to represent domains using upper and lower bounds. These domains are managed by <a data-href="Bounds Propagation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bounds Propagation</a>. A CSP is bounds-consistent if, for every variable , the lower and upper bounds of have corresponding values in the domain of every variable such that the constraints on and are satisfied. This means that for each value within the bounds of , there exists at least one compatible value in the domain of that meets the constraints. <br>
For a CSP with variables, the tree representing the CSP has leaves even though there are only possible complete assignments. We can reduce this by a factor of if we recognize that CSPs are <a data-tooltip-position="top" aria-label="Commutative Property" data-href="Commutative Property" href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">commutative</a>. Commutativity means that the order of application of a set of actions does not matter. With this restriction, the number of leaves is . <br>
<a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>: A depth-first search for CSPs is used when after performing constraint propagation, there are still multiple possible values for variables. A recursive backtracking search chooses an unassigned variable, then chooses a value for that variable which satisfies all the constraints on the variable. If the call assigns a value to all variables successfully, then a solution is returned. If a variable's domain becomes empty, then the call backtracks by undoing the last assignment and tries another legal value.
The simplest strategy for selecting an unassigned variable is called static ordering. This strategy simply chooses the variables in the order that they appear in. The next simplest strategy is choosing randomly. Neither of these are optimal.
Minimum-Remaining-Values Heuristic: Chooses the variable with the least amount of values in its domain. If some variable has no legal values left, the MRV heuristic will recognize this immediately and start backtracking.
Degree Heuristic: Chooses the variable that is involved in the largest number of constraints with other unassigned variables. This is typically used as a tiebreaker for the MRV heuristic.
Least-Constraining-Value Heuristic: Chooses the value in the current variables domain which rules out the fewest choices for neighboring values in the constraint graph. Forward Checking: A form of inference where whenever a variable is assigned a value, the forward-checking process establishes arc-consistency for it. For each unassigned neighbor of , delete any values from its domain that is inconsistent with the value chosen for .
For many problems, the search is more efficient if the MRV heuristic and forward-checking are combined.
Forward-checking is not a complete method for discovering inconsistencies. <br>
<a data-href="Maintaining Arc-Consistency" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Maintaining Arc-Consistency</a>: An algorithm that can detect more inconsistencies than forward checking. It creates a queue of all arcs in the CSP, then pops one ().
For each value in 's domain, check if there exists a value in that satisfies the constraint. If not, remove the value from 's domain.
If the domain of changes, add all arcs that are connected to back in the queue. Chronological Backtracking: A backtracking method which backtracks to the previous assigned variable and tries a new value for it. This is not an intelligent way to backtrack. A better way is to backtrack to variables that are more likely to fix the problem. One way to do so is to keep a conflict set—a set of assignments that are in conflict with some value of the current variable.
<br>The <a data-href="Backjumping Method" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backjumping Method</a> moves back to the most recent assignment in the conflict set. Forward checking can be modified to supply a conflict set.
<br><a data-href="Conflict-Directed Backjumping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conflict-Directed Backjumping</a>: The conflict set for a variable is the set of preceding variables that cause to current variable to fail, together with any subsequent failed variables. <br>
<a data-href="Constraint Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Learning</a>: The process of learning and adding new constraints whenever an inconsistency is detected. It involve finding the minimum set of variables from the conflict set which causes the inconsistency. Local Search For CSPs: Local search algorithms can be effective for solving CSPs. A complete state formulation is used, meaning each state assigns a value to every variable and the search changes the value of one variable at a time. The landscape of a CSP using the min-conflicts heuristic usually has a series of plateaus. Plateau search allows sideways movements across plateaus which helps avoid getting stuck at local maxima.
Tabu search can avoid wandering back and forth on a plateau by keeping a list of recently visited states and forbidding the algorithm to return to such states. Constraint Weighing: Assigns weights to constraints based on their importance. All constraints are initiated with a weight of 1, and each time a constraint is violated, its weight is incremented. This adds topography to plateaus, and it adds a form of machine learning. Independent Subproblem: A subset of variables and constraints in a CSP which can be solved without considering the rest of the problem. Independence can be discovered by finding independent components in the constraint graph. Though, comp
Independent subproblems can be solved in time linear in , the number of variables. Without this decomposition into subproblems, the work required is exponential in . Though, fully independent subproblems are rare in practice. There are constraint graph structures other than independent subproblems which are easy to solve. A constraint graph is a tree when any two variables are connected by only one path. Tree-structured CSPs can also be solved in linear time using directional arc-consistency. A CSP is DAC if under an ordering of variables , every is arc-consistent with every where .
To solve a tree-structured CSP, pick any variable as the root of the tree, then choose an ordering such that each variable appears after its parent in the tree. This is called a topological sort. Once you have a DAC graph, you can simply go down the list of variables and choose any remaining values. A constraint graph can be reduced to a tree by fixing the values of some variables, such that the remaining unassigned variables form a tree. A cycle cutset is a set of edges whose removal would disconnect the graph or eliminate cycles. There are approximation algorithms for finding the smallest cycle cutset. Tree Decomposition: Another technique for reducing a constraint graph to a tree. It is a transformation in which each node of the resulting tree consists of a set of variables from the original graph. A tree decomposition must satisfy three requirements: Every variable appears in at least one tree node.
If two variables have an edge between them, both variables and their constraint must appear in at least one tree node.
If a variable appears in two nodes, it must appear in each node along the path connecting those nodes. Value Symmetry: The situation where distinct values of a variable's domain lead to the same solution. You can reduce the search space by a factor of by breaking up symmetry in the assignments. This is achieved using symmetry breaking constraints. For example, you can enforce the values of three variables to be in alphabetical order, allowing only one solution. <br>
Competitive Environment: A multi-agent environment in which agents have conflicting goals. This results in <a data-href="Adversarial Search Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Search Problems</a>. In the case where there is a large number of agents, we can consider them in the aggregate as an economy, allowing us to make predictions without considering the actions of each individual agent.
We can also model adversaries as a stochastic part of the environment itself.
<br>A third option is to model the adversarial agents explicitly with the techniques of <a data-href="Adversarial Game Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Game Search Tree</a>. Pruning is the process of ignoring certain parts of the search tree that don't impact the optimal move.
A heuristic evaluation function estimates who is winning in each state based on the features of the state. An agent has imperfect information if it doesn't have complete knowledge about the environment. Imperfect information is also called partial observability, where perfect information is called full observability. <br>
Chess is a two-player, deterministic, turn-taking, perfect-information, <a data-href="Zero-Sum" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Zero-Sum</a> game. In multi-agent environments, actions are called moves and states are called positions.
A zero-sum game is a game where the sum of the payoffs to all players equals 0. Meaning whatever one player gains is directly cancelled out by the loss of another player. A game can be formally defined with the following components: : The initial state of the game.
TO-MOVE(s): A function that returns the player whose turn it is in state .
ACTION(s): Returns the set of legal actions in state .
RESULT(s, a): The transition model defining the result of action in state .
IS-TERMINAL(s): Returns true if state is a terminal state, meaning the game is over.
UTILITY(s,p): A utility function defining the utility value to player when the game ends in terminal state . <br>
<a data-href="State-Space Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State-Space Graph</a>: Defined by the initial state, actions, and result function. Nodes represents positions (states), and edges represent moves. <br>
<a data-href="Game-Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game-Tree</a>: A specialized form of a state-space graph, it assumes a two-player turn-taking game. One player is designated the MAX player, who is trying to maximize the objective function; the other player is the MIN player, who is trying to minimize the objective function.
A ply refers to a single move made by a single agent. <br>
For an agent to act rationally, its <a data-href="Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Strategy</a> must be conditioned upon the actions of the other player. <br>
<a data-href="Minimax Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minimax Algorithm</a>: Given a game tree, the optimal move can be determined by working out the minimax value of each state, denoted as MINIMAX(s). MAX prefers a higher value, while MIN prefers a lower value.
<br>The algorithm performs a complete <a data-href="Recursive" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive</a> <a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a> exploration. It proceeds down to a leaf node, and backs up the minimax value through the tree as the recursion unwinds.
The complexity of minimax by itself is where is the branching factor of the tree and is the max depth of the tree. <br>
<a data-href="Alpha-Beta Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Alpha-Beta Pruning</a>: An optimization technique used in the minimax algorithm which prunes suboptimal branches. It keeps track of two values: Alpha: The highest-value choice found so-far along the path for the MAX player.
Beta: The lowest-value choice found so-far along the path for the MIN player.
If MAX's score exceeds MIN's beta value, the branch is beta-pruned.
If MIN's score is less than MAX's alpha value, the branch is alpha-pruned. The effectiveness of alpha-beta pruning is dependent on the order in which states are examined. If we could first examine the best states, minimax with pruning would reduce to . This is in the case of perfect move ordering. If the best moves are evaluated first, the alpha and beta values can be updated more quickly. This allows for more effective pruning of suboptimal branches. Using heuristics can lead to better move orderings. For example, moves that capture pieces or attack the king can be examined first, in the case of a chess game.
Killer moves are moves that have caused pruning in previous searches. Prioritizing these moves is called the killer moves heuristic. Repeated states may occur in a game tree due to transpositions, which are different permutations of the same move sequence leading to the same position. <br>Transpositions are addressed using <a data-href="Transposition Tables" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transposition Tables</a>. Say two move sequences, and both lead to the same state . We can find the value of state when exploring sequence and store it in the transposition table. Then, when we reach state from sequence , we can simply look up its value in the table. <br>
<a data-href="Type A Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type A Strategy</a>: Evaluates all possible moves to a certain depth in the game tree and uses a heuristic function to estimate the utility of states at that depth. This cuts the search off early and applies a heuristic function to states, effectively treating non-terminal states as terminal.
In this case, you replace the utility function with an EVAL function, and the terminal test function is replaced with a cutoff test, which returns true for terminal nodes, but is otherwise free to decide when to cut off a search. <br>
<a data-href="Type B Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type B Strategy</a>: Ignores moves that look bad, and follows promising lines as far as possible. <br>
<a data-href="Heuristic Evaluation Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic Evaluation Function</a>: Returns an estimate of the expected utility of a state to player . For terminal states, EVAL(s,p) must equal UTILITY(s,p). For non-terminal states, the evaluation must be between a loss and a win.
Most evaluations work by calculating various features of states. The features taken together define various categories or equivalence classes of states. This enables the evaluation function to return a single variable which estimated the proportion of states with each outcome in that equivalence class.
<br>A weighted linear function computes separate contributions from each feature, and combines them for the total value. It's defined as: . The weights should be normalized so that the sum is always within the <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="59" to="64" origin-text="range" class="internal-link virtual-link-a">range</a> . <br>
Cutting-Off: The most straightforward approach to cutting the search early. This method sets a fixed depth limit as the cutoff point. This is called a <a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>. <br>
<a data-href="Iterative Deepening" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening</a>: Iteratively performs depth-limited searches, incrementing the depth limit on each iteration. The evaluation function should only apply to positions that are quiescent or stable, meaning there is no pending move that would drastically change the evaluation. <br>The IS-CUTOFF function should return false for non-quiescent states. This is called a <a data-href="Quiescent Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quiescent Search</a>. Horizon Effect: Occurs when the agent is facing a devastating move from the opponent, but can delay it beyond its horizon by performing other moves. <br>One way to address this is to allow <a data-href="Singular Extensions" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Singular Extensions</a>, which are moves that are clearly better than all other available moves in a given position. <br>
<a data-href="Forward Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Pruning</a>: Prunes moves that appear to be poor moves, but might in fact be good. This saves computation time by incurring the risk of pruning good moves and is considered a type B strategy.
<br>One approach, called <a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>, on each ply, considers only the beam of the best moves according to the evaluation function.
Probabilistic Cut Algorithm: A forward-pruning approach to alpha-beta search that uses statistics derived from previous experience to lessen the chance that the optimal move gets pruned. <br>
<a data-href="Late Move Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Late Move Reduction</a> assumes that move ordering has been done well, therefore, moves that are later in the sequence are less likely to be good moves. Rather than pruning the late moves, we just reduce the depth at which they are searched. If the shallow search returns a value above the current alpha, the search is re-run at full depth. Table Lookup: Rather than search, table lookup stores and retrieves the best move from a data structure. A program can then produce a policy, which is a mapping from every possible state to the optimal move in that state. <br>This is commonly used in chess engines to save <a data-tooltip-position="top" aria-label="Endgame Tablebase" data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebases</a>, which allows the engine to play endgames perfectly. This table is constructed with a <a data-href="Retrograde Minimax Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Retrograde Minimax Search</a>, which involves evaluating the end of the game backward to the beginning. <br>
<a data-href="Monte-Carlo Tree Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monte-Carlo Tree Search</a>: A search algorithm that doesn't use a heuristic evaluation function, instead it calculates the average utility over a number of complete games starting from a given state. This is the same as the win percentage for games with binary win/lose outcomes MCTS is considered a kind of <a data-href="Reinforcement Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reinforcement Learning</a>. Playout Policy: chooses which moves to make during a play-out simulation. These policies can be learned by self-play using neural networks.
Early playout termination is when a playout is stopped early because it is taking too many moves. The playout is either evaluated with a heuristic or is declared a draw.
<br>A pure MCTS does simulations starting from the current state and tracks which possible moves have the highest win percentage. For some stochastic games, this converges to optimal play as increases, though it isn't sufficient for most games. We instead need a selection policy which balances the <a data-href="Exploration-Exploitation Tradeoff" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Exploration-Exploitation Tradeoff</a>.
MCTS does this by maintaining a search tree and growing it at each iteration of the following four steps: Selection: Starting at the root, we choose a move (according to the selection policy), leading to a successor state, and repeat this process to a leaf node.
Expansion: We grow the tree by generating a new child of the selected node.
Simulation: We perform a playout from the newly generated node, choosing moves according to the playout policy.
Back-Propagation: We use the result of the simulation to update all nodes going up to the root. <br>
<a data-href="Upper Confidence Bound" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Upper Confidence Bound</a>: A selection policy which ranks possible moves according to the UCB formula: Where is the average reward obtained from action , is the total number of trials, is the total number of trials where action was selected, and is a constant which controls the degree of exploration. Stochastic Games: A class of games which are in an environment that exhibit randomness. A standard game tree cannot be used to model stochastic game because of their inherit uncertainty. <br>Chance nodes are included which denote the possible outcomes of some random variable and their <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a>.
<br>Positions do not have definite MINIMAX values, an <a data-href="Expected Value" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Expected Value</a> is calculated instead. This leads to the expectminimax values for games with chance nodes. Knowledge-Based Agent: Uses reasoning processes over an internal knowledge representation. The central component of a knowledge-based agent is its knowledge base (KB). <br>
<a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>: A set of sentences, each expressed in a knowledge representation language and represents some assertion about the world. When the sentence isn't derived from other sentences, it is called an axiom.
A KB may initially contain some background knowledge. TELL and ASK are the names for adding to or querying the KB, respectively. Each of these operations may include inference: deriving new sentences from existing ones. Each time a knowledge-based agent is called it: TELLs the KB what it saw (its percepts).
ASKs the KB what action to perform. This usually requires extensive reasoning.
TELLs the KB what action was chosen and returns that action. Declarative Approach: Starts with an empty KB, and the agent designer TELLs sentences one by one until the agent can operate in its environment. Procedural Approach: Encodes desired behavior directly as program code. <br>
<a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a>: A formal system that uses symbols and syntax to represent logical expressions and arguments. A logic must also define the semantics, or meaning, of sentences. The semantics defines the truth of each sentence with respect to each possible world.
The term model is commonly used in place of possible world. When possible worlds represent potentially real environments, a model is a mathematical abstraction, which has a fixed truth value for every relevant sentence. Logical entailment between two sentences means that a sentence follows logically from another sentence. Entailment is represented symbolically as . This means entails if and only if, in every model where is true, is also true. <br>
<a data-href="Logical Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logical Inference</a>: The process of deriving new conclusions from existing premises. Model Checking: Enumerating all possible models to check if is true in all models where the KB is true. <br>
<a data-href="Inference Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Inference Algorithm</a>: A computational method which derives entailed sentences based on a KB. IF a inference algorithm derives only entailed sentences, it is sound or truth preserving. If it derives all entailed sentences, it is complete. If some inference algorithm can derive from KB, it is said that " is derived from KB by ". This sentence is represented symbolically as: Grounding: The connection between logical reasoning processes and the real environment. The agent's sensors create this connection and the general rules of this environment are produced by a sentence construction process called learning. <br>
<a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a>: A branch of <a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a> that deals with propositions, which are statements that are either true or false. <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="2" to="21" origin-text="Propositional logic" class="internal-link virtual-link-a">Propositional logic</a> is made up of: Propositional Symbols: Symbols that start with an uppercase letter and refer to a proposition. For example, , , and are examples of propositional symbols. Each symbol represents a distinct statement that can be true or false. Individual symbols are commonly referred to as literals. A literal is negative if there is a negation applied to it (e.g. ), else, it's a positive literal. Logical Connectives: Operators which combine propositional symbols to create complex sentences. The common connectives include: Negation (NOT, ¬)
Conjunction (AND, ∧)
Disjunction (OR, ∨)
Implication (IMPLIES, →)
Biconditional (IF AND ONLY IF, ↔)
XOR (EXCLUSIVE OR, ) Atomic Sentence: An atomic sentence consists of a single propositional symbol and represents a basic assertion. Complex Sentence: A complex sentence is made up of propositional symbols connected by parenthesis and logical connectives. They are also called formulas. In propositional logic, a model is simply a setting of truth values for each propositional symbol. There are possible models, where is the number of propositional symbols. <br>
<a data-href="Truth Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Truth Table</a>: species the truth value of sentences for each possible assignment of truth values for symbols. <br>
Propositional logic is <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonic</a>, meaning that when you add knowledge to a propositional <a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>, it cannot lead to the loss of previously established truths. <br>
<a data-href="Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Theorem Proving</a>: Applying rules of inference to sentences in a KB to construct a proof of a sentence without checking models. <br>
<a data-href="Rules of Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rules of Inference</a>: Logical rules which provide the structure for how new statements can be derived from existing ones. Proofs: In propositional logic, proofs are essential for establishing the truth of a statement or the validity of an argument. A proof is a demonstration that a conclusion follows from a set of premises. Any of the ch.3 search algorithms can be used to find a sequence of steps to constitute a proof. We define a proof as the following components: Initial State: The initial KB.
<br>Actions: The set of all the inference rules applied to all the sentences that match the top half of the inference rule. The top half refers to the numerator of the inference rule in <a data-href="Gentzen Notation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gentzen Notation</a>.
Result: The bottom half of the inference rule, or the denominator of the inference rule in Gentzen notation.
Goal: A state that contains the sentence which we are trying to prove. <br>
<a data-href="Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modus Ponens</a>: Modus Ponens is a syllogistic argument form and rule of inference. It has the following structure: If then .
.
Therefore, . <br>
Logical Equivalence: Two sentences are said to be logically equivalent if they have the same truth table. This is denoted using the symbol. A <a data-href="Rule of Replacement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rule of Replacement</a> is a logical principle that allows for the substitution of one logical expression, for another, logically equivalent expression. Rules of replacement are used to construct proofs, simply logical expressions, and verify the correctness of logical statements. <br>
Validity: A sentence is valid if it is true in all models. This is called a <a data-href="Tautology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Tautology</a>, meaning that the sentence is necessarily true. Satisfiability: A formula is satisfiable if there is at least one assignment of truth values which makes the formula true. If there is no assignment of truth values to make the formula true, then it is unsatisfiable, also called a contradiction. <br>
<a data-href="Proof by Contradiction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Contradiction</a>: An indirect proof that assumes the conclusion is false, then proves that this assumption leads to a contradiction. If assuming the conclusion is false does lead to a contradiction, then the conclusion must be true. A clause is a disjunction/conjunction of literals. When talking about clauses, usually it refers to a disjunctive clause, which is a logical expression formed by connecting literals with the OR operator. The empty clause is a clause with no literals, commonly denoted as , , or . An empty disjunctive clause is always false, making it analogous to a contradiction. This is an important concept in proof by contradiction, as reaching an empty clause indicates that a contradiction has been proven. <br>
<a data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clause</a>: A disjunctive clause with at most one positive literal. Definite Clause: If a Horn clause has exactly one positive literal, it is a definite clause. For example, .
Goal Clause: If it has no positive literals, it is a goal clause. For example, .
<br>Horn clauses are computationally efficient for algorithms such as <a data-href="Resolution Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution Theorem Proving</a>, or for <a data-href="Forward/Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward/Backward Chaining</a>. This makes them the basis of many <a data-href="Logic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic Programming</a> languages, as well as for automated theorem proving or database querying. <br>
Proof by <a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Resolution resolves two clauses which contain complementary literals. Two literals are complements of one another if one is the negation of the other (e.g. and ). Resolution is defined: The above example resolves and resulting in a new clause called the resolvent. Only one pair of complementary literals can be resolved at a time.
<br>In the context of <a data-href="Automated Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Automated Theorem Proving</a>, resolution is applied repeatedly to derive a contradiction, thereby proving that the negation of the statement that's being proven, is unsatisfiable. Resolution closure of a set of clauses is the set of all clauses derivable by repeated application of the resolution rule to clauses in or their derivatives.
<br>The completeness theorem for resolution in <a data-tooltip-position="top" aria-label="Propositional Logic" data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">propositional logic</a> is called the ground resolution theorem. <br>
<a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a>: A sentence is considered to be in conjunctive normal form (CNF) if it's a conjunction (AND) of one or more clauses. A -CNF sentence is a CNF sentence where each clause has at most literals. If a KB contains only definite clauses: Every definite clause can be written as an implication whose premise is a conjunction of positive literals and whose conclusion is a single positive literal. Ex: .
In Horn form, the premise is called the body and the conclusion is called the head. <br>
<a data-href="Forward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Chaining</a>: An algorithm which determines if a single propositional symbol (the query), is entailed by a knowledge base of definite clauses. It starts with known facts (single, positive literals), if all the premises of an implication are known, then its conclusion is added to the set of known facts.
This process continues until the query is added, or until no further inferences is made.
Forward chaining runs in linear time, is sound, and complete. <br>
<a data-href="Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backward Chaining</a>: Works backwards from the query. If is known to be true then no work is needed. Else, the implications in the KB whose conclusion is are found.
If all the premises of one of those implications is known to be true, then is true.
Often runs in sublinear time. Model checking is used to check the satisfiability of a query. <br><a data-href="Davis-Putnam Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Davis-Putnam Algorithm</a>: A model checking algorithm which takes as input a formula in CNF. Like <a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>, it is essentially a depth-first enumeration of possible models. Early termination occurs if the algorithm detects that the sentence must be true or false, even with a partially completed model. For example, a clause is true if any literal is true.
Pure Symbol Heuristic: A pure symbol is a symbol that always appears with the same sign in all clauses. If a sentence has a model, then it has a model with the pure symbols assigned so as to make their literals true, because doing so never makes a clause false.
Unit Clause Heuristic: In the context of DPLL, a unit clause also means a clause in which all but one literal are already assigned false by the model. Unit propagation occurs when a unit's truth value leads to the simplification of other clauses by removing the occurrence of the literal. Hill-Climbing can be assigned to satisfiability (SAT) problems, provided a correct evaluation function is selected. Since the goal is to find an assignment that satisfies every clause, an evaluation function that counts the number of unsatisfied clauses works well. <br>
<a data-href="WalkSAT Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">WalkSAT Algorithm</a>: A local search algorithm which, on every iteration, picks an unsatisfied clause and picks a symbol to flip. The symbol that is picked is the one that minimizes the number of unsatisfied clauses in the new state. A fluent variable is an aspect of the world that changes. An atemporal variable is static. Hybrid Agent maintains and updates a KB as well as a current plan. The initial KB contains the atemporal variables. At each time step , the new percept sequence is added, along with all the fluent axioms, such as the successor state axioms.
The agent then uses logical inference to to derive new knowledge and update its knowledge base (KB).
Though, with this program, as increases, the computational expense to logically infer increases due to inferences having to go further back and involve more propositional symbols. <br>One solution is to save or cache the results of inference. This is a form of <a data-href="Dynamic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamic Programming</a>. <br>
The percept history and all their ramifications can be replaced with the <a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>, which is the set of all possible states of the world currently. The process of updating the belief state as new percepts arrive is called state estimation.
<br>The set of belief states is the <a data-href="Powerset" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Powerset</a> of the set of physical states, hence the size of the belief state set is . Programming languages are the largest class of formal languages in common use. The main drawback of programming languages is that they lack a general mechanism for deriving facts from other facts. In a compositional language, the meaning of a sentence is a function of its parts. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>: Extends <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="10" to="29" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> by introducing quantifiers and predicates, allowing for the representation of the relationships between objects. Predicates are symbols that represent properties or relations among objects. For example, might denote a certain property of , while could represent a relationship between objects and . <br>
The primary difference between propositional and <a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a> (<a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="2" to="5" origin-text="FOL" class="internal-link virtual-link-a">FOL</a>) is their ontological commitments, that is, what they assume about the nature of reality. Propositional logic assumes that facts are either true or false in the world. First-order logic assumes that the world consists of objects with relations that are either true or false.
In fuzzy logic, the ontological commitment allows degrees of truth between 0 and 1.
<br><a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a> assumes that facts hold at particular times, and that those times are ordered.
Higher-order logics view the relations and functions of first-order logic as objects themselves. A logic can also be characterized by its epistemological commitments, that is, the possible states of knowledge that it allows with respect to each fact. Both first-order and propositional logic sentences are either true, false, or unknown.
<br>Systems using <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="14" to="25" origin-text="probability" class="internal-link virtual-link-a">probability</a> theory can have any degree of belief ranging from 0 to 1. The domain of a model in FOL is the set of objects it contains. The domain is required to be non-empty. Relation: The set of tuples of objects that are related. Function: maps a tuple to a single output. Models require total functions, functions that have an output for every input tuple. Constant symbols stand for objects (e.g. ), predicate symbols stand for relations (i.e. or ), and function symbols stand for functions (e.g. ). Each predicate and function symbol has an arity, fixing the number of arguments it takes. Model checking cannot be used to determine entailment in FOL because the number of first-order models is unbounded. Term: A logical expression that refers to an object. Complex Term: Formed by a function symbol followed by a parenthetical list of arguments. Atomic Sentence: Formed from a predicate symbol optionally followed by a parenthetical list of terms (i.e. ). Atomic sentences can have complex terms as arguments. Complex Sentences: One or more atomic sentences combined using logical connectives or quantifiers. Quantifiers: Allows for statements about some or all objects in a domain. Universal Quantifier (): Asserts that a certain statement is true for all objects. For example, means "for all , is true". Implication is the natural connective for . Existential Quantifier (): Asserts that there is at least one object for which the statement is true. For example, means "there exists an , such that is true". Conjunction (AND) is the natural connective for . Uniqueness Quantifier (): Asserts that exactly one objects makes the statement true. For example, means "there is exactly one , such that is true."
Consecutive quantifiers of the same type can be written as one quantifier with multiple variables: If two quantifiers use the same variable name, the variable belongs to the innermost quantifier that mentions it.
<br> is a conjunction and is a disjunction over the universe of objects, therefore, they obey <a data-href="De Morgan's Laws" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">De Morgan's Laws</a>: We can use the equality symbol to say that two terms refer to the same object. For example, . <br>
<a data-href="Database Semantics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Semantics</a>: Consists of the closed-world, unique names, and domain-closure assumptions. Unique Names Assumption: Assumes that every constant symbol refers to a distinct object.
Closed-World Assumption: Assumes that atomics sentences not known to be true are false.
Domain Closure: Assumes that each model contains no more domain elements than those named by the constant symbols. Domain: Some part of the universe about which we wish to express definite knowledge of what the world contains. Assertions: Sentences that are added to a knowledge base. Questions: Queries or goals which receive information from a knowledge base. Axioms: Provide the basic factual knowledge from which conclusions can be derived. Theorems: Logical sentences that are entailed by axioms. Theorems add no new information, though they are essential for reducing the computational cost of inference. <br>
<a data-href="Knowledge Engineering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Engineering</a>: The general process of constructing a knowledge base (KB). The knowledge engineering process is as follows: Identify the questions that the KB will support ant the kinds of facts that will be available.
Assemble the relevant knowledge.
<br>Decide on a vocabulary of predicates, functions, and constants. Translate domain-level concepts into logic-level names. The result is a vocabulary, known as the <a data-href="Ontology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ontology</a> of the domain.
Encode general knowledge about the domain. Write the axioms for all vocabulary terms.
Encode a description of the problem instance. Write simple atomic sentences about concepts that are already a part of the ontology.
Pose queries to the inference procedure.
Debug and evaluate the knowledge base. <br>
<a data-href="First-Order Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Order Inference</a>: The process of deriving new conclusions from existing statements in <a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="70" to="87" origin-text="first-order logic" class="internal-link virtual-link-a">first-order logic</a>. <br>One way to do first order inference is to convert a first-order KB into propositional logic and use <a data-href="Propositional Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositional Inference</a>. This is called <a data-href="Propositionalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositionalization</a>. The first step is to eliminate universal quantifiers using the rule of universal instantiation, which says that we can infer any sentence obtained by substituting a ground term for a universally quantified variable.
<br>Existential instantiation replaces an existentially quantified variable with a single new constant symbol. A <a data-href="Skolem Constant" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Constant</a> is used to eliminate existential quantifiers. For example, in the formula , the existentially quantified variable can be replaced by a Skolem constant , as long as does not exist elsewhere in the KB. This process is called <a data-href="Skolemization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolemization</a>.
Next, replace ground atomic sentences, such as , with propositional symbols, such as .
Then, apply any of the complete propositional inference algorithms to obtain conclusions.
One problem is that if the KB contains a function symbol, the set of possible ground-term substitutions is infinite. This can be addressed by generating all instantiations with constant symbols, then all terms at depth 1, and so on until a proof of the entailed sentence can be constructed. <br>
<a data-href="Generalized Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Generalized Modus Ponens</a>: A lifted version of Modus Ponens, meaning it raises traditional Modus Ponens from variable-free <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="88" to="107" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> to FOL. Generalized Modus Ponens allows for the involvement of predicates and variables. For example: Substitution: A mapping of variables to terms. To apply a substitution, you replace all occurrences of a variable with the mapping defined by that substitution. Substitutions are denoted as , meaning substitute for the variable . <br>
<a data-href="Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Unification</a>: The process of finding substitutions which make different logical expressions look identical. This process is a key part of all first-order inference algorithms. For example, to unify the two sentences and , you can simply substitute for , . The substitution is known as the unifier.
If you try to unify the sentences , meaning "John knows everyone", and , meaning "Everyone knows Elizabeth", you will not be able to. This is because cannot be equal to and at the same time. This can be avoided by standardizing apart the variables. Standardizing apart a sentence involves renaming its variables to avoid name clashes. For example, you can rename the variable in to . Now the two sentences can be unified with the unifier . If there are multiple possible unifiers, it is best to choose the most general unifier. The most general unifier (MGU) is the unifier which places the fewest restrictions on variables. For example, on the sentence , the unifier is more general than . stores a sentence in the first-order KB, and returns all unifiers such that the query unifies with some sentence in the KB. can be made more efficient by not attempting to unify sentences that clearly have no chance of unifying. This can be done by implementing indexing. Predicate indexing buckets facts by their predicate and stores them in a hash table. For example, the facts may be stored in one bucket, and the facts in another.
<br>Given a sentence to be stored, it's possible to construct indices for all possible queries that unify with it. These queries form a <a data-href="Subsumption Lattice" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Subsumption Lattice</a>, where the child of any node is obtained from its parent by a single substitution, and the highest common descendant of any two nodes is the result of applying the most general unifier. <br>
The forward-chaining algorithm discussed earlier works for KBs of propositional definite clauses. Though, not all first-order sentences can be expressed as a <a data-href="Definite Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Definite Clause</a>—a clause with exactly one positive literal. Existential quantifiers aren't allowed, and universal quantifiers are left implicit. An example of a first-order definite clause is: Since the universal quantifier is implicit, the sentence means that all which is greedy and a king, is evil. A first-order forward-chaining algorithm starts from the known facts, and triggers all the rules whose premises are satisfied, adding their conclusions to the knowledge base. This is repeated until the query is answered, or no new facts can be derived. A fact is not new if it is just a renaming of an existing fact. A sentence is a renaming of another if they're identical except for the names of their variables.
If no new inferences are possible on a KB, then the KB is called a fixed point of the inference process. Forward-chaining can be made more efficient by considering the conjunct ordering problem—finding an ordering of the conjuncts in the premise so that the total cost of inference is minimized. <br>The minimum-remaining-values (MRV) heuristic would suggest an ordering where the next variable to be assigned a value is the variable with the least amount of valid values available. This is an example of <a data-href="Pattern Matching" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Matching</a>, and is very similar to the previously discussed constraint satisfaction problems. We can view each conjunct as a constraint on the variables that it contains.
<br><a data-href="Rete Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Algorithm</a>: A pattern matching algorithm which preprocesses the set of rules in the KB to construct a <a data-href="Rete Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Network</a>—A graph data structure where each node is a literal from a rule premise. Variable bindings flow through the network and are filtered out when they fail to match a literal. If two literals in a rule share a variable, then the bindings from each literal are filtered through an equality node.
Rete networks are a key component to production systems and in cognitive architecture. Backward chaining over definite clauses works backwards from the goal, chaining through rules to find known facts that support the proof. Logic Programming: Programming paradigms based on formal logic systems. In logic programming, program statements express facts and rules about some problem domain, and computation is performed via logical inference. <br><a data-href="Prolog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Prolog</a> and <a data-href="Datalog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Datalog</a> are two common logic programming languages. <br>
<a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Here, we extend resolution to FOL. The first step to perform resolution is to convert the sentences in the KB into <a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a> (CNF). That is, a conjunction (AND) of clauses, where a clause is a disjunction (OR) of literals. In CNF, literals can contain variables, which are considered to be universally quantified. Every FOL sentence can be converted into an equivalent CNF sentence. To convert a sentence to CNF, you may have standardize variable names, that is, for sentences that use the same variable name twice, you must change one of them.
<br>You also may have to Skolemize a sentence. That is, eliminating existentially quantified variables with a <a data-href="Skolem Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Function</a>. These are functions which take as arguments all the universally quantified variables in scope of the existential quantifier. For example: Where is a Skolem function. The resolution rule for first-order clauses is a lifted version of the propositional rule discussed earlier. Two clauses, which are assumed to be standardized apart, can be resolved if they contain complementary literals. This is called the binary resolution rule, because it resolves two literals, and it isn't a complete inference procedure by itself. The full resolution rule resolves subsets of literals in each unifiable clause.
Another approach is first-order factoring, which reduces two literals to one if they are unifiable. The unifier must be applied to the entire clause. This combined with binary resolution is complete. Resolution is refutation-complete, meaning, that if a set of sentences is unsatisfiable, then resolution will always be able to derive a contradiction. Ground Resolution Theorem: States that propositional resolution is complete for ground sentences. <br>
<a data-href="Herbrand Universe" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand Universe</a>: If is a set of clauses, then the Herbrand universe of , denoted , is the set of all ground terms constructible from the function symbols in , and the constant symbols in ; if none, then a default constant symbol, . Saturation: If is a set of clauses and is a set of ground terms, then , the saturation of with respect to , is the set of all ground clauses obtained by applying all possible consistent substitutions of ground terms in for variables in .
Herbrand Base: The saturation of a set of clauses with respect to it's Herbrand universe is called the Herbrand base of , denoted <br><a data-href="Herbrand's Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand's Theorem</a>: If a set of clauses is unsatisfiable, then there exists a finite subset of that is also unsatisfiable. <br>
<a data-href="Equational Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Equational Unification</a>: The process of finding a substitution for variables in a set of equations that makes the equations become identical. Strategies for finding proofs by resolution efficiently include: <br>Unit Preference: Preferring resolutions where one of the sentences is a single literal, called a unit clause. This is complete for <a data-tooltip-position="top" aria-label="Horn Clause" data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clauses</a>.
Set of Support: Insisting that every resolution step involves at least one element from the set of clauses called the set of support.
Input Resolution: Every resolution combines one of the input sentences with some other sentence.
Subsumption: Eliminates all sentences that are subsumed (more specific than) an existing sentence in the KB.
<br>Learning: Training a <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a> model to learn from experience. <br>
Ontological Engineering: The process of developing, analyzing, and managing <a data-tooltip-position="top" aria-label="Ontology" data-href="Ontology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ontologies</a>. <br>Ontology: A framework which defines concepts, classes, and relationships within a specific domain. Classes and objects can be thought of in the same way of <a data-href="Object-Oriented Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Object-Oriented Programming</a>, where a class is a type of entity that is described by properties, an object is an instantiation of a class, and classes can have relationships via mechanisms like inheritance. Subcategories inherit properties from their superclass. Subclass relations organize categories into taxonomic hierarchies.
Taxonomy: A hierarchical classification of entities into categories.
Interaction with the world takes place with objects, while most reasoning happens at the level of categories. Categories also serve to make predictions about objects. The general framework of concepts is called an upper ontology.
General-Purpose Ontology: An ontology that should be applicable in any special-purpose domain, with the addition of domain-specific knowledge.
Special-Purpose Ontology: An ontology engineered for a particular domain. <br>
We will use <a href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" target="_self" rel="noopener noreferrer" from="12" to="29" origin-text="first-order logic" class="internal-link virtual-link-a">first-order logic</a> (FOL) to represent knowledge in this chapter, although FOL has some representational limitations. The main difficulty being that in the real-world, most generalizations have exceptions or only hold to a degree. We can represent categories in FOL as predicates or objects. For example, can say that object belongs to the class.
We can also define an object called , and use to say the same thing.
We can define properties of a class by saying . Exhaustive Decomposition: The process of breaking sets into subsets, such that all elements belong to a subset. If an exhaustive decomposition is made up of disjoint sets, it is called a partition. Categories are disjoint if they have no members in common. We'll use the relation to say that one thing is a part of another. This allows us to group objects into hierarchies. <br>The relation is <a data-tooltip-position="top" aria-label="Transitive Property" data-href="Transitive Property" href="https://emujakic.github.io/TechKB/notes/math/transitive-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">transitive</a> and <a data-tooltip-position="top" aria-label="Reflective Property" data-href="Reflective Property" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">reflective</a>. The world can be seen as composed of primitive objects, of which, composite objects are made of. Categories of composite objects are often characterized by structural relations among parts.
A bunch is a collection of objects that are grouped together based on certain criteria and can be considered as a composite object. Logical Minimization: Defining an object in its most efficient form, while preserving its original definition. Measures are the values assigned to properties like height or mass. Quantitative measures are represented by numerical values, and thus, are easy to represent.
<br><a data-tooltip-position="top" aria-label="Ordinal Data" data-href="Ordinal Data" href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Ordinal</a> measures are measures that have a meaningful order among values, though may not have a consistent magnitude between values. For example, the <a href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" target="_self" rel="noopener noreferrer" from="133" to="140" origin-text="ordinal" class="internal-link virtual-link-a">ordinal</a> measure may have values . These values have a clear order among them, though the difference between and may not be the same as the difference between and . <br>These sorts of <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">monotonic</a> relationships among measures form the basis of a subfield of AI known as qualitative physics. Some categories have strict definitions, like that of a square or a circle. Most categories in the real-world are natural kind categories, which have no clear-cut definition. This presents a challenge for logical agents, as they must identify atypical objects as still belonging to the same category. For instance, an agent should categorize a three-wheeled car as a car, even though most cars have four wheels. Intrinsic properties belong to the substance of the object itself and is independent of external conditions or quantity. For example, the boiling point of an object is intrinsic. Extrinsic properties are properties which depend on external factors or quantity. For example, weight or volume is an extrinsic property, since it changes with quantity. Count nouns are nouns whose quantities are described by a discrete number of individual entities. For example, books are a count noun. Categories described only by intrinsic properties are count nouns. Mass nouns are objects whose quantity is described by continuous measures. For example, water is a mass noun typically quantified using measures like fluid mass. Categories described by any extrinsic properties is a mass noun. Event: Actions or occurrences that can change the state of the world. Fluents are properties or conditions that are subject to change as a result of events. <br>
<a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a>: A formalism used to reason about propositions and how they change over time. Temporal representation uses time points to describe when events happen and how they relate to each other. We assume a first time point , which describe the initial state and what fluents are true at start time. Event calculus is a mathematical formalism used to reason about events and their effects. The set of predicates of event calculus are: : Fluent is true at all time between and .
: Event starts at time and ends at time .
: Event causes fluent to become true at time .
: Event causes fluent to become false at time .
: Fluent becomes true at some time between and .
: Time comes before time . We'll consider two types of time intervals: Moments, which have zero duration; and extended intervals, which have a duration greater than zero.
To establish a time scale, we first select an arbitrary moment as time 0, from which we can associate subsequent points to create absolute time points. A widely used time point is epoch time, also known as Unix time, which began on January 1, 1970, at zero seconds. This system is commonly utilized in digital environments for timekeeping and time-stamping. Physical objects can be described as generalized events, in the sense that objects are pieces of space-time. We can describe the properties of objects using state fluents, such as . Propositional Attitudes: Mental states that involve a relation between an agent and a proposition. Some examples include , or . These attitudes do not behave like normal predicates. Unlike normal predicates, which are referentially transparent, propositional attitudes are referentially opaque. Referential Transparency: An object if referentially transparent if the term used to refer to it does not matter. For example, if two terms, and both refer to the same object, referring to one term is the same as referring to the other.
Referential Opacity: An object is referentially opaque if the term used to refer to it does matter. For example, referring to is different from referring to because the agent may not know that these terms are co-referential. <br><a data-href="Modal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modal Logic</a> is designed to address this issue. Regular logic is centered around the modality of truth, while modal logic includes special modal operators that take sentences (rather than arguments) as terms. For example, ' knows ' is represented as where is the modal operator for knowledge. Otherwise, the syntax is the same as first-order logic, though the semantics are more complicated.
In modal logic, we need a model which consists of the collection of possible worlds rather than just the one true world. The worlds are connected via accessibility relations, one relation for each modal operator. A world is accessible from with respect to the modal operator if everything in is consistent with what knows in .
For example, Austin is the capital of Texas, but for an agent who doesn't know that, the possible world where Houston is the capital is accessible. A knowledge atom is true in world if is true in every world accessible from . The truth of complex sentences in derived with recursive application of this rule, along with the standard rules of FOL. Description Logics: A class of formal languages used to reason about the knowledge of a domain through structured concepts, roles, and instances. The main inference tasks for description logics are: Subsumption: Checking if a category is a subset of another.
Classification: Checking whether an object belongs to a particular category. Semantic Networks: A graph structure where nodes are objects or events, and edges are relationships between nodes. This notation makes it easy to perform inheritance reasoning. For example, a directed edge from the node to the node represents a hierarchical relationship saying that the cat is a pet.
Negation, disjunction, conjunction, nested functions, and existential quantification are all missing from this semantic network. Procedural attachment can be used to increase the expressive power of semantic networks. Procedural Attachment: A technique where a query about, or an assertion of a certain relation results in a call to a special procedure designed for that relation rather than a general inference algorithm. Semantic networks allow for default values for categories via an inheritance algorithm, these defaults can be overridden by a more specific value. <br>
<a data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonicity</a>: A property of logical systems which says that the addition of new information cannot invalidate previously established truths. Circumscription: A method in non-monotonic logics in which certain predicates are assumed to be false, unless they are explicitly mentioned to be true. For example, in the formula , can be circumscribed, and is assumed unless stated otherwise.
Circumscription is a form of model-preference logic, where models with the least abnormal objects are preferred. Default Logic is a non-monotonic formalism which allows for default rules to be defined. For example, the formula means that if is true, and if is consistent with the KB, then is concluded by default.
The extension of a default theory consists of the original known facts, as well as all default conclusions that can be drawn from the default rules in the KB. Belief revision is the process of retracting inferences in the face of new information. If a KB contains a sentence , and we want to perform , we'd have to first perform in order to prevent a contradiction. Additionally, if other sentences are necessarily derived from , then those sentences will have to be retracted as well. Truth maintenance systems (TMSs) were designed to handle belief revision. Justification-based TMS annotates each sentence in the KB with the set of sentences which justify it, that is, the set of sentences from which the sentence was inferred. JTSMs typically assume that retracted sentences may be reconsidered, and therefore saves the sentence and it's derivations. An assumption-based TMS keeps track, for each sentence that has ever been considered, which assumptions would cause the sentence to be true. Classical Planning: The task of finding a sequence of actions which constitute a solution in a discrete, static, deterministic, fully-observable environment. <br>
<a data-href="Planning Domain Definition Language" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Planning Domain Definition Language</a> (PDDL): A family of languages in a factored representation that provide a standardized way to express all actions with a single action schema, and does not need domain-specific knowledge. In PDDL, states are represented as conjunctions (AND) of ground atomic fluents. Ground meaning no variables.
<br>PDDL uses <a data-href="Database Semantics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Semantics</a>, that is, it assumes both the closed-world assumption and the unique names assumption.
There are no universal or existential quantifiers in PDDL. Action Schema: A representation of an action as a family of ground actions. A schema consists of the action name, a list of all variables used in the schema, a precondition, and an effect. For example: A ground action is applicable in state if entails the precondition of . The result of action in state is state which is the set of fluents formed by starting with , removing the negated fluents in the effect of action , and adding the positive fluents. A planning domain is a set of action schemas, and a problem within a domain is defined with the addition of an initial state and a goal. The states in the search state space are ground states, and the applicable actions in a state are the grounded instantiations of the action schema. The applicable actions are determined by unifying the current state against the preconditions of each action schema. If the unification returns a possible substitution, then that substitution is applied to create a ground action. There may be multiple possible substitutions.
A strong heuristic is needed to improve the worst case time complexity of , where is the number of actions per state, and is the number of steps in the solution. In backward search, at each step we consider an action which unifies with one of the goal literals, but with no effect which negates a goal literal. For most problem domains, backward search keeps the branching factor lower than forward search, though it is harder to come up with good heuristics. <br>
SAT Based Planners: Translate a PDDL problem description into <a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a> by propositionalizing the goals and actions, adding simultaneous exclusion axioms, adding precondition axioms, defining the initial state, and adding successor state axioms. Partial-order planning is a planning approach as a graph rather than a linear sequence. In the graph, each node is an action, and directed edges represent that the predecessor action establishes the precondition of the successor action. Planning using a factored-representation (representing states as a set of variables with values) makes it possible to define domain-independent heuristics. Admissible heuristics can be derived by relaxing the original problem, and using the cost of a solution for the relaxed problem from a given state as the heuristic value. Problems can be relaxed by either adding more edges, or abstracting nodes together.
The 'Ignore-Preconditions' heuristic, for example, drops all preconditions from actions, thus, adding more edges.
The 'Ignore-Delete Lists' heuristic removes all negative literals from action schema effects, thus, allowing monotonic progress towards the goal.
State abstractions are a one-to-many mapping of ground states to abstract states. The simplest way to abstract states is to ignore some fluents. Forward pruning prunes promising actions, with the risk of potentially pruning the optimal solution. A preferred action may be defined by defining a relaxed problem, and solving it to get the relaxed plan. Then, a preferred action can be a step of the relaxed plan, or an action which achieves a precondition of the relaxed plan. A problem has serializable subgoals if there exists an order of subgoals that a planner can solve in that order without having to undo any of the previous subgoals. This is not necessarily an optimal plan. The subgoal independence assumption assumes that the cost of solving a conjunction (AND) of subgoals is the sum of the cost of solving each subgoal independently. Hierarchical Decomposition: The process of decomposing a complex problem into smaller components organized in a hierarchy. In a hierarchical task network, there is a set of actions called primitive actions, with a standard precondition effect schema. Higher level actions (HLA) have one or more possible refinements, into a sequence of actions, each of which may be a primitive action or another HLA.
If an HLA refinement contains only primitives, it is called an implementation of the HLA. The reachable states of an HLA in state , is the set of all states reachable from for any of the HLAs implementations.
The reachable set of a sequence of HLAs is the union of all reachable states obtained by applying in each reachable state of , where is the th HLA in the sequence.
Given these two definitions, a high-level plan achieves the goal if its reachable set intersects the set of goal states. An implementation of a high-level plan is the concatenation of implementations of each HLA in the plan. Writing precondition-effect schemas for the HLAs themselves make it easier to prove that a high-level plan achieves the goal.
The downward refinement property says that every high-level plan that claims to achieve the goal must have an implementation that does so. Angelic semantics is a type of nondeterminism where the behavior of a system varies based on optimistic choices made by an agent or the environment. In many cases we can only approximate the effect of an HLA due to it having infinite implementations. An optimistic description approximation may overstate the reachable set, while a pessimistic description may understate the reachable set. To solve a partially-observable problem, an agent will have to reason about its percepts. The percepts will be supplied from the sensors when acting, but during planning it will need a model of its sensors. For planning, we augment PDDL with the percept schema, for example: In a fully-observable environment, we would have a percept schema with no preconditions for each fluent in the environment. In sensorless and partially-observable problems, we have to switch to an open-world assumption, where if a fluent doesn't appear, then its value is unknown. Given a belief state , the agent can consider any action whose preconditions are satisfied by . Then, the general formula for updating given an applicable action in a deterministic environment is: Where is the physical transition model. This means that is simply the set of states , where each is the action applied to all states in the belief state . To construct , we must consider what happens to each literal in each physical state in when action is applied. For literals whose truth value is known in , the value in is computed by the add/delete list of action . If the literal's value is unknown, there are three options: If the action adds , then the fluent will be true in .
If the action removes , then it will be false in .
If the action doesn't change , then it'll remain unknown. The family of belief states is defined as a conjunction (AND) of literals is closed under updates defined by PDDL action schemas. If the belief state starts as a conjunction of literals, then any update will also yield a conjunction of literals. This is only true for action schemas with the same effect for all states that satisfy their precondition. Alternatively, a conditional effect can have different outcomes based on the state in which the action is applied. The syntax for a conditional effect is . When applied to a belief state , a conditional effect makes it so that is no longer in 1-CNF form, thus, introducing dependencies among fluents and increasing the complexity. Contingent planning is the generation of plans with conditional planning based on received percepts. Variables in these plans are typically assumed to be existentially quantified. Calculating the new belief state after an action and subsequent percept is done in 2 stages: The first step calculates the belief state after the action: Suppose that percept literals are received. If a percept has exactly one percept schema, , where is a conjunction (AND) of literals, then those literals can be put into the belief state alongside . If has multiple percept schemas, then we add the disjunction (OR) of the preconditions of each schema. This takes the belief state out of 1-CNF. Online planning involves interleaving action and planning. Replanning requires some form of execution monitoring to determine the need for a new plan. Replanning may be needed if the agent's model of the world is incorrect. The model for an action may have an inaccurate precondition or effect.
The model may lack provision for exogenous events, that is, events that originate from outside the system. Online agents have a choice of at least 3 different approaches to execution monitoring: Action Monitoring: Before performing an action, the agent verifies that all preconditions for that action still hold.
Plan Monitoring: Before performing an action, the agent verifies that the current plan still leads to a goal.
Goal Monitoring: Before performing an action, the agent checks to see if there is a better set of goals it could try to achieve. Scheduling refers to when and how long an action occurs. Resource constraints refer to when an agent has a limitation on the type or amount of resources required to perform a task. Job-Shop Scheduling Problem: A problem which consists of a set of jobs, each of which require a sequence of actions with ordering constraints among them. Each action has a duration and a set of resource constraints required by the action. A constraint specifies the type of resource, the quantity required, and whether it's reusable.
Actions can also produce resources.
A solution to a job-shop scheduling problem specifies start times for each action, and must satisfy all the temporal ordering and resource constraints.
The quality of a solution can be quantified using the makespan cost function, which is the total duration of the plan.
Aggregation groups identical objects together and is essential for reducing complexity. For example, a resource can be represented as instead of . To minimize makespan, we must find the earliest start time for all actions consistent with the ordering constraints. The ordering constraints can be represented as a directed graph. <br>The <a data-href="Critical Path Method" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Critical Path Method</a> (CPM) can be applied to this graph to determine the possible start times to the actions. A path through a graph representing a partial-order plan is a linearly ordered sequence of actions. The critical path is the path whose total duration is longest.
Actions that are off the critical path have a window of time in which they can be executed. ES is the earliest start time, while LS is the latest start time. The quantity LS-ES is known as the slack of an action. If an action has 0 slack, it is a critical task.
Together, the LS and ES times for all actions constitutes a solution for the problem. The minimum slack heuristic, on each iteration, schedules for the earliest possible start time, the unscheduled action which has all its predecessors scheduled and has the least slack. Uncertainty in an environment may be due to partial-observability or non-determinism. <br>
<a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>: The set of all states that the agent could possibly be in currently. Trying to use pure logic in sufficiently complex domains tends to fail due to either: Laziness: It is too much work to list the complete set of antecedents and consequents needed to form an exception-less rule.
Theoretical Ignorance: There is no complete theory for the domain.
Practical Ignorance: It is impractical to gather all the necessary information. <br>
This means that the agent's knowledge can, at best, a degree of belief in the relevant sentences. Degrees of belief are a value between 0 (impossibility) and 1 (certainty). Our main tool for dealing with degrees of belief is <a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> theory. The ontological commitments of probability theory and logic are identical: the world is made up of propositions, that is, sentences that are either true or false.
The epistemological commitments differ significantly. A logical agent believes a fact to be either true, false, or it holds no opinion. A probabilistic agent, on the other hand, assigns a numerical degree of belief to a fact. An outcome is a completely specified state, where all variables are assigned a value. An agent must have preferences among the different possible outcomes. <br><a data-href="Utility Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Theory</a> is used to represent and reason with preferences quantitively. <br>
Preferences, as expressed by utilities, combined with <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="54" to="67" origin-text="probabilities" class="internal-link virtual-link-a">probabilities</a> form the general theory for rational decision-making called <a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a>. The fundamental idea of decision theory is that an agent is rational if it chooses the action which yields the highest expected utility. This is called the principle of maximum expected utility.
A decision-theoretic agent's belief state represents the probabilities of world states alongside the possibilities. A possible world is a complete assignment of values to variables. The set of all possible worlds, , is called the sample space. The possible worlds, , are mutually-exclusive, meaning only one world can be true at a time; and exhaustive, meaning there is always a world that is true at any time. <br>A complete probability model specifies a probability for each possible world, denoted . The total probability for a sample space is 1. This is<a data-tooltip-position="top" aria-label="Kolmogorov's Axioms" data-href="Kolmogorov's Axioms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Kolmogorov's normalization axiom</a>. Events are subsets of the sample space. In logic, a set of worlds corresponds to a proposition.
Variables in probability theory are called random variables and their names begin with uppercase letters, while the values of variables begin with lowercase letters.
A probability distribution is a mathematical function which describes the likelihood of different outcomes for the domain of a random variable. The probability of each outcome is between 0 and 1 (inclusive), and the sum of probabilities of each outcome must sum to 1. <br>Discrete probability distributions describe the probability of each possible value in the domain of a discrete random variable and are described by a <a data-href="Probability Mass Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a>.
<br>Continuous probability distributions describe the probability of a continuous random variable. These distributions are characterized by a <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a> (PDF). The probability of a proposition is defined as the sum of the probabilities of the worlds in which it holds: Unconditional probabilities, also called priors, refer to the degree of belief in a proposition, in the absence of any other information. Though, most of the time, we have some other information called evidence, which allows us to calculate conditional probability. Conditional, or posterior probabilities quantify the likelihood of one event occurring, given that another has already occurred. This is denoted as , read as 'the probability of given ' and is defined as: The product rule states that . Joint probability refers to the likelihood of two or more events occurring simultaneously. The joint probability denotes the likelihood of all combinations of the values of the variables. This results in a table of probabilities called the joint probability distribution.
- A probability model is completely determined by the joint probability for all the random variables, this is called the full joint probability distribution. Probabilistic inference the computation of posterior probabilities for query propositions given evidence. We use the full joint distribution as the knowledge base for a probabilistic agent. Marginal probability is the likelihood of an outcome occurring irrespective of the outcome of other events. It is defined as the sum of joint probabilities of the event with all possible outcomes of other events. It is defined as: ; this process is called marginalization.
Using the product rule, we can replace with , obtaining a rule called conditioning. <br>
The denominator of a conditional probability can be viewed as a <a data-href="Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Normalization</a> constant for the distribution , ensuring that it sums to 1. We can use to denote such constants. Therefore: This means we can calculate without knowing the prior probability . A general probabilistic inference procedure can be defined as follows: We begin with the case where the query involves a single variable . Let denote the set of evidence variables who have values . Let denote the remaining unobserved variables. The query can be evaluated as: Where the summation is over all the possible combinations of values for the unobserved variables .
Given the full-joint distribution, this equation can answer probabilistic queries for discrete variables, though it scales poorly. For a domain described by boolean variables, it requires an input table of size and takes time to process. For this reason, the full-joint distribution in tabular form is rarely used in practice for building reasoning systems. Two events are said to be independent if the occurrence of one does not affect the probability of the occurrence of the other. Mathematically: Independence assertions are typically based on knowledge of the domain. If the complete set of variables can be divided into independent subsets, the full-joint distribution can be factored into separate joint distributions on those subsets. <br>
<a data-href="Bayes' Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayes' Theorem</a> states that: One can avoid calculating the prior probability of the evidence by instead computing a posterior (conditional) probability for each value of the query variable () and then normalizing the results. Bayes' theorem is useful for answering queries with one evidence variable, though it is no better than the full-joint distribution for variables. Conditional Independence: Describes a situation where two random variables are independent of each other with respect to a third variable: separates and because it is a direct cause of both of them.
For variables that are all conditionally independent given , the size of the representation grows as opposed to . The full-joint distribution of the pattern where a single cause directly influences a number of effects, all of which are conditionally independent given the cause is defined as: <br>This distribution is called the <a data-href="Naive Bayes Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Naive Bayes Model</a>. It is naive because it assumes that features are independent of each other.
To obtain the probability of the cause given some observed effects , with denoting the unobserved variables, the standard inference method from the joint distribution can be used: This means that for each possible cause, multiply the prior probability of the cause by the product of the conditional probabilities of the observed effects given the cause, then normalize the result.
The runtime of this calculation is linear in the number of observed effects and does not depend on the number of unobserved effects. <br>
<a data-href="Bayesian Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayesian Network</a>: A <a data-tooltip-position="top" aria-label="Directed Acyclic Graph" data-href="Directed Acyclic Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">directed, acyclic graphical model</a> which represents variables and their conditional dependencies. Nodes denote variables, and directed edges represent probabilistic dependencies. Bayesian networks can represent any full joint <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="192" to="203" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution, and can often do so very concisely. If there is an edge from to , then has a direct influence on and is said to be a parent of . This suggests that causes should be the parents of effects. Often, domain experts decide the topology of the graph. The conditional independence of two variables is indicated by the absence of a link between them.
Each node has associated probability information which quantifies the effect of the parents on the node using a finite number of parameters. Once the topology of the graph is laid out, we only need to specify the local probability information for each variable, in the form of a conditional distribution given its parents. The local probability information for a node takes the form of a conditional probability table (if the variable is discrete). Conditional Probability Table (CPT): A table where each row gives the conditional probability for each possible value of a node for a conditioning case. Each row must sum to 1. A conditioning case is a possible combination of values for the parent nodes.
A Boolean variable with parents has rows in its CPT. For Boolean variables, if we know the probability of true is , then the probability of false must be , therefore, we often omit the 2nd number in the CPT.
A node with no parents has 1 row which represents the prior probabilities of the node. Assume a Bayes net containing variables, . A general entry in the joint distribution is . The semantics of a Bayesian network defines each entry in the joint distribution as: Therefore, each entry in the joint distribution is the product of the appropriate elements of the local conditional distributions in the Bayes net. If a Bayes net is a representation of the full joint distribution, then it can also be used to answer any query, by summing all the relevant joint probability values, each calculated as the product of probabilities from the local conditional distributions. We can prove that the parameters are exactly the conditional probabilities . The conditional probabilities can be computed from the joint distribution as: Where represents the values of all variables other than and its parents. This allows us to rewrite the previous equation as: This equation implies certain conditional independence relationships which will be used later to guide the construction of the network topology. To construct a Bayes net, we first rewrite the entries in the joint distribution in terms of conditional probability using the product rule: Then we repeat this process, reducing each joint probability to a conditional probability and a joint probability on a smaller set of variables. We then end up with one big product called the chain rule: Therefore, according to the previous equation, for every variable in the network: <br>
Provided that . This condition is satisfied by the numbering of nodes in <a data-href="Topological Order" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Topological Order</a>, that is, any order consistent with the directed graph structure. This equation says that the Bayesian network is a correct representation of the domain only if each node is conditionally independent of its other predecessors in the node ordering, given its parents. We satisfy this condition with this methodology: Nodes: Determine the set of variables required to model the domain. Then, order them such that causes precede effects.
Links: For each node: Choose a minimal set of parents for from , such that equation 13.3 is satisfied. These should be all the nodes that directly influence .
For each parent, insert a link from the parent to .
Write the conditional probability table, . Because each node is connected only to earlier nodes, the graph is necessarily acyclic. Bayes nets also contain no redundant probabilities, since the only parent nodes are the ones which have a direct influence on the child. This makes it impossible to create a Bayesian network that violates the axioms of probability. Because Bayesian networks are sparse systems, they are much more compact than the full joint distribution. In a sparse (locally structured) system, each sub-component interacts directly with only a bounded number of other components. This is usually associated with linear complexity. Even in a locally structured domain, the Bayesian network will only be compact if the nodes are well-ordered. If we stick to a causal model, that is, models where we focus on casual rules instead of diagnostic rules, the resulting Bayes net is often more compact. Specifying the conditional probability tables for a fully connected network, where each variable has all its predecessors as parents, is just as complex as specifying the full joint distribution. For this reason, we often omit links even if a slight dependency does exist. The non-descendants property states that each variable is conditionally independent of its non-descendants, given its parents. The non-descendants property, in conjunction with the interpretation of the network parameters as conditional probabilities suffices to reconstruct the full joint distribution defined in equation 13.2.
Therefore, the semantics of the Bayes net can be viewed as defining a set of conditional independence properties, from which the full joint distribution can be derived from.
Another independence property implied by the non-descendants property is that: <br>A variable is conditionally independent of all other nodes in the network, given its <a data-href="Markov Blanket" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Blanket</a>. A node's Markov blanked is its parents, children, and children's parents. <br>
A more general conditional independence question is whether a set of nodes is conditionally independent of another set , given a set . To determine whether <a data-tooltip-position="top" aria-label="D-Separation" data-href="D-Separation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">D-separates</a> and : Consider just the ancestral subgraph consisting of , and their ancestors.
Add links between any unlinked pair of nodes that share a child. This results in the so-called moral graph.
Replace all directed links with undirected links.
If blocks all paths between and in the resulting graph, then d-separates and , therefore, is conditionally independent , given . Otherwise, the original Bayes net does not require conditional independence. Note that a node's Markov blanked d-separates it from all other variables. Relationships between parents and children are usually describable by a canonical distribution that fits some standard pattern. In such cases, the complete table can be specified just by naming the pattern and perhaps supplying a few parameters. Many Bayes net systems allow users to specify deterministic function using a general-purpose programming language. Context-Specific Independence (CSI): A conditional distribution exhibits CSI if a variable is conditionally independent of some of its parents given certain values of others. Bayes nets often implement CSI using if-then-else statements. <br>
<a data-tooltip-position="top" aria-label="Noise-based Logic" data-href="Noise-based Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Noisy logical relationships</a> allow for uncertainty or randomness when defining logical connections. The noisy-OR model allows for uncertainty about the ability of each parent to cause the child to be true. The model makes two assumptions: It assumes that the possible causes listed are exhaustive, if some are missing, a leak-node can be added that covers unmentioned causes.
It assumes that inhibition of each parent is independent of inhibition of any other parents. Given these assumptions, the child is false iff (if and only if) all of its true parents are inhibited. The probability of this is simply the product of the inhibition probabilities for each parent. pg.440 Peter. R. Norvig, Artificial Intelligence: A Modern Approach, Global Edition. ]]></description><link>https://emujakic.github.io/TechKB/textbooks/ai-a-modern-approach-summary.html</link><guid isPermaLink="false">TEXTBOOKS/AI A Modern Approach Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Propositional Logic]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-08-02Propositional logic is a branch of <a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a> that deals with propositions, which are statements that are either true or false. An example of a proposition is the sentence, "Tomorrow is Thursday", since it's either true or false.<br>
Propositional logic is <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonic</a>, meaning that when you add knowledge to a propositional <a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>, it cannot lead to the loss of previously established truths.Propositional logic is made up of:
Propositional Symbols: Symbols that start with an uppercase letter and refer to a proposition. For example, , , and are examples of propositional symbols. Each symbol represents a distinct statement that can be true or false. Individual symbols are commonly referred to as literals. A literal is negative if there is a negation applied to it (e.g. ), else, it's a positive literal.
Logical Connectives: Operators which combine propositional symbols to create complex sentences. The primary logical connectives include: Negation (NOT, ¬)
Conjunction (AND, ∧)
Disjunction (OR, ∨)
Implication (IMPLIES, →)
Biconditional (IF AND ONLY IF, ↔) Atomic Sentence: An atomic sentence consists of a single propositional symbol and represents a basic assertion.
Complex Sentence: A complex sentence is made up of propositional symbols connected by parenthesis and logical connectives. They are also called formulas.
Propositional logic is often seen as a precursor to more complex logic systems including:
<br><a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>: Extends propositional logic by introducing quantifiers and predicates, allowing for the representation of the relationships between objects.
<br><a data-href="Modal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modal Logic</a>: Incorporates modalities like possibility, necessity, or knowledge.
<br><a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a>: Allows for reasoning about change over time by introducing temporal operators.
<br><a data-href="Automated Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Automated Theorem Proving</a>: Uses propositional logic as the basis for many theorem proving techniques.
<br>Negation flips the truth value of the propositional symbol it is applied to. Negating gives , which can be understood in English as "not ". The <a data-href="Truth Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Truth Table</a> for negation is as follows:A conjunction of two conjuncts is true only if both of its conjuncts is true. This can be understood in English as "and", and is denoted in propositional logic with the symbol . The truth table for conjunction is as follows:A disjunction of two disjuncts is true if either of its disjuncts are true. This can be understood as the English word "or", meaning if one or the other is true, then the disjunction is true. Disjunction is denoted with the symbol . The truth table for disjunction is as follows:An Implication is a binary operator with its left-hand side being the premise, and the right-hand side being the conclusion. An implication states that if the premise is true, then the premise must be true. Implications can be thought of as if-then statements and are denoted with the symbols or . An implication is only false if its premise is true, while the conclusion is false. The truth table for implication is as follows:As shown in the truth table above, an implication is always true if its premise is false. This occurs because the sentence provides no information. It is like saying, "If , which is false, were true, then ". Since is false, the sentence holds no substantive meaning.
The concept of vacuous truth will be relevant later in the Mathematical Induction subsection, particularly in establishing base cases.A biconditional can be thought of as double implication, meaning both sides imply the other. Biconditionals are true only if both symbols are the same truth value. The symbols used to denote biconditional is or , and can be thought of in English as "if and only if". The truth table for a biconditional is:A NAND can be thought of as a negation applied to a conjunction, . A NAND is true as long as one of its operands it false. It's represented symbolically as or as , and has the following truth table:A XOR, or exclusive or, is true when exactly one of its operands is true. It can be thought of as the English word 'or', in the context of when only one thing or the other is the case. XOR is denoted using the symbol, and its truth table is as follows:A NOR can be thought of as a negation applied to an OR operator, . A NOR is true only when both of its operands are false and is represented symbolically as . The truth table for NOR is as follows: A XNOR can be thought of as a negation applied to the XOR gate, . Where a XOR is true only when both of its operands are different, a XNOR is true only when both of its operands are the same. It has the same truth table as a biconditional, which is as follows:The order of precedence of logical connectives is as follows:
Negation (NOT, ¬)
Conjunction (AND, ∧)
Disjunction (OR, ),
Implication (IMPLIES, →)
Biconditional (IF AND ONLY IF, ↔)
<br>Two sentences are said to be logically equivalent if they have the same truth table. This is denoted using the symbol. A <a data-href="Rule of Replacement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rule of Replacement</a> is a logical principle that allows for the substitution of one logical expression, for another, logically equivalent expression. Rules of replacement are used to construct proofs, simply logical expressions, and verify the correctness of logical statements. Propositional equivalence is vital for many domains, including:
<br>Digital Logic Design: Used to simplify expressions in <a data-href="Boolean Algebra" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Boolean Algebra</a>, thereby optimizing and simplifying digital circuits.
<br>Artificial Intelligence: Used to in <a data-href="Knowledge Representation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Representation</a> as well as inference algorithms, to derive new facts from an existing <a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>.
<br><a data-href="Control Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Control Theory</a>: Used for simplifying systems equations, analyze conditions, and modeling states and transitions.
Mathematical Proofs: Used to transform sentences into equivalent forms which are easier to prove.
The double negation law is a rule of replacement which states that, when negation is applied twice to an expression, the truth table for that expression remains the same. This is because the second negation 'cancels out' the first one, leaving only the original expression left.
The identity laws state that, any proposition conjoined with a true value, is logically equivalent to the proposition alone. For disjunction, any proposition disjoined with a false value, is logically equivalent to the proposition alone. This is because it both cases, the expression's truth value relies entirely on the value of the proposition.
The domination laws state that, any proposition conjoined with a false value is always false, and any proposition disjoined with a true value is always true. This is because, in the case of conjunction, the AND operation requires both operands to be true for the result to be true. Since one operand is false, the entire expression cannot be true, regardless of the value of the other operand. In the case of disjunction, the OR operation requires at least one operand to be true for the result to be true. Since one operand is true, the entire expression will always evaluate to true.
The idempotent laws state that a proposition conjoined or disjoined with itself is logically equivalent to the proposition alone. This means that applying conjunction or disjunction to a proposition with itself multiple times yields the same truth table as the original proposition.
The distributive laws describe how conjunction (AND) and disjunction (OR) interact with each other in propositional logic, allowing us to distribute one operation over the other.
The first distributive law states that a conjunction of with disjunction of and is logically equivalent to the disjunction of AND with AND R.
The second distributive law states that the disjunction of with the conjunction of and is logically equivalent to the conjunction of OR with OR .
De Morgan's Laws consist of two rules of replacement which define the relationship between disjunctions and conjunctions through negation.
De Morgan's first law states that the negation of a conjunction is logically equivalent to the disjunction of the negated conjuncts. This is directly equivalent to the definition of the NAND operator and can be seen as a direct implementation of De Morgan's first law.
De Morgan's second law states that the negation of a disjunction is logically equivalent to the conjunction of the negated disjuncts. This is directly equivalent to the definition of the NOR operator and can be seen as a direct implementation of De Morgan's second law.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" target="_self" rel="noopener noreferrer" from="4" to="15" origin-text="commutative" class="internal-link virtual-link-a">commutative</a> laws state that the order of operands in a conjunction and disjunction are logically equivalent.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/associative-property.html#_0" target="_self" rel="noopener noreferrer" from="4" to="15" origin-text="associative" class="internal-link virtual-link-a">associative</a> laws state that the grouping of operands in a conjunction or disjunction does not affect the truth value of expression.
A clause is a disjunction/conjunction of literals. When talking about clauses, usually it refers to a disjunctive clause, which is a logical expression formed by connecting literals with the OR operator.
The empty clause is a clause with no literals, commonly denoted as , , or . An empty disjunctive clause is always false, making it analogous to a contradiction. This is an important concept in proof by contradiction, as reaching an empty clause indicates that a contradiction has been proven.A Horn clause is a disjunctive clause with at most one positive literal.
Definite Clause: If a Horn clause has exactly one positive literal, it is a definite clause. For example, .
Goal Clause: If it has no positive literals, it is a goal clause. For example, .
A Horn clause can be represented in disjunctive form:
A Horn clause can also be represented in implicative form:
In both cases, is the only positive literal.<br>Horn clauses are computationally efficient for algorithms such as <a data-href="Resolution Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution Theorem Proving</a>, or for <a data-href="Forward/Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward/Backward Chaining</a>. This makes them the basis of many <a data-href="Logic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic Programming</a> languages, as well as for automated theorem proving or database querying.A sentence is considered to be in conjunctive normal form (CNF) if it's a conjunction (AND) of one or more clauses.
Every sentence in propositional logic can be converted into an equivalent CNF form using the following steps:
Implication/biconditional elimination (will be discussed later)
Moving Negations Inward using De Morgan's laws.
Double negation elimination
Using the distributive property to distribute OR over AND, for example: A sentence is considered to be in disjunctive normal form (DNF) if it is a disjunction (OR) of conjunctions (AND).
Every sentence in propositional logic can be converted to DNF in the following steps:
Implication/biconditional elimination
Moving Negations Inward using De Morgan's laws.
Double negation elimination
Using the distributive property to distribute AND over OR, for example: <br>In logic, an argument consists of a set of sentences called premises, which, if all are true, the conclusion sentence must follow. This is a form of reasoning called <a data-href="Deductive Reasoning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Deductive Reasoning</a> which uses general statements to derive specific conclusions.<br>Logical entailment, or logical consequence, refers to a relationship between premises and a conclusion. The conclusion is said to be entailed by the premises if there is no assignment of truth values such that the premises are true while the conclusion is false. In other words, entailment states that the conclusion follows the premises; whenever the premises are true, so is the conclusion. Entailment is closely related to the idea of <a data-tooltip-position="top" aria-label="Tautology" data-href="Tautology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">tautologies</a>, as tautologies represent statements that are universally true and can help establish the validity of entailments.
Entailment is represented symbolically as . For example: Valid: An argument is valid if its conclusion must follow its premises. Meaning that if the argument's premises are true, then the conclusion must be true as well, otherwise, the argument is invalid.
Sound: An argument is sound if its premises are true. If any of its premises are false, then the argument is unsound.
Satisfiable: A formula is satisfiable if there is at least one assignment of truth values which makes the formula true. If there is no assignment of truth values to make the formula true, then it is unsatisfiable, also called a contradiction.
If an argument is valid and sound, then its conclusion must be true. A sound argument is always valid, while a valid argument may be unsound.
Argument forms are patterns or templates that represent valid structures for arguments.
<br><a data-tooltip-position="top" aria-label="Syllogism" data-href="Syllogism" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Syllogisms</a> are argument forms that consist of two premises which support a conclusion.
Modus Ponens is a syllogistic argument form and rule of inference. It has the following structure:
If then .
.
Therefore, .
<br>The first two sentences are the arguments premises, and the final sentence is the conclusion. Modus Ponens is represented in <a data-href="Gentzen Notation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gentzen Notation</a> as:
Modus Tollens is another valid syllogistic argument form, similar to Modus Ponens. Though, unlike Modus Ponens, Modus Tollens affirms the negation of antecedent from the negation of the consequent. The structure of Modus Tollens is as follows:
If then .
.
Therefore, .
Like Modus Ponens, the first two sentences are the arguments premises, and the final sentence is the conclusion. Modus Tollens is represented symbolically as:
A disjunctive syllogism is a syllogistic argument form with a disjunction as one of its premises. It says that if one of the two disjuncts is true, and we know that one is false, then the other must be true. The structure of disjunctive syllogisms is as follows: or .
.
Therefore, .
In Gentzen notation:
<br>A hypothetical syllogism, also called the chain rule, is an argument form which uses the <a data-tooltip-position="top" aria-label="Transitive Property" data-href="Transitive Property" href="https://emujakic.github.io/TechKB/notes/math/transitive-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">transitive property</a> of implication. The structure of a hypothetical syllogism is as follows:
If then .
If then .
Therefore, if then .
Hypothetical syllogisms are represented in Gentzen notation as:
Rules of inference are logical rules that dictate derivations of conclusions from premises. Rules of inference differ from rules of replacement which state that two expressions are logically equivalent and can be freely swapped for one another.Implication introduction is a rule of inference which is used to express implications in terms of disjunctions. The rule is as follows:
Implication introduction is crucial when converting formulas to normal forms like CNF or DNF.Biconditional introduction is a rule of inference which allow for the inference of a biconditional from two implications:
This transformation can also be done the opposite way, called biconditional elimination, where two implications can be inferred from a biconditional:
and:
Conjunction introduction is a rule of inference which states that if two propositions are known to be true, then there conjunction is also known to be true:
Conjunction elimination states that if the conjunction of two propositions is known to be true, then either of its conjuncts is also known to be true:
Disjunction introduction is a rule of inference which states that if a proposition is known to be true, any disjunction it is a part of is also known to be true:
Disjunction elimination works the opposite way, stating that if you have a disjunction where each disjunct implies a third proposition , then can be inferred:
In propositional logic, proofs are essential for establishing the truth of a statement or the validity of an argument. A proof is a demonstration that a conclusion follows from a set of premises.<br><a data-tooltip-position="top" aria-label="Proof System" data-href="Proof System" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Proof Systems</a> are frameworks which provide the structure and methodology for constructing proofs. Proof systems are made up of:
Axioms: Foundational propositions that are accepted as true without having been proven.
Rules of Inference: Rules which provide the structure for how new statements can be derived from existing ones.
Syntax: The symbols used to represent statements.
Semantics: The interpretation of the meaning of the statements within the proof system.
The most common proof systems include Natural Deduction and Sequent Calculus.
A proof system is complete if every statement that is semantically true can be proven within that system. Otherwise, the system is incomplete.
A tautology is a propositional formula which is true for all possible assignments of truth values. A contradiction is a formula that is always false for all possible assignments of truth values.
Many proof techniques rely on tautologies and contradictions to prove that a particular formula entails another, or to prove that a particular formula is unsatisfiable. A direct proof is one of the most common and straightforward methods for deriving conclusions. The structure of a direct proof is as follows:
Identify the premises: Clearly state the premises which you will use to derive the conclusion.
State the conclusion: State the conclusion you wish to prove from the premises.
Logical deduction: Use the rules of inference to derive the conclusion from the premises step by step.
Proof by contradiction is an indirect proof that assumes the conclusion is false, then proves that this assumption leads to a contradiction. If assuming the conclusion is false does lead to a contradiction, then the conclusion must be true. The structure of a proof by contradiction is as follows:
Identify the premises: Clearly state the premises which you will use to derive the conclusion.
State the conclusion: State the conclusion you wish to prove from the premises.
Assume the negation: Assume that the conclusion is false.
Logical deduction: Use the rules of inference to derive a contradiction. A contradiction typically manifests as the empty sentence , which is a statement that is always false.
Conclude the Conclusion: If the assumption that the conclusion is false did lead to a contradiction, then the original conclusion must be true.
Proof by contrapositive is an indirect proof which proves a conclusion by proving its contrapositive. Since a sentence and its contrapositive are logically equivalent, proving one proves the other. The structure for a proof by contrapositive is as follows:
State the conclusion: State the conclusion you wish to prove, for example, .
Identify the contrapositive: Identify the contrapositive of the conclusion, for example, .
Logical deduction: Use the rules of inference to prove the contrapositive.
Conclude the Original Implication: If the contrapositive can be proven, then the original conclusion is also proven.
Resolution resolves two clauses which contain complementary literals. Two literals are complements of one another if one is the negation of the other (e.g. and ). Resolution is defined:
The above example resolves and resulting in a new clause called the resolvent.<br>
In the context of <a data-href="Resolution Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution Theorem Proving</a>, resolution is applied repeatedly to derive a contradiction, thereby proving that the negation of the statement that's being proven, is unsatisfiable. Ensuring all formulas are in Conjunctive Normal Form (CNF) dramatically improves the efficiency of resolution-based automated theorem proving.Mathematical induction is a proof technique for statements that apply to all natural numbers. It starts with proving the base case—typically or . Then the inductive hypothesis assumes that the formula is true for some arbitrary natural number , where . Then, using this assumption, the inductive step involves proving the formula holds for .
For example, let's say were trying to inductively prove : The base case, where , is:
Now, we assume the inductive hypothesis is true:
Using the assumption, the inductive step involves proving:
Using Algebra, we get:
Therefore, is true for all natural number greater than or equal to 1.
<br>Artificial Intelligence: Propositional logic is used for knowledge representation, <a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a>, and inference algorithms in AI agents.
<br><a data-href="Automated Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Automated Theorem Proving</a>: Uses propositional logic as the basis for many theorem proving techniques. Database Querying: Allows for complex queries using logical operators like AND, NOT, and OR. Queries can also utilize propositional conditional statements.
<br><a data-href="Satisfiability Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Satisfiability Problems</a>: Propositional logic is central to many SAT solvers. <br><a data-href="Digital Circuit Design" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Digital Circuit Design</a>: Propositional logic is used to design and analyze digital circuits. Digital <a data-tooltip-position="top" aria-label="Logic Gate" data-href="Logic Gate" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic Gates</a> correspond to the propositional logical operators.
<br><a data-href="Boolean Algebra" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Boolean Algebra</a>: Propositional logic serves as the basis of Boolean algebra, which is essential for circuit design and programming. Proof Techniques: Many proof techniques, including direct proof, proof by contradiction, and mathematical induction is built upon propositional logic.
<br><a data-href="Set Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Set Theory</a>: Used to express relationships and operations on sets.
<br>Logical Foundation: Propositional logic serves as the base for more complex logic systems like <a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>, modal logic, and temporal logic. Strategy Representation: Propositional logic can be used to design strategies for players. Fault Detection: Propositional logic can be employed to detect faults in systems by establishing logical relations between system states and expected behavior. S. J. Russell and P. Norvig,&nbsp;Artificial Intelligence: a Modern Approach, 4th ed. Upper Saddle River: Pearson, 2020.
Wikipedia Contributors, “Propositional calculus,”&nbsp;Wikipedia, Oct. 21, 2024.
<br>GeeksforGeeks, “Propositional Logic,”&nbsp;GeeksforGeeks, Jun. 19, 2015. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/engineering-mathematics/proposition-logic/" target="_self">https://www.geeksforgeeks.org/engineering-mathematics/proposition-logic/</a>
<br>C. Franks, “Propositional Logic,”&nbsp;Stanford Encyclopedia of Philosophy, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://plato.stanford.edu/entries/logic-propositional/" target="_self">https://plato.stanford.edu/entries/logic-propositional/</a>
<br>GeeksforGeeks, “Propositional Equivalences,”&nbsp;GeeksforGeeks, Jun. 22, 2015. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/engineering-mathematics/mathematical-logic-propositional-equivalences/" target="_self">https://www.geeksforgeeks.org/engineering-mathematics/mathematical-logic-propositional-equivalences/</a> (accessed Aug. 03, 2025).
<br>“Propositional Logic: Part I -Semantics 12-0.” Available: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.cas.mcmaster.ca/~lawford/2F03/Notes/prop.pdf" target="_self">https://www.cas.mcmaster.ca/~lawford/2F03/Notes/prop.pdf</a>
Wikipedia Contributors, “Rule of replacement,”&nbsp;Wikipedia, Mar. 03, 2025.
<br>GeeksforGeeks, “Idempotent Laws,”&nbsp;GeeksforGeeks, Sep. 08, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/idempotent-laws/" target="_self">https://www.geeksforgeeks.org/maths/idempotent-laws/</a> (accessed Aug. 03, 2025).
<br>Wikipedia Contributors, “De Morgan’s laws,”&nbsp;Wikipedia, Sep. 05, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" target="_self">https://en.wikipedia.org/wiki/De_Morgan%27s_laws</a>
<br>“1.2: Basic Notions - Propositions and Arguments,”&nbsp;Humanities LibreTexts, Sep. 26, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://human.libretexts.org/Bookshelves/Philosophy/Fundamental_Methods_of_Logic_(Knachel)/01%3A_The_Basics_of_Logical_Analysis/1.02%3A_Basic_Notions_-_Propositions_and_Arguments" target="_self">https://human.libretexts.org/Bookshelves/Philosophy/Fundamental_Methods_of_Logic_(Knachel)/01%3A_The_Basics_of_Logical_Analysis/1.02%3A_Basic_Notions_-_Propositions_and_Arguments</a>
<br>Dr. Trefor Bazett, “Logical Arguments - Modus Ponens &amp; Modus Tollens,”&nbsp;YouTube. May 23, 2017. Accessed: Sep. 02, 2022. [Online]. Available: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=NTSZMdGlo4g" target="_self">https://www.youtube.com/watch?v=NTSZMdGlo4g</a>
<br>Wikipedia Contributors, “Modus ponens,”&nbsp;Wikipedia, Jan. 20, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Modus_ponens" target="_self">https://en.wikipedia.org/wiki/Modus_ponens</a>
<br>“Disjunctive syllogism,”&nbsp;Wikipedia, Mar. 03, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Disjunctive_syllogism" target="_self">https://en.wikipedia.org/wiki/Disjunctive_syllogism</a>
<br>TrevTutor, “[Logic] Proofs and Rules #1,”&nbsp;<a data-tooltip-position="top" aria-label="http://www.youtube.com" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.youtube.com" target="_self">www.youtube.com</a>. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=m2j0TX-e8NY" target="_self">https://www.youtube.com/watch?v=m2j0TX-e8NY</a> (accessed Aug. 4, 2025).
Wikipedia Contributors, “Resolution (logic),”&nbsp;Wikipedia, May 28, 2025.
<br>“Introduction to Logic - Chapter 6,”&nbsp;Stanford.edu, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="http://intrologic.stanford.edu/chapters/chapter_06.html" target="_self">http://intrologic.stanford.edu/chapters/chapter_06.html</a> (accessed Aug. 05, 2025).
<br>Wikipedia Contributors, “Horn clause,”&nbsp;Wikipedia, Dec. 18, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Horn_clause" target="_self">https://en.wikipedia.org/wiki/Horn_clause</a>
Wikipedia Contributors, “Biconditional introduction,”&nbsp;Wikipedia, Aug. 01, 2023.
<br>“Tautology (logic),”&nbsp;Wikipedia, Sep. 17, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Tautology_(logic)" target="_self">https://en.wikipedia.org/wiki/Tautology_(logic)</a>
<br>“Introduction to Logic - Chapter 6,”&nbsp;Stanford.edu, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="http://intrologic.stanford.edu/chapters/chapter_06.html" target="_self">http://intrologic.stanford.edu/chapters/chapter_06.html</a>
Wikipedia Contributors, “Resolution (logic),”&nbsp;Wikipedia, May 28, 2025.
]]></description><link>https://emujakic.github.io/TechKB/notes/math/propositional-logic.html</link><guid isPermaLink="false">NOTES/Math/Propositional Logic.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sat, 02 Aug 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Mean]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-04The mean is a <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a> which attempts to summarize an entire dataset with a single number. It provides an illustration of the average value within a collection of values, making it essential for data analysis tasks. The mean can only be applied to <a data-href="Numerical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numerical Data</a> and not <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a>.<br>There are several types of means, each suited for different applications and fields. The most commonly used type is the arithmetic mean, which is calculated by summing all values and dividing by the number of observations. Other variations include the geometric mean, often used in financial contexts, the harmonic mean, which is beneficial in situations involving rates, and <a data-href="Root-Mean Square" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Root-Mean Square</a>, often used to measure the average voltage of an AC source.<br>Other common <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measures of Central Tendency</a> include the <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a>, which represents the middle value when the data is ordered, the <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a>, which identifies the most frequently occurring value in a set, and the <a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>, calculated as the average of the maximum and minimum values.<br>The arithmetic mean, commonly referred to as the average, is the sum of all values in a dataset divided by the number of values. It is the most widely used <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a>.There are two types of arithmetic means:
Sample Mean (): This represents the average value of a subset drawn from a larger population.
Group Mean (): This denotes the average of values within a specific category or attribute of a dataset.
The formula for calculating the sample mean is:Where: is the sample mean. is the number of values in the dataset. is the value of an individual object at index i.
<br>The arithmetic mean is commonly used in statistics to summarize datasets and provide a simple <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a>. Though an arithmetic mean is susceptible to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="46" to="54" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>, making it a less relevant metric for skewed datasets.<br>The trimmed mean is an arithmetic mean which discards a specified number of values from both ends of the value <a data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Range</a>. This is done to minimize the effect of <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a> on the mean, which can skew the results. The trimmed mean generally gives a more accurate representation of the center making it particularly useful in datasets prone to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="171" to="179" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> or extreme variations.<br>The <a data-href="Interquartile" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile</a> Mean is a specific type of trimmed mean that excludes the first and last <a data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartile</a> of ordered data. This results in the average of the middle 50% of values, offering a robust <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a> that is less influenced by extreme values.The formula for the trimmed mean is:The formula for the Interquartile mean is:<br>The trimmed mean is useful for analyzing skewed datasets, or datasets that have large amount of <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="96" to="104" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>. The trimmed mean offers a more stable measure that is less affected by outliers, making it valuable across various disciplines.In a weighted mean, instead of each value contributing equally like in an arithmetic mean, each value is assigned a weight (or coefficient) based on its significance. This allows for a more nuanced average that reflects the importance of different contributions. The arithmetic mean is a weighted mean where all weights are equal.The formula for calculating the weighted mean is:<br>The weighted mean is used when there is a need to model the relative importance of various attributes. This is commonly seen in artificial intelligence techniques such as <a data-href="Ensemble Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ensemble Machine Learning</a> algorithms.The harmonic mean calculates the average of a set of numbers that are defined in relation to some unit. It is calculated by taking the reciprocal of the arithmetic mean of the reciprocals of each value in the dataset.The formula for the harmonic mean is:<br>In <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a>, the harmonic mean is commonly used to calculate the <a data-href="F1 Score" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">F1 Score</a> of a model. It is also commonly used when analyzing speed and rates, such as finding the average speed of multiple segments of a journey.<br>The geometric mean calculates the average of a set of values by using the product of values rather than their sum. It involves multiplying all the values in the dataset and then taking the th root of that product, where is the total number of values in the set. The geometric mean is less susceptible to <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a> than the arithmetic mean since each value is part of a product rather than a sum.It is called the geometric mean because it's commonly used to find the side length of a square that has the same area as a rectangle with given side lengths. For example, if you have a rectangle with dimensions , the length of a square with equal volume is the geometric mean of and , which is .The formula for the geometric mean is:<br>The geometric mean is commonly used to calculate average rates of return on investments over time. The geometric mean can also be employed in <a data-href="Data Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Normalization</a> to normalize features, particularly when the values span multiple orders of magnitude.The root mean square (RMS), often denoted as , is an average of the magnitude of a set of values, and is and is also known as the quadratic mean. It is particularly useful in sets with values of both positive and negative numbers. RMS is calculated by taking the square root of the arithmetic average of the squared values.For a continuous function defined over the interval , the RMS is determined by squaring the function, averaging the squared values over the interval, and then taking the square root of that average.The formula for discrete RMS is:The formula for continuous RMS is:Root-mean square is widely used in signal processing the measure the power of AC currents and voltages. In regression analysis, the RMS error is a common metric for evaluation the performance of a model. RMS is also used to evaluate the performance of control systems regarding the stability and responsiveness to input signals. RMS can also be used in optimization algorithms for neural networks, such as RMSprop.<br>The mean of a <a data-href="Probability Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Distribution</a> represents the average outcome of some <a data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variable</a>. It is a specific type of weighted mean where each outcome of some random variable is weighted by the <a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> of that outcome occurring.<br>The <a data-href="Expected Value" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Expected Value</a> of a random variable, denoted as , is the weighted average of its possible outcomes. This concept is crucial in various fields, including artificial intelligence, especially in the context of stochastic task environments, where uncertainty plays a significant role.<br>For discrete <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="13" to="24" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions, the expected value is defined as:<br>Where is the <a data-href="Probability Mass Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a>.<br>For continuous <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="15" to="26" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions, the expected value is defined as:<br>Where is the <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a>.<br>The expected value is a fundamental metric in decision theory for AI systems, guiding the decision-making process by allowing agents to evaluate actions based on their expected rewards. Expected value is also important in game theory for evaluating strategies based on their expected payoffs. In <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a>, the expected value is used for supervised techniques, particularly for loss functions.<br>The mean of a continuous function over a specific interval is defined as the integral of the function divided by the length of the interval. <a data-href="Root-Mean Square" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Root-Mean Square</a> is a type of mean of a function.The formula for the mean of a continuous function defined over the interval is:<br>The mean of a function has many applications, such as in statistics, where it provides the <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a> for continuous random variables. It is also commonly applied in machine learning when performing feature engineering, such as when normalizing data.
<br>S. Glen, “Mean, <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="16" to="22" origin-text="Median" class="internal-link virtual-link-a">Median</a>, <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="24" to="28" origin-text="Mode" class="internal-link virtual-link-a">Mode</a>: What They Are, How to Find Them,”&nbsp;Statistics How To, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statisticshowto.com/probability-and-statistics/statistics-definitions/mean-median-mode/" target="_self">https://www.statisticshowto.com/probability-and-statistics/statistics-definitions/mean-median-mode/</a>
<br>Wikipedia contributors, “Mean,” Wikipedia, Apr. 25, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Mean" target="_self">https://en.wikipedia.org/wiki/Mean</a>
<br>J. Frost, “What is the Mean in Statistics?,”&nbsp;Statistics By Jim, Aug. 21, 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://statisticsbyjim.com/basics/mean_average/" target="_self">https://statisticsbyjim.com/basics/mean_average/</a>
J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Amsterdam ; Boston: Elsevier/Morgan Kaufmann, 2012.
<br>“Expectation | Mean | Average,”&nbsp;<a data-tooltip-position="top" aria-label="http://www.probabilitycourse.com" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.probabilitycourse.com" target="_self">www.probabilitycourse.com</a>. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.probabilitycourse.com/chapter3/3_2_2_expectation.php" target="_self">https://www.probabilitycourse.com/chapter3/3_2_2_expectation.php</a>
‌]]></description><link>https://emujakic.github.io/TechKB/notes/math/mean.html</link><guid isPermaLink="false">NOTES/Math/Mean.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Fri, 04 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Ernad Mujakic Knowledge Base]]></title><description><![CDATA[<a href="https://emujakic.github.io/TechKB/textbooks/ai-a-modern-approach-summary.html#_0" target="_self" rel="noopener noreferrer" from="0" to="28" origin-text="AI A Modern Approach Summary" class="internal-link virtual-link-a">AI A Modern Approach Summary</a><br><a href="https://emujakic.github.io/TechKB/textbooks/computer-organization-and-design-risc-v-edition-summary.html#_0" target="_self" rel="noopener noreferrer" from="0" to="55" origin-text="Computer Organization and Design RISC-V Edition Summary" class="internal-link virtual-link-a">Computer Organization and Design RISC-V Edition Summary</a><br><a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="0" to="4" origin-text="Mean" class="internal-link virtual-link-a">Mean</a>Number of Notes Total: 26
<br><a data-href="Computer Architecture" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Computer Architecture</a>
<br><a data-href="Digital Logic Design" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Digital Logic Design</a> Boolean Algebra <br><a data-href="Operating Systems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Operating Systems</a>
Embedded Systems
Computer Networks <br><a data-href="Programming Basics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Programming Basics</a>
<br><a data-href="Data Structures and Algorithms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Structures and Algorithms</a>
<br><a data-href="Software Engineering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Software Engineering</a>
<br><a data-href="Web Development" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Web Development</a>
<br><a data-href="Database Systems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Systems</a>
<br><a data-href="Theory of Computation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Theory of Computation</a> <br><a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a> Supervised Learning
Unsupervised Learning
Reinforcement Learning <br><a data-href="Deep Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Deep Learning</a> <br><a data-href="Neural Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Neural Network</a>
<br><a data-href="Convolutional Neural Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convolutional Neural Network</a>
<br><a data-href="Recurrent Neural Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recurrent Neural Network</a>
Self-Organizing Maps AI Tools <br><a data-href="PyTorch" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">PyTorch</a>
<br><a data-href="Scikit-Learn" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Scikit-Learn</a>
<br><a data-href="OpenCV" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">OpenCV</a>
<br><a data-href="Natural Language Processing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Natural Language Processing</a>
<br><a data-href="Computer Vision" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Computer Vision</a>
<br><a data-href="Robotics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Robotics</a> AI Algorithms Genetic Algorithms &amp; Evolutionary Methods
Bayesian Methods
Graph Algorithms Data Mining Data Preprocessing
Data Exploration
Data Mining Techniques <br><a data-href="Algebra" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Algebra</a>
Geometry
Trigonometry
Calculus
<br><a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a>
Statistics
Set Theory
Logics <br><a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a>
<br><a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/notes/math/first-order-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>
Predicate Logic
Temporal Logic
Modal Logic Linear Algebra
Discrete Mathematics Basic Electrical Concepts
Ohm's Law and Kirchhoff's Laws
Circuit Analysis
Electromagnetism
Analog Electronics
Digital Electronics
]]></description><link>https://emujakic.github.io/TechKB/index.html</link><guid isPermaLink="false">Index.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 07 Sep 2025 14:57:30 GMT</pubDate></item><item><title><![CDATA[Probability]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-02Probability is a branch of mathematics that deals with the analysis of events and their likelihood of occurring. The probability of an event, written is a number between 0 and 1, with 0 representing impossible and 1 representing certainty. Probability theory is a framework for making inferences of events that have elements of uncertainty or randomness within them or their outcomes. Random Experiment - any process or action that yields uncertain outcomes.Sample Space - commonly denoted as , is the set of all possible outcomes of a random experiment.Event - a subset of the sample space, representing specific outcomes.Power Set: The set of all possible subsets of a sample space, including the empty set or .The probability of an event is calculated by dividing the number of favorable outcomes by the total size of the sample space:Joint probability is the probability of 2 events happening simultaneously. If 2 events are independent, then their joint probability is:If 2 events are mutually exclusive, then the probability of one or the other occurring is equal to the sum of their probabilities:If 2 events aren't necessarily mutually exclusive, then you simply subtract their intersection in order to prevent counting the values in their intersection twice:The probability of one event occurring, given that another has already occurred, denoted as (the probability of A given B), is:Bayes' Theorem states that:
Non-Negativity: The probability of an event can never be negative: Normalization: The probability of an entire sample space is always 1: Countable Additivity: The probability of any countable sequence of disjoint (mutually exclusive) events, is equal to the sum of the probabilities of the individual events: Complement Rule: The complement of is denoted as or and is equal to: Mutual Exclusivity: If events A and B are mutually exclusive, that is they can never occur simultaneously, then: Empty Set: The probability of the empty set is always 0: <a data-href="Law of Total Probability" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Law of Total Probability</a>: If events are mutually exclusive and form a partition of the sample space, and is any event, the law of total probability states: <br><a data-href="Central Limit Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Central Limit Theorem</a>: States that if we take random samples from any population, the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> of those samples will form a normal distribution as the sample size gets sufficiently large.
<br><a data-href="Law of Large Numbers" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Law of Large Numbers</a>: States that the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="18" to="22" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the outcomes obtained from a large number of independent samples will converge to the expected value of the underlying probability distribution.
The factorial of a non-negative integer , denoted , is the product of all positive integers less than or equal to :
A permutation of a set is a possible arrangement of its elements, where the order of the elements matters. The number of possible permutations of elements from a set with total elements is given by:
A combination of a set is a selection of its elements where the order does not matter. The number of combinations of objects from a set with total elements is given by:
A random variable is a formalization that assigns a numerical value to the outcome of a random event or experiment. Random variables can be classified into two main types:
Discrete random variables take on a countable number of distinct values.
<br>Continuous random variables take on a infinite number of values within a <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="46" to="51" origin-text="range" class="internal-link virtual-link-a">range</a>.
Random variables are typically denoted by capital letters. For example, the set can represent the random variables 'heads' and 'tails' in a coin flip experiment. Their values are represented with their corresponding lowercase letter.A probability distribution is a mathematical function which describes the likelihood of different outcomes for the domain of a random variable. The probability of each outcome is between 0 and 1 (inclusive), and the sum of probabilities of each outcome must sum to 1.Discrete probability distributions describe the probability of each possible value in the domain of a discrete random variable.<br>The <a data-href="Probability Mass Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a> (PMF) gives the probability of each possible value of a random variable :The sum of all outcomes must sum to 1:Common Discrete Distributions:
<br><a data-href="Binomial Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Binomial Distribution</a> - Models the number of successes in a fixed amount of independent Bernoulli trials.
<br><a data-href="Bernoulli Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bernoulli Distribution</a> - Models the distribution of a random variable with two possible outcomes.
<br><a data-href="Poisson Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Poisson Distribution</a> - Models the probability of a number of events occurring in a fixed interval given a constant <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="95" to="99" origin-text="mean" class="internal-link virtual-link-a">mean</a> rate .
<br>Continuous probability distributions describe the probability of a continuous random variable. These distributions are characterized by a <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a> (PDF).<br>The probability density function describes the likelihood of a random variable taking on a value in a specific <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="111" to="116" origin-text="range" class="internal-link virtual-link-a">range</a>:where is the PDF and must satisfy:Common Continuous Distributions:
<br><a data-href="Normal Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Normal Distribution</a> - Also called the Gaussian distribution, represents a bell curve that is symmetric around the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="95" to="99" origin-text="mean" class="internal-link virtual-link-a">mean</a>.
<br><a data-href="Exponential Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Exponential Distribution</a> - Skewed to the right, often used to model the time or space between events in a <a data-href="Poisson Process" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Poisson Process</a>.
<br><a data-href="Uniform Distribution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Uniform Distribution</a> - Rectangle shape, indicating that all outcomes are equally likely.
<br>The expected value, or <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="23" to="27" origin-text="mean" class="internal-link virtual-link-a">mean</a>, of a random variable , denoted , is a <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">measure of central tendency</a> that represents the average outcome of a random variable. This concept is crucial in various fields, including artificial intelligence, especially in the context of stochastic (random) task environments, where uncertainty plays a significant role.For discrete probability distributions, the expected value is defined as:<br>Where is the <a data-href="Probability Mass Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a>.For continuous probability distributions, the expected value is defined as:<br>Where is the <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a>.Probability is the foundation of many Machine Learning algorithms such as:
<br><a data-href="Naïve Bayes Classifier" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Naïve Bayes Classifier</a> - a classification model based on Bayes' theorem with strong assumptions about feature independence.
<br><a data-href="Hidden Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hidden Markov Model</a> - A statistical model that represents a system which is assumed to be a <a data-href="Markov Process" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Process</a>.
Decision theory utilizes probability to make rational decisions under uncertainty. Relevant subject include:
<br><a data-href="Utility Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Function</a> - Assigning subjective desirability to outcomes.
<br><a data-href="Markov Decision Process" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Decision Process</a> - A framework for modeling sequential decision-making with stochastic outcomes.
A Bayesian Network is a probabilistic model implemented as a directed acyclic graph that represents a set of random variables and their conditional dependencies, as well as a set of conditional probability distribution tables.Game theory is a mathematical framework for modelling strategic interactions in a multi-agent interdependent environment. Probability is crucial for game theory, where agents face uncertainty over the actions of other players as well as the state of the game.<br>A Markov process is a mathematical model which models a stochastic environment that satisfies the <a data-href="Markov Property" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Property</a>. The Markov property states that the future state depends only on the present state and not past states. Markov processes have transition probabilities between states, quantifying the chance of moving from one state to another.<br>Bayesian statistics is subfield of <a data-href="Statistics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Statistics</a> that uses Bayes' theorem to update the probability of a hypothesis as new evidence becomes available. Bayesian methods are widely used in classification, regression, and decision-making algorithms.
Peter. R. Norvig, Artificial Intelligence: A Modern Approach, Global Edition. 2021.
<br>Wikipedia contributors, “Probability theory,” Wikipedia, Apr. 23, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Probability_theory" target="_self">https://en.wikipedia.org/wiki/Probability_theory</a>
<br>Wikipedia Contributors, “Probability axioms,”&nbsp;Wikipedia, Dec. 05, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Probability_axioms" target="_self">https://en.wikipedia.org/wiki/Probability_axioms</a>
<br>J. Soch, “Kolmogorov axioms of probability,”&nbsp;The Book of Statistical Proofs, Jul. 30, 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://statproofbook.github.io/D/prob-ax.html" target="_self">https://statproofbook.github.io/D/prob-ax.html</a> (accessed Mar. 16, 2025)
<br>Wikipedia Contributors, “Factorial,”&nbsp;Wikipedia, Oct. 18, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Factorial" target="_self">https://en.wikipedia.org/wiki/Factorial</a>
<br>Wikipedia Contributors, “Permutation,”&nbsp;Wikipedia, Sep. 22, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Permutation" target="_self">https://en.wikipedia.org/wiki/Permutation</a>
<br>“Bayesian statistics,”&nbsp;Wikipedia, May 29, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Bayesian_statistics" target="_self">https://en.wikipedia.org/wiki/Bayesian_statistics</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/probability.html</link><guid isPermaLink="false">NOTES/Math/Probability.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Wed, 02 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[First-Order Logic]]></title><description><![CDATA[Author: <a data-href="Ernad Mujakic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ernad Mujakic</a>
Date: 2025-08-29<br>First-order logic (FOL), also known as predicate logic, is a formalism which builds upon <a data-tooltip-position="top" aria-label="Propositional Logic" data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">propositional logic</a> by adding predicates, functions, variables, and quantifiers. The term "first-order" refers to the types of entities that can be quantified over. First-order logic only allows for the quantification over variables, while higher-order logics can quantify over predicates or functions.
S. Russel and P. Norvig,&nbsp;Artificial intelligence: A Modern approach, 4th ed. Prentice Hall, 2021
<br>Stanford Online, “Logic 7 - First Order Logic | Stanford CS221: AI (Autumn 2021),”&nbsp;YouTube, May 31, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=Z-O0Q3_oTJM" target="_self">https://www.youtube.com/watch?v=Z-O0Q3_oTJM</a> (accessed Aug. 29, 2025)
<br>“First-order logic,”&nbsp;Wikipedia, Nov. 03, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/First-order_logic" target="_self">https://en.wikipedia.org/wiki/First-order_logic</a>
<br>GeeksforGeeks, “FirstOrder Logic in Artificial Intelligence,”&nbsp;GeeksforGeeks, Jun. 03, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/artificial-intelligence/first-order-logic-in-artificial-intelligence/" target="_self">https://www.geeksforgeeks.org/artificial-intelligence/first-order-logic-in-artificial-intelligence/</a>
<br>Artificial Intelligence - First-order Logic,”&nbsp;Tutorialspoint.com, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.tutorialspoint.com/artificial_intelligence/artificial_intelligence_first_order_logic.htm" target="_self">https://www.tutorialspoint.com/artificial_intelligence/artificial_intelligence_first_order_logic.htm</a> (accessed Aug. 29, 2025)
]]></description><link>https://emujakic.github.io/TechKB/notes/math/first-order-logic.html</link><guid isPermaLink="false">NOTES/Math/First-Order Logic.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Fri, 29 Aug 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Turing Test]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-02A Turing test is a benchmark proposed by Alan Turing for evaluating a machine's ability to exhibit intelligence that is indistinguishable from that of a human. The test involves three participants, a human interrogator, a human respondent, and a machine. The interrogator communicates with both the human and machine via text, if the judge is unable to confidently identify which agent is the human and which is the machine, then the machine passes the Turing test. The result does not depend on the machine's ability to respond correctly, , only on how close the machine's language resembles human natural language. The CAPTCHA system is a famous implementation of a Turing test.To pass a Turing test a machine must have <a data-href="Natural Language Processing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Natural Language Processing</a> and generating abilities. The machine also needs some form of <a data-href="Knowledge Representation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Representation</a> to be able to keep track of conversation, as well as <a data-href="Reasoning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reasoning</a>, so that the machine demonstrates some form of rationality to the interrogator.<br>There is an extension of the Turing test known as the total Turing test, where the machine has to also exhibit human sensory abilities and physical interactions. In this instance, the machine would also need robust <a data-href="Robotics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Robotics</a>, <a data-href="Computer Vision" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Computer Vision</a>, <a data-href="Speech Recognition" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Speech Recognition</a>, navigation, and physical manipulation capabilities as well as a physical appearance that is indistinguishable from a human.One of the strengths of the Turing test lies in its simplicity. The test is straightforward to implement and understand which encourages broader participation in the realm of AI research.The Turing test is particularly versatile, allowing it to be applied to various forms of AI models, making it relevant across sub-disciplines within artificial intelligence research. The evaluation metrics of the test are also simple to expand or contract if specific capabilities would like to be included or excluded, such as computer vision or robotics. This allows researchers to tailor their assessment based on the goals of their project, rather than trying to conform to specific parameters of the test.Due to its subjective nature, the Turing Test is susceptible to human variability, as different interrogators may perceive specific behaviors as "human-like" or intelligent in varying ways. This inherent subjectivity can lead to inconsistent results, which undermines the test's reliability as a benchmark for evaluating artificial intelligence systems. As a result, the effectiveness and usefulness of the Turing test as a measure for machine intelligence has been heavily scrutinized by various researchers in the field of AI.Since the Turing Test focuses primarily on actions and behaviors, it overlooks the underlying processes that lead to the formulation of those behaviors, raising questions about whether those processes truly reflect intelligence. Many computer scientists argue that analyzing actions and behaviors alone is insufficient for determining whether a machine possesses intelligence. This critique emphasizes the need for a more comprehensive evaluation that considers not only observable outputs but also the mechanisms which deliver those outputs.Some critics of the Turing Test argue that the focus of AI research should be on augmenting or improving human behavior rather than merely mimicking it. They point out that certain human behaviors are inherently unintelligent, while some intelligent behaviors may be fundamentally inhuman. For example, a machine might deliberately avoid providing a correct answer to a challenging mathematical question to avoid raising suspicion with the interrogator. Some believe that this approach represents a misguided use of research efforts, diverting attention from the potential of AI to enhance human capabilities and solve complex problems.
<br>Wikipedia contributors, “Turing test,” Wikipedia, Jun. 24, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Turing_test#Tractability_and_simplicity" target="_self">https://en.wikipedia.org/wiki/Turing_test#Tractability_and_simplicity</a>
<br>GeeksforGeeks, “Turing Test in artificial intelligence,” GeeksforGeeks, Sep. 16, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/artificial-intelligence/turing-test-artificial-intelligence/" target="_self">https://www.geeksforgeeks.org/artificial-intelligence/turing-test-artificial-intelligence/</a>
Peter. R. Norvig, Artificial Intelligence: A Modern Approach, Global Edition. 2021.
]]></description><link>https://emujakic.github.io/TechKB/notes/ai/turing-test.html</link><guid isPermaLink="false">NOTES/AI/Turing Test.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Wed, 02 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Euclidean Distance]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-17The Euclidean distance is the most popular <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> that quantifies the dissimilarity between <a data-href="Numerical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numerical Data</a>. It represents the straight-line distance between two points in Euclidean space and is calculated using the <a data-href="Pythagorean Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pythagorean Theorem</a>. Let and be two data objects described by numerical attributes. The Euclidean distance between these two objects is: This formula computes the square root of the sum of the squared differences of each corresponding attribute, providing a measure of the straight-line distance in the multidimensional space.
<br>Positive: Like any other distance metric, the <a data-tooltip-position="top" aria-label="Range" data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">range</a> of the Euclidean distance is where a 0 distance indicates that the two points are at the same location.
Symmetric: The Euclidean distance is symmetric, meaning <br><a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>: The Euclidean distance obeys the triangle inequality, which states that the distance from to is always less than or equal to the distance from to plus the distance from to . Meaning that taking a detour through a third point cannot result in a shorter distance than a direct path from to .
The squared Euclidean distance is computed as only the sum of squared differences:<br>The squared Euclidean distance amplifies greater distances more so then the standard Euclidean distance, and is faster and easier to compute. This makes it more desirable in problems where significant distances should be penalized harsher, such as in <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a> or <a data-href="Outlier Detection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Outlier Detection</a>. Though, the squared Euclidean distance does not obey the triangle inequality.<br>Squared Euclidean distance is a <a data-href="Convex Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convex Function</a>, which makes it more desirable in optimization theory since it permits the use of <a data-href="Convex Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convex Analysis</a>.<br><a href="https://emujakic.github.io/TechKB/notes/math/least-squares.html#_0" target="_self" rel="noopener noreferrer" from="0" to="13" origin-text="Least squares" class="internal-link virtual-link-a">Least squares</a> is an optimization technique that attempts to find the function which minimizes the sum of the square Euclidean distances between the observed and predicted values. This method is widely used in <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a>, particularly in <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> analysis.<br>Divergence is a kind of distance measure that applies to <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="57" to="68" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions. The squared Euclidean distance is the simplest divergence measure.<br>Other common divergence measures include <a data-href="Kullback–Leibler Divergence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Kullback–Leibler Divergence</a> and <a data-href="Jensen-Shannon Divergence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jensen-Shannon Divergence</a>.
<br>Clustering: Euclidean distance is used in clustering algorithms such as <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a> to measure distance between data points.
<br><a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>: Classification algorithms like <a data-href="K-Nearest-Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest-Neighbors</a> may utilize Euclidean distance to classify data points based on the label of their nearest neighbors. <br><a data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outlier</a> Detection: The Euclidean or squared Euclidean distance can be used to identify data points which deviate significantly from the rest of the dataset.
<br>Multivariate Analysis: Euclidean distance can be used in techniques like <a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a> or <a data-href="Multidimensional Scaling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Multidimensional Scaling</a> to measure the distance between points with multiple dimensions.
<br>Least Squares Method: The Euclidean distance is a key step for the method of <a href="https://emujakic.github.io/TechKB/notes/math/least-squares.html#_0" target="_self" rel="noopener noreferrer" from="57" to="70" origin-text="least squares" class="internal-link virtual-link-a">least squares</a>, which is commonly used to optimize regression problems.
<br>Divergence: Squared Euclidean distance is a simple measure of divergence, allowing you to compare <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="88" to="99" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions.
Optimization: Squared Euclidean distance is preferred in optimization theory due to its smoothness and convexity, permitting the use of convex analysis. <br>Path Planning: Euclidean distance can be used for calculating the shortest path between points. It is also an <a data-href="Admissible" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Admissible</a> and <a data-href="Consistent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Consistent</a> <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a> in search algorithms such as <a data-href="A* Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">A* Search</a>.
<br>Localization: in <a data-href="Simultaneous Localization and Mapping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simultaneous Localization and Mapping</a> problems, the Euclidean distance can be used to determine a robot's position relative to known landmarks. Image Recognition: Euclidean distance is used to compare feature vectors in images, aiding in object recognition.
Image Segmentation: Euclidean distance is used to measure similarities between pixel values in clustering-based image segmentation.
Other common distance measures include:
<br><a data-href="Chebyshev Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev Distance</a>: The maximum absolute difference between 2 vectors across all dimensions.
<br><a data-href="Minkowski Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minkowski Distance</a>: A generalized distance measure that is defined by a parameter whose common values are the <a href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" target="_self" rel="noopener noreferrer" from="29" to="47" origin-text="Manhattan distance" class="internal-link virtual-link-a">Manhattan distance</a>, Euclidean distance, and Chebyshev distance.
<br><a data-href="Manhattan Distance" href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Manhattan Distance</a>: The shortest distance between 2 vectors using only 90° movements.
<br><a data-href="Jaccard Index" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jaccard Index</a>: Used to compare sets and is defined as the size of the intersection of 2 sets, over the size of their union. J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Amsterdam ; Boston: Elsevier/Morgan Kaufmann, 2012.
<br>GeeksforGeeks, “Euclidean Distance,”&nbsp;GeeksforGeeks, Mar. 13, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/euclidean-distance/" target="_self">https://www.geeksforgeeks.org/maths/euclidean-distance/</a>
<br>Wikipedia Contributors, “Euclidean distance,”&nbsp;Wikipedia, Apr. 01, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Euclidean_distance" target="_self">https://en.wikipedia.org/wiki/Euclidean_distance</a>
<br>“<a href="https://emujakic.github.io/TechKB/notes/math/least-squares.html#_0" target="_self" rel="noopener noreferrer" from="1" to="14" origin-text="Least squares" class="internal-link virtual-link-a">Least squares</a>,”&nbsp;Wikipedia, Dec. 19, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Least_squares" target="_self">https://en.wikipedia.org/wiki/Least_squares</a>
<br>Maarten Grootendorst, “9 Distance Measures in Data Science | TDS Archive,”&nbsp;Medium, Feb. 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/data-science/9-distance-measures-in-data-science-918109d069fa" target="_self">https://medium.com/data-science/9-distance-measures-in-data-science-918109d069fa</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html</link><guid isPermaLink="false">NOTES/Math/Euclidean Distance.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Thu, 17 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Mode]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-08The mode is a <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a> which represents the most frequently occurring value in a dataset or population. The mode is particularly versatile since it can be applied to both <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> and <a data-href="Numerical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numerical Data</a>.
Unimodal: A dataset with only one mode.
Bimodal: A dataset with exactly two modes.
Multimodal: A dataset with three or more modes.
<br>In a discrete <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="14" to="25" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution, the mode is the value that has the highest probability of occurring.<br>In a continuous <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="16" to="27" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution, the mode is the value at which the <a data-href="Probability Density Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probability Density Function</a> reaches its maximum. It represents the peak of the distribution.<br>Other common <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measures of Central Tendency</a> include the <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a>, which represents the middle value when the data is ordered, the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a>, which represents the average value of a population, and the <a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>, calculated as the average of the maximum and minimum values.
J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Mode in Statistics | Definition, Formula, How to Calculate Mode,”&nbsp;GeeksforGeeks, Sep. 20, 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/what-is-mode/" target="_self">https://www.geeksforgeeks.org/maths/what-is-mode/</a>
<br>Wikipedia Contributors, “Mode (statistics),”&nbsp;Wikipedia, Oct. 10, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Mode_(statistics)" target="_self">https://en.wikipedia.org/wiki/Mode_(statistics)</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/mode.html</link><guid isPermaLink="false">NOTES/Math/Mode.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 08 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Outlier]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-08Outliers are data points that differ significantly from the other observations in a dataset. Outliers may occur due to measurement or recording error, or could possibly represent an important anomaly warranting further analysis. There is no fixed definition of what constitutes as an outlier, typically, specific domain knowledge is usually necessary to understand whether a specific observation is an outlier, or is a natural phenomenon of the dataset.
Measurement Error: Outliers may occur due to user error in the data collection process, or could occur due to errors in autonomous systems, such as sensor failure.
Natural Variation: Outliers may represent perfectly legitimate values that are an inherent part of the naturally occurring variations in the underlying domain of the dataset.
Anomaly: Outliers may represent unusual behavior, such as fraudulent transactions, which warrant further investigation and analysis. Outliers can have a significant impact on various statistical measures, such as <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a>, <a data-href="Standard Deviation" href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a>, or <a data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Range</a>.
<br>Outliers could also hinder the performance of some machine learning models such as <a data-href="Logistic Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logistic Regression</a> or <a data-href="K-Nearest-Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest-Neighbors</a>. Global Outliers: A global outlier deviates significantly from the entire population globally.
Collective Outliers: A group or subset of data points that collectively deviate considerably from the overall distribution. Typically, require special techniques to detect.
Contextual/Local Outliers: Data points whose value deviate significantly relative to other data points within the same "context." Contextual outliers may not be considered outliers when considered globally, meaning they need special attention to be properly detected and analyzed.
While the terms outliers and extreme values may be used interchangeably, they have distinct definitions in statistics:
Outlier: is a data point that varies significantly from the rest of the dataset.
Extreme values: values that reside at the outer edges of the dataset, representing the highest and lowest points in a dataset. Extreme values may be outliers, or they be a natural part of a distribution.
<br>Z-score, sometimes called the standard score, measures how many <a data-tooltip-position="top" aria-label="Standard Deviation" data-href="Standard Deviation" href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Standard Deviations</a> a data object is from the <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a> of the distribution. A positive z-score indicates the values is greater than the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="82" to="86" origin-text="mean" class="internal-link virtual-link-a">mean</a>, while a negative score indicates it is less than the mean.Mathematically, the z-score is defined as:Where: is the z-score. is the given data value.
<br> is the population <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="19" to="23" origin-text="mean" class="internal-link virtual-link-a">mean</a>.
<br> is the population <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="20" to="38" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a>.
The z-score is commonly used to detect outliers by flagging any values that are outside a specified threshold (commonly -3 and 3).<br>The Interquartile <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="18" to="23" origin-text="Range" class="internal-link virtual-link-a">Range</a> (IQR) is a measure of statistical dispersion that represents the range within which the central 50% of the data points lie.Mathematically, the IQR is defined as:Where:
<br> is the value of the 3rd <a data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartile</a>.
<br> is the value of the 1st <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="25" to="33" origin-text="Quartile" class="internal-link virtual-link-a">Quartile</a>.
The IQR is commonly used to detect outliers by flagging any values that are outside of a specified boundary, typically:
Lower Bound: Upper Bound: Any data point below the lower bound or above the upper bound is considered an outlier.
<br>K-Nearest Neighbors is a supervised machine learning algorithm which can be used for both classification and regression tasks. The algorithm relies on <a data-tooltip-position="top" aria-label="Distance Metric" data-href="Distance Metric" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Metrics</a> such as <a data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean Distance</a>, <a data-href="Manhattan Distance" href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Manhattan Distance</a>, or <a data-href="Minkowski Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minkowski Distance</a> to find the "-nearest neighbors" of a data object, where is a parameter indicating the number of neighbors to consider when making a prediction.
<br>Regression: For regression tasks, the algorithm takes the average values of the k-nearest-neighbors of the data object, where the neighbors come from the training set. Then the <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a> of the neighbors' values is the predicted value for the object.
Classification: For classification tasks, a majority vote among the object's k-nearest-neighbors is taken to determine the category for the given data object.
K-nearest-neighbors is used to detect outliers by assigning an outlier score to a data object, which is done by measuring the distance of an object from its nearest neighbors. Though, this approach is not effective for collective outliers.DBSCAN is a density-based clustering algorithm that clusters data based on the density of data points. DBSCAN excels at identifying an arbitrary number of clusters, and can handle nested clusters of arbitrary shapes.
Two parameters are chosen, represents the radius within which to classify neighbors; and minPts, which represents the minimum number of neighbors within to classify the point as a "core point."
A data point is considered a core point if the amount of other data points that falls within its radius is at least minPts.
After all core points are identified, for each core point, create a cluster of the core point and all the points within its radius.
Expand the cluster by iterating through all reachable points and adding them to the cluster if they're core points.
Points that are not reachable from any core points are labelled as noise or outliers.
DBSCAN is popular algorithm for anomaly detection, since outliers are detected based on relative density of data.<br>One straightforward method for dealing with outliers is simply to remove them from the dataset. This approach if effective as long as outliers are not relevant to the analysis, such as the case where the focus is not on <a data-href="Anomaly Detection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Anomaly Detection</a>.Transformations can be applied to the data to minimize the effect of outliers. Some popular techniques include:
<br><a data-href="Scaling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Scaling</a>: Adjusting the <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="16" to="21" origin-text="range" class="internal-link virtual-link-a">range</a> of the data to reduce the influence of extreme values. This includes methods such as <a data-href="Min-Max Scaling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Min-Max Scaling</a> or <a data-href="Z-Score Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score Normalization</a>.
<br><a data-href="Winsorization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Winsorization</a>: Replacing outlier values with the nearest value within a specific percentile range. For example, any values outside the middle 95% percentile are replaced with the nearest values within that range.
<br><a data-href="Log Transformation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Log Transformation</a>: Applying logarithmic transformations to reduce <a data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Variance</a> and make the data more normally distributed.
<br>Another approach to handling outliers is explicitly modeling them. This can be done by adding a new <a data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Binary Data</a> attribute that specifies whether a given data object is an outlier or not.
J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>I. Cohen, “Outlier Detection &amp; Analysis: The Different Types of Outliers,”&nbsp;Anodot, Feb. 25, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.anodot.com/blog/quick-guide-different-types-outliers/" target="_self">https://www.anodot.com/blog/quick-guide-different-types-outliers/</a>
<br>GeeksforGeeks, “Types of Outliers in Data Mining,”&nbsp;GeeksforGeeks, Jul. 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/data-analysis/types-of-outliers-in-data-mining/" target="_self">https://www.geeksforgeeks.org/data-analysis/types-of-outliers-in-data-mining/</a> (accessed Jul. 08, 2025).
<br>S. Glen, “Outliers: Finding Them in Data, Formula, Examples. Easy Steps and Video,”&nbsp;Statistics How To. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statisticshowto.com/statistics-basics/find-outliers/" target="_self">https://www.statisticshowto.com/statistics-basics/find-outliers/</a>
<br>Wikipedia Contributors, “Outlier,”&nbsp;Wikipedia, Apr. 07, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Outlier" target="_self">https://en.wikipedia.org/wiki/Outlier</a>
<br>GeeksforGeeks, “How to Detect Outliers in Machine Learning,”&nbsp;GeeksforGeeks, Jan. 12, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/machine-learning/machine-learning-outlier/" target="_self">https://www.geeksforgeeks.org/machine-learning/machine-learning-outlier/</a> (accessed Jul. 10, 2025).
<br>Wikipedia Contributors, “Standard score,”&nbsp;Wikipedia, Sep. 12, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Standard_score" target="_self">https://en.wikipedia.org/wiki/Standard_score</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/outlier.html</link><guid isPermaLink="false">NOTES/Math/Outlier.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 08 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quantile]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-16Quantiles are points in a dataset which divide the dataset into equal parts. Some examples of quantiles include the:
<a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a>: which divides the dataset into two equal parts;
<br><a data-tooltip-position="top" aria-label="Quartile" data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartiles</a>: which divide the dataset into four equal parts; and <br><a data-href="Percentiles" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percentiles</a>: which divide the dataset into 100 equal parts.
<br><img alt="Quartiles &amp; Quantiles | Calculation, Definition &amp; Interpretation" src="https://www.scribbr.com/wp-content/uploads/2022/05/Quartiles-probability-distribution.webp" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.scribbr.com/statistics/quartiles-quantiles/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.scribbr.com/statistics/quartiles-quantiles/" target="_self">Quartiles &amp; Quantiles | Calculation, Definition &amp; Interpretation</a>Q-quantiles are the values which divide a dataset into equal (or nearly equal) parts. The 100-quantiles (percentiles), for example, divide the dataset into 100 parts.To divide a dataset into equal parts:
Sort the dataset in ascending order.
Calculate the position of the th quantile using: <br>If is an integer, the quantile is the value at that position in the sorted dataset. If is not an integer, <a data-href="Interpolate" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interpolate</a> it, that is, round it up, and take the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> of the values at positions and .
NumPy has multiple functions for computing quantiles including:
numpy.percentile(): Which takes a dataset and percentile (e.g. 50) as arguments, and returns the value at that percentile.
numpy.quantile(): Which takes a dataset and a decimal value representing the percentile (e.g. 0.50) as input, and returns the value at that quantile.
<br>Quantiles are commonly used to summarize the distribution of a dataset, and is commonly used as both a <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">measure of central tendency</a> and a <a data-href="Measure of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measure of Dispersion</a>.<br>Quantiles are commonly used to identify <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="40" to="48" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>. One method involves flagging any observations that are more than 1.5 times the <a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a> (IQR) above the third <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="23" to="31" origin-text="quartile" class="internal-link virtual-link-a">quartile</a> or below the first quartile.
<br>
<a data-href="Box Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box Plot</a>: Visualizes the <a data-href="Five-Number Summary" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Five-Number Summary</a> of a dataset, where the box represents the IQR, the line in the box is the <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a>, the "whiskers" represent the 25% of the data below and above the first and third <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="83" to="91" origin-text="quartile" class="internal-link virtual-link-a">quartile</a> respectively, and the lines at the edge of each whisker represents the minimum and maximum values. <br>
<a data-href="Q-Q Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Q-Q Plot</a>: A comparative visualization method which plots the quantiles of two distributions against each other, where typically, a real dataset is plotted against a theoretical dataset (usually a normal distribution). <br>
<a data-href="Violin Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Violin Plot</a>: Overlays density curves over a box plot, where the width of the curve indicates the density of data points at specific values. J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Quantiles in Machine Learning,”&nbsp;GeeksforGeeks, Mar. 12, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/data-science/quantiles-in-machine-learning/" target="_self">https://www.geeksforgeeks.org/data-science/quantiles-in-machine-learning/</a>
<br>“Quantile,”&nbsp;Wikipedia, Dec. 12, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Quantile" target="_self">https://en.wikipedia.org/wiki/Quantile</a>
<br>Atlassian, “A Complete Guide to Violin Plots,”&nbsp;Atlassian. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.atlassian.com/data/charts/violin-plot-complete-guide" target="_self">https://www.atlassian.com/data/charts/violin-plot-complete-guide</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/quantile.html</link><guid isPermaLink="false">NOTES/Math/Quantile.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Wed, 16 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://www.scribbr.com/wp-content/uploads/2022/05/Quartiles-probability-distribution.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.scribbr.com/wp-content/uploads/2022/05/Quartiles-probability-distribution.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Quartile]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-07Quartiles are a type of <a data-href="Quantile" href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quantile</a> that divide an ordered dataset into 4 equal parts. The quartiles of a dataset are three values, where each value represents a certain <a data-href="Percentile" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percentile</a> of the data. Quartiles are a <a data-href="Measure of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measure of Dispersion</a>, meaning it assesses the spread of a population.
<br>First Quartile (Q1): The 25th percentile, meaning that 25% of the data falls below the first quartile. It can be thought of as the <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a> of the lower half of the data.
<br>Second Quartile (Q2): The 50th percentile, or the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="31" to="37" origin-text="median" class="internal-link virtual-link-a">median</a> of the dataset. 50% of the data falls below the second quartile.
Third Quartile (Q3): The 75th percentile, 75% of the data falls below the third quartile. It can be thought of as the median of the upper half of the dataset.
The five-number summary is a set of five values that describe the distribution of a dataset or population and consists of the following:
Minimum: The smallest value in the dataset.
First Quartile (Q1): The 25th percentile.
<br><a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="0" to="6" origin-text="Median" class="internal-link virtual-link-a">Median</a> (Q2): The 50th percentile.
Third Quartile (Q3): The 75th percentile.
Maximum: The largest value in the dataset.<br>
The five-number summary can be visualized using a <a data-href="Boxplot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Boxplot</a> and is useful for identifying potential <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outliers</a> in a population.
To calculate the quartiles of a dataset, follow these steps:
Sort the data, typically in ascending order.
<br>Find the median (Q2), which divides the dataset in half. If there’s an odd number of data points, exclude the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="90" to="96" origin-text="median" class="internal-link virtual-link-a">median</a>; if even, include it in both halves.
Find the first quartile, which is the median of the lower half of the dataset.
Find the third quartile, which is the median of the upper half of the dataset.
<br>The Interquartile <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="18" to="23" origin-text="Range" class="internal-link virtual-link-a">Range</a> (IQR) is a measure of statistical dispersion that represents the range within which the central 50% of the data points lie. It is defined as:<br>The IQR provides insights on the spread of the data around the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="63" to="69" origin-text="median" class="internal-link virtual-link-a">median</a>, and is commonly used to identify <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="104" to="112" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> where values that are below or above are considered outliers.<br>A boxplot, sometimes referred to as a whisker plot, provides a visual summary of a distribution of a dataset. The plot depicts the values of the <a data-href="Five-Number Summary" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Five-Number Summary</a> which consists of the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="23" to="29" origin-text="median" class="internal-link virtual-link-a">median</a>, first and third quartiles, and the maximum and minimum values.The boxplot consists of:
<br>The Box: Which represents the <a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a> of the distribution, which can be thought of as the middle 50% of the data.
<br>Median Line: The line in the center of the box which represents the second quartile, or the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="81" to="87" origin-text="median" class="internal-link virtual-link-a">median</a> of the dataset.
Whiskers: The lines extending from the box to the value of the minimum or maximum value of the distribution. It is common for the whiskers to be set to the smallest and largest values with 1.5 times the IQR, rather than the true minimum and maximum values of the population.<br>
<img alt="Pasted image 20250708093049.png" src="https://emujakic.github.io/TechKB/resources/pasted-image-20250708093049.png" target="_self"><br>
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.machinelearningplus.com/plots/python-boxplot/" target="_self">https://www.machinelearningplus.com/plots/python-boxplot/</a> J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>“Quartile,”&nbsp;Wikipedia, Nov. 26, 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Quartile" target="_self">https://en.wikipedia.org/wiki/Quartile</a>
<br>“Find a Five-Number Summary in Statistics: Easy Steps,”&nbsp;Statistics How To. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statisticshowto.com/statistics-basics/how-to-find-a-five-number-summary-in-statistics/" target="_self">https://www.statisticshowto.com/statistics-basics/how-to-find-a-five-number-summary-in-statistics/</a>
<br>M. Yi, “A Complete Guide to Box Plots,”&nbsp;Atlassian, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.atlassian.com/data/charts/box-plot-complete-guide" target="_self">https://www.atlassian.com/data/charts/box-plot-complete-guide</a>
<br>S. Glen, “Interquartile <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="24" to="29" origin-text="Range" class="internal-link virtual-link-a">Range</a> (IQR): What it is and How to Find it,”&nbsp;Statistics How To, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statisticshowto.com/probability-and-statistics/interquartile-range/" target="_self">https://www.statisticshowto.com/probability-and-statistics/interquartile-range/</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/quartile.html</link><guid isPermaLink="false">NOTES/Math/Quartile.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://emujakic.github.io/TechKB/HTML/resources/pasted-image-20250708093049.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://emujakic.github.io/TechKB/HTML/resources/pasted-image-20250708093049.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Range]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-15The range is a <a data-href="Measure of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measure of Dispersion</a> that represents the difference between the smallest and largest value in a dataset. The range is calculated as:
Easy to compute: Very easy value to calculate even by hand.
Intuitive: Illustrates the spread of the data by a simple value that is in the same scale as the underlying dataset making it easy to understand. <br>Sensitive to <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outliers</a>: The range, in the worst case, can be entirely determined by two <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="66" to="74" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> that do not accurately represent the underlying dataset, making the range a misleading metric in such a case.
Vague: Does not provide much information regarding the distribution of a population, making it very uninformative. <br><a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a>: The IQR of a dataset is the difference between the first <a data-tooltip-position="top" aria-label="Quartile" data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">quartile</a> , and the third <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="16" to="24" origin-text="quartile" class="internal-link virtual-link-a">quartile</a> . It provides the spread of the middle 50% of the data.
<br><a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>: The midrange of a dataset is the <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a> of the maximum and minimum values. It is calculated as: J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Range in Statistics,”&nbsp;GeeksforGeeks, Oct. 08, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/range-in-statistics/" target="_self">https://www.geeksforgeeks.org/maths/range-in-statistics/</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/range.html</link><guid isPermaLink="false">NOTES/Math/Range.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 15 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Variance]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-10Variance is a <a data-href="Measure of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measure of Dispersion</a> that summarizes the spread of values in a dataset from the average. It represents the average squared distance from each data point to the <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a> of the dataset.
<br>
Low Variance: Indicates that the data points tend to be very close to the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="62" to="66" origin-text="mean" class="internal-link virtual-link-a">mean</a>, suggesting consistency and reliability in the dataset. <br>
High Variance: Implies that data points are more spread out across the <a data-tooltip-position="top" aria-label="Range" data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">range</a>, indicating greater variability and less predictability. <br><img alt="HighVsLowSTD.png" src="https://emujakic.github.io/TechKB/resources/highvslowstd.png" target="_self">
Non-Negative: The variance can never be negative, since it is an average distance measure and distance can also never be negative.
The variance of a numeric attribute is defined as:For a population, the variance is calculated using:Where: represents the population variance.
<br> represents the <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a> of the population. represents the number of observations.
For a sample, the variance is calculated using:Where: represents the sample variance.
<br> represents the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="16" to="20" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the sample. represents the number of observations.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="4" to="22" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a> is equal to the square root of the variance of the same dataset. Standard deviation is expressed in the same units as the original data, while variance is expressed in squared units.<br>The expected value, or <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="23" to="27" origin-text="mean" class="internal-link virtual-link-a">mean</a>, of a random variable , denoted , is a <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">measure of central tendency</a> that represents the average outcome of a random variable. Intuitively, it is the average of the outcomes of many samples from .<br>The variance of a random variable measures the dispersion of a random variable around its expected value . It is defined as the expected value of the squared differences from the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="74" to="78" origin-text="mean" class="internal-link virtual-link-a">mean</a>:Where: is the expected value of .
<br>Covariance is vital in understanding the relationships between random variables in <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probability</a> distributions. The value of the covariance between two variables represents the direction of the linear relationship between them.<br>A <a data-href="Covariance Matrix" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Covariance Matrix</a> is a square matrix containing the covariance between multiple variables.The formula for calculating the covariance is:Where:
<br> and represent the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="15" to="19" origin-text="mean" class="internal-link virtual-link-a">mean</a> of and respectively. represents the number of samples in the dataset. Positive Covariance: Indicates that as increases, increases.
Negative Covariance: Indicates that as increases, decreases.
Zero/Near-Zero Covariance: Indicates no linear relationship between and .
Covariance is a key step in calculating correlation, which normalizes the covariance value to a standard scale. Correlation is useful for assessing the strength and direction of the relationship between two variables.<br>A dataset is homoscedastic if the variance of the residuals (errors) is constant across the <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="92" to="97" origin-text="range" class="internal-link virtual-link-a">range</a> of the independent variable(s). Conversely, if the variance changes as a function of the independent variable, the dataset is heteroscedastic.<br>Homoscedasticity is an important concept in <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> analysis as it is an essential assumption for many regression models such as <a data-href="Linear Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Regression</a> based on the <a data-href="Least Squares" href="https://emujakic.github.io/TechKB/notes/math/least-squares.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Least Squares</a> method.
Residuals vs. Fitted Values Plot: A scatter plot of residuals against the predicted values. A random scatter indicates that the dataset is homoscedastic.
<br><a data-href="Breusch-Pagan Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Breusch-Pagan Test</a>: Creates an initial regression model, then fits a new model on the squared residuals of original model against the independent variable. If the corresponding <a data-href="P-Value" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">P-Value</a> from the <a data-href="Chi-Squared Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chi-Squared Test</a> is less than some chosen significance level, then heteroscedasticity is assumed.
<br><a data-href="White Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">White Test</a>: A more general test which can detect non-linear heteroscedastic relationships. The methodology is similar to that of the Breusch-Pagan test, though the White test involves regressing the squared residuals against the original independent variables, their squares, and their cross-products. <br><a data-href="Weighted Least Squares" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Weighted Least Squares</a>: Weighs the effect of observations on the regression line based on its estimated variance.
<br>Transformations: Applying a <a data-href="Log Transformation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Log Transformation</a> or <a data-href="Box-Cox Transformation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box-Cox Transformation</a> can potentially reduce or eliminate heteroscedasticity entirely. J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Variance,”&nbsp;GeeksforGeeks, Apr. 27, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/variance/" target="_self">https://www.geeksforgeeks.org/maths/variance/</a>
<br>Wikipedia Contributors, “Variance,”&nbsp;Wikipedia, Jan. 08, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Variance" target="_self">https://en.wikipedia.org/wiki/Variance</a>
<br>J. Starmer, “Covariance, Clearly Explained!!!,”&nbsp;YouTube. Jul. 29, 2019. Available: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=qtaqvPAeEJY" target="_self">https://www.youtube.com/watch?v=qtaqvPAeEJY</a>
<br>GeeksforGeeks, “Covariance and Correlation,”&nbsp;GeeksforGeeks, Jun. 25, 2018. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/engineering-mathematics/mathematics-covariance-and-correlation/" target="_self">https://www.geeksforgeeks.org/engineering-mathematics/mathematics-covariance-and-correlation/</a> (accessed Jul. 16, 2025).
<br>Z. Bobbit, “The Breusch-Pagan Test: Definition &amp; Example,”&nbsp;Statology, Dec. 31, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statology.org/breusch-pagan-test/" target="_self">https://www.statology.org/breusch-pagan-test/</a>
<br>J. Waples, “Heteroscedasticity: A Full Guide to Unequal Variance,”&nbsp;Datacamp.com, Dec. 10, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.datacamp.com/tutorial/heteroscedasticity" target="_self">https://www.datacamp.com/tutorial/heteroscedasticity</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/variance.html</link><guid isPermaLink="false">NOTES/Math/Variance.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Thu, 10 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://emujakic.github.io/TechKB/resources/highvslowstd.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://emujakic.github.io/TechKB/resources/highvslowstd.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Standard Deviation]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-10Standard deviation is a <a data-href="Measure of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measure of Dispersion</a> that summarizes the amount of variation in a dataset. It represents the average distance between each data point and the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> of the population.
<br>
Low Standard Deviation: Indicates that the data points tend to be very close to the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="62" to="66" origin-text="mean" class="internal-link virtual-link-a">mean</a>, suggesting consistency and reliability in the dataset. <br>
High Standard Deviation: Implies that data points are more spread out across the <a data-tooltip-position="top" aria-label="Range" data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">range</a>, indicating greater variability and less predictability. <br><img alt="HighVsLowSTD.png" src="https://emujakic.github.io/TechKB/resources/highvslowstd.png" target="_self">
Non-Negative: The standard deviation can never be negative, since it is an average distance measure, and distance can also never be negative.
<br>Sensitive to <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outliers</a>: Extreme <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="10" to="18" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> can have a significant impact on the standard deviation.
Same Units: The standard deviation is expressed in the same units as the underlying dataset.
The standard deviation of a numeric attribute , denoted with , is defined as:For a population, the standard deviation is calculated using:Where:
<br> represents the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="16" to="20" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the population. represents the number of observations.
For a sample, the standard deviation is calculated using:Where:
<br> represents the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="16" to="20" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the sample. represents the number of observations.
<br>The standard deviation is equal to the square root of the <a data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Variance</a> of the same dataset. <a href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" target="_self" rel="noopener noreferrer" from="22" to="30" origin-text="Variance" class="internal-link virtual-link-a">Variance</a> measures the average of the squared differences from the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="88" to="92" origin-text="mean" class="internal-link virtual-link-a">mean</a>, providing insight into the spread of the data.Other common measures of dispersion include:
<br><a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a> (IQR): which is the distance covered by the middle 50% of the dataset.
<br><a data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Range</a>: which is the difference between the maximum and minimum values in a dataset
<br><a data-tooltip-position="top" aria-label="Quartile" data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartiles</a>: which are the three values that divide a dataset into four equal parts. J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Standard Deviation Formula, Examples &amp; How to Calculate,”&nbsp;GeeksforGeeks, Jul. 06, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/standard-deviation-formula/" target="_self">https://www.geeksforgeeks.org/maths/standard-deviation-formula/</a>
<br>J. Frost, “Standard Deviation: Interpretations and Calculations,”&nbsp;Statistics By Jim, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://statisticsbyjim.com/basics/standard-deviation/" target="_self">https://statisticsbyjim.com/basics/standard-deviation/</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/standard-deviation.html</link><guid isPermaLink="false">NOTES/Math/Standard Deviation.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Thu, 10 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://emujakic.github.io/TechKB/resources/highvslowstd.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://emujakic.github.io/TechKB/resources/highvslowstd.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Associative Property]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-19The associative property states that the sum or product of any group of values is not affected by how the values are grouped. It allows you to transform mathematical expressions into equivalent forms without altering its value.The associative property applies to addition. For any numbers , and :The associative property applies to multiplication. For any numbers , and :The associative property applies to matrix multiplication as well. For matrices , , and with compatible dimensions:Operations such as subtraction or division are not associative:
Subtraction: Division: In <a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a>, associativity is a rule of replacement that applies to some <a data-href="Logical Connectives" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logical Connectives</a>, allowing for the rearrangement of grouping symbols without changing the truth value of the logical expression.Associativity applies to conjunction (AND), for any variables , , and :Associativity applies to disjunction (OR), for any variables , , and :<br>In set theory, the associative property refers to how the <a data-href="Union" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Union</a> and <a data-href="Intersection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Intersection</a> of sets can be grouped without altering the outcome of the expression.for any sets , , and :for any sets , , and :<br>The <a href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" target="_self" rel="noopener noreferrer" from="4" to="24" origin-text="commutative property" class="internal-link virtual-link-a">commutative property</a> states of values does not affect their sum or product.
Addition: Multiplication: <br>Note that the <a href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" target="_self" rel="noopener noreferrer" from="14" to="34" origin-text="commutative property" class="internal-link virtual-link-a">commutative property</a> does not apply to matrix multiplication.
<br>GeeksforGeeks, “Associative Property,”&nbsp;GeeksforGeeks, Sep. 29, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/associative-property/" target="_self">https://www.geeksforgeeks.org/maths/associative-property/</a> (accessed Jul. 19, 2025)
<br>“Associative property,”&nbsp;Wikipedia, Jan. 16, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Associative_property" target="_self">https://en.wikipedia.org/wiki/Associative_property</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/associative-property.html</link><guid isPermaLink="false">NOTES/Math/Associative Property.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sat, 19 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Nominal Data]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-07Nominal data is a type of <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> that represents categories that don't have a specific order or ranking. Unlike <a data-href="Ordinal Data" href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Ordinal Data</a>, which has a defined order, nominal data is purely qualitative. It describes specific qualities without conveying any measure of numerical significance.<br>Since nominal data lacks numerical significance, data operations such as <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> or <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a> cannot be performed. However, the frequency of nominal data values can be analyzed, and a measure like the <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a> can describe the most common category within a given dataset.<br>A specific type of nominal data is <a data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Binary Data</a>, which consists of only two categories, typically represented as 1 and 0. Binary fields are commonly used to represent whether a certain feature is present or not in a given data object.Examples of nominal data include attributes like eye color (e.g., blue, brown, green), gender (e.g., male, female, non-binary), and nationality (e.g., American, Canadian). These categories do not imply any hierarchy or order.<br>Nominal data, lacking any numerical significance, primarily relies on frequency distribution analysis for meaningful insights. One of the most effective techniques for this is the use of a <a data-href="Bar Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bar Chart</a>, which visually represent the frequency of each category.
J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Haryana, India ; Burlington, Ma: Elsevier, 2018.
<br>“Types of Data | Introduction to Data Science,”&nbsp;_<a data-tooltip-position="top" aria-label="http://www.stat.lsa.umich.edu." rel="noopener nofollow" class="external-link is-unresolved" href="http://www.stat.lsa.umich.edu." target="_self">www.stat.lsa.umich.edu.</a> <a rel="noopener nofollow" class="external-link is-unresolved" href="https://dept.stat.lsa.umich.edu/~kshedden/introds/topics/types_of_data/" target="_self">https://dept.stat.lsa.umich.edu/~kshedden/introds/topics/types_of_data/</a>
Wikipedia Contributors, “Nominal category,”&nbsp;Wikipedia, Oct. 07, 2024.
]]></description><link>https://emujakic.github.io/TechKB/notes/math/nominal-data.html</link><guid isPermaLink="false">NOTES/Math/Nominal Data.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Transitive Property]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-25If a relation is transitive then for all possible elements , and , if that relation holds for and , and that same relation holds between and , then that relation must hold between and .Where: is some relation such as equality or inequality. Equality: If and then .
Inequality: If and then .
Set Inclusion: If and then .
Implication: If and then .
Inheritance: If inherits from and inherits from then inherits from . Mathematics: Used extensively in algebra, geometry, and set theory to establish relationships between numbers, variables, or sets.
Computer Science: Used in graph theory algorithms like <a data-href="Warshall's Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Warshall's Algorithm</a> which is used to determine the <a data-href="Transitive Closure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transitive Closure</a> of a directed graph. The <a data-href="Transitive Closure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transitive Closure</a> of a directed graph represents which vertices are reachable from others. The <a data-href="Transitive Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transitive Reduction</a> of a directed graph is the smallest reduction that has the same reachability relation as the original graph.
Logic: The transitive property is a fundamental property in proofs and reasoning, allowing for the derivation of conclusions based on established relationships.
The reflexive property states that any value or expression is equal to itself. The equality relation is an example of a reflexive operation, since all real numbers or variables are equal to themselves.A relation is symmetric if for all possible elements and , if is related to , then is related to . Equality is an example of a symmetric relation.<br>An equivalence relation is a relation that is reflexive, symmetric, and transitive. Equivalence relations can group elements of a set into distinct categories called <a data-href="Equivalence Classes" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Equivalence Classes</a>, which are disjoint subsets containing elements that are equivalent to one another.<br>A partial order on a set is a binary relation that is reflexive, antisymmetric, and transitive. It is a way to order elements in a set where not all pairs of elements need to be comparable. Partial orders are visualized using a <a data-href="Hasse Diagram" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hasse Diagram</a>.<br>Preorder is a binary relation defined on a set that is both reflexive and transitive. It is a generalization of partial orders in the sense that it does not require antisymmetry. Preorders are commonly applied in <a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a> to model preferences, or in <a data-href="Game Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game Theory</a> to compare strategies.
A binary relation is intransitive if there exists three values where transitivity does not hold.
Antitransitivity is a stronger property which holds if for any three values, transitivity never holds. <br>GeeksforGeeks, “Transitive Property,”&nbsp;GeeksforGeeks, Mar. 07, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/transitive-property/" target="_self">https://www.geeksforgeeks.org/maths/transitive-property/</a> (accessed Jul. 25, 2025)
<br>“Transitive relation,”&nbsp;Wikipedia, Jan. 29, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Transitive_relation" target="_self">https://en.wikipedia.org/wiki/Transitive_relation</a>
<br>GeeksforGeeks, “Equivalence Relations,”&nbsp;GeeksforGeeks, Nov. 09, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/equivalence-relations/" target="_self">https://www.geeksforgeeks.org/maths/equivalence-relations/</a>
<br>“Intransitivity,”&nbsp;Wikipedia, Mar. 07, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Intransitivity" target="_self">https://en.wikipedia.org/wiki/Intransitivity</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/transitive-property.html</link><guid isPermaLink="false">NOTES/Math/Transitive Property.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Fri, 25 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Data Mining Concepts and Techniques Summary]]></title><description><![CDATA[
Name: Jiawei Han, Micheline Kamber, and Jian Pei
Edition: 3rd Edition
Data Mining: Concepts and Techniques is a comprehensive resource for the field of data mining. This book covers everything from data preprocessing to clustering and <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outlier</a> detection. This summary attempts to break s down the main ideas and insights from the book.
<br>
<a data-href="Data Mining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Mining</a>: The process of extracting knowledge from data. Is also referred to as knowledge mining/extraction or data pattern analysis. <br>
<a data-href="Data Warehouse" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Warehouse</a>: A centralized repository of data from multiple sources. <br>Data warehouses are typically constructed through a <a data-href="ETL Process" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ETL Process</a>, where data is extracted from sources, transformed into a desirable format, and then loaded into the warehouse.
Data warehouses are typically used to store historical data, allowing for long-term trend analysis. <br>
<a data-href="Data Cube" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Cube</a>: A multi-dimensional array, where each dimension corresponds to an attribute or set of attributes. Cells typically store aggregate measures such as count or sum. Each dimension can contain hierarchies, such as yearly or quarterly, allowing for analysis at different levels. <br>
Knowledge discovery from data is an iterative process of the following steps (steps 1-4 are different forms of <a data-href="Data Preprocessing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Preprocessing</a>): Data Selection: Choosing and retrieving the data that is relevant for the analysis task.
Data Integration: Where data from multiple sources is combined.
Data Cleaning: Removing noise and inconsistencies from data.
Data Transformation: Where data is transformed into a form appropriate for mining.
Data Mining: Where intelligent methods are utilized to extract patterns present in the data.
Evaluation: Assessing the patterns discovered in the previous step based on measures to determine if they are useful.
<br>Knowledge Presentation: Presenting the discovered knowledge/patterns using intuitive methods such as <a data-href="Data Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Visualization</a> or report generation. <br>
<a data-href="Database Management System" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Management System</a>: Software that enables users to create, manage, and manipulate a <a data-href="Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database</a>. <br>
Database: A collection of interrelated <a data-href="Structured Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Structured Data</a> . <br>
<a data-href="Relational Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Relational Database</a>: A collection of structured tables, each which consist of a set of attributes (represented as columns), and stores entries as tuples of data (rows). Rows are typically identified using a primary key.
<br>Most relational databases use <a data-href="SQL" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">SQL</a> to query the database. These queries include commands such as INSERT, JOIN, DELETE, or aggregate operators like SUM or MIN.
<br>Relational databases can be modeled using an <a data-href="Entity-Relationship Diagram" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entity-Relationship Diagram</a>. <br>
Data warehouses made up of data cubes can inherently support <a data-href="Online Analytical Processing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Online Analytical Processing</a> (OLAP). OLAP allows users to explore data from different perspectives, such as time, geography, product lines, and customer segments. This allows for data analysis across multiple dimensions at varying levels of granularity.
OLAP allows users to drill-down into more detailed/granular data, or roll-up to get more broad, summarized information. <br>
<a data-href="Transactional Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transactional Database</a>: A database which stores transactions, such as purchases or clicks on a website. <br>
There are a number of data mining functionalities such as characterization, discrimination, frequent pattern mining, associations, correlations, <a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>, <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> , <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>, and <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outlier</a> analysis. Generally, such tasks can be classified as descriptive or predictive. Descriptive mining tasks describe characteristics of a dataset, this includes clustering or association rule learning.
Predictive mining tasks, like regression or classification, aim to make predictions on future outcomes based on historical data. Data entries can be associated with classes or concepts. Class/concept descriptions can be derived from data characterization or data discrimination methods. <br>
Data characterization is the process of summarizing the general characteristics of a dataset. The output of data characterization can be <a data-tooltip-position="top" aria-label="Bar Chart" data-href="Bar Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bar Charts</a>, curves, <a data-tooltip-position="top" aria-label="Pie Chart" data-href="Pie Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pie Charts</a>, data cubes, and multidimensional tables. The output of data characterization can also be characteristic rules.
<br>Common techniques for data characterization include <a data-href="Descriptive Statistics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Descriptive Statistics</a>, <a data-href="Data Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Visualization</a>, and clustering. Data discrimination focuses on the comparison of the general characteristics of the target class against that of one or more contrasting classes. The forms of output are similar to those of data characterization. Discrimination descriptions expressed in rule form are referred to as discriminant rules.
<br>Common techniques for data discrimination include classification algorithms, such as <a data-tooltip-position="top" aria-label="Decision Tree" data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Trees</a> or <a data-tooltip-position="top" aria-label="Support Vector Machine" data-href="Support Vector Machine" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Support Vector Machines</a>. Frequent patterns are patterns that appear frequently in a dataset, they include frequent itemsets, subsequences, or substructures. Frequent itemsets are sets of items that are commonly together.
Frequent subsequences are events that commonly share a particular sequence.
Frequent substructures are patterns in structural representations like graphs or trees. <br>
<a data-href="Association Rule" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Association Rule</a>: A conditional rule that describes a relationship between variables in a dataset. An association rule is made up of an antecedent - the item or set of items that suggest the presence of another item if present, and a consequent - the item or set of items that are predicted to be present if the the antecedent is present.
Association rules with a single predicate are single-dimensional, otherwise it's a multidimensional association rule.
Confidence: Indicates how often the consequent is true, given the antecedent.
Support: measures how often the items appear together in the dataset.
Association rules can be discarded if they don't meet a specified support and confidence threshold. <br>
<a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>: The process of finding a model that categorizes a set of data objects into predefined classes. The models are derived based on analysis performed on training data, that is, a set of pre-labelled data. <br>The model may be represented as classification rules, decision trees, neural networks, or distance based models such as <a data-href="K-Nearest Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest Neighbors</a>. A decision tree is a tree which splits a dataset based on feature values, where a path from the root to a leaf represents a decision rule. A neural network is a collection of neurons with weighted synapses (connections) between them. Each neuron functions as a processing unit that takes inputs, applies a transformation, and "activates" when a feature matches a specific pattern. <br>
<a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>: The process of finding a model that predicts a continuous-valued function. Regression analysis is used when the dependent variable is numeric, rather than categorical. Relevance Analysis: The process of identifying which features (independent variables) are most relevant for the prediction of the independent variable. Relevance analysis typically preempts regression and classification.
<br>Relevance analysis techniques include statistical tests such as the <a data-href="Chi-Square Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chi-Square Test</a>, or correlation analysis techniques like <a data-href="Pearson Correlation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pearson Correlation</a> or <a data-href="Spearman Rank Correlation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Spearman Rank Correlation</a>.
<br>Other techniques include <a data-href="Recursive Feature Elimination" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive Feature Elimination</a>, <a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a>, or <a data-href="Lasso Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Lasso Regression</a>. <br>
<a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>: The Process of grouping similar data points together into 'clusters' where each cluster can be viewed as a class of data objects. <br>Clusters are formed based on <a data-href="Distance Measures" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measures</a>, which quantify the similarity or dissimilarity of data objects.
<br>Popular clustering techniques include <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a>, <a data-href="DBSCAN" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">DBSCAN</a>, or <a data-href="Gaussian Mixture Models" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gaussian Mixture Models</a>. <br>
<a data-href="Outlier Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Outlier Analysis</a>: The process of detecting <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, or anomalies in a dataset. <br><a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="0" to="8" origin-text="Outliers" class="internal-link virtual-link-a">Outliers</a> may be detected using distance-based methods like <a data-href="K-Nearest-Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest-Neighbors</a>, statistical methods such s <a data-href="Z-Score" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score</a> or <a data-tooltip-position="top" aria-label="Box Plot" data-href="Box Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box Plots</a>, or density based methods like DBSCAN. <br>
<a data-href="Measures of Pattern Interestingness" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measures of Pattern Interestingness</a>: Measure the significance and usefulness of discovered patterns. <br><a data-href="Support" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Support</a>: The proportion of objects in the dataset that contain the pattern.
<br><a data-href="Confidence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Confidence</a>: The likelihood that a pattern is present given another pattern.
<br><a data-href="Lift" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Lift</a>: Measures how much more likely the presence of one pattern is to occur with another pattern compared to their individual <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a>.
<br><a data-href="Accuracy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Accuracy</a>: The ratio of correctly predicted instances to the total number of instances.
<br><a data-href="Entropy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entropy</a>: Measures the amount of uncertainty in a dataset or pattern.
Coverage: The percentage of data to which the rule applies. Subjective interestingness measures are based on the user's beliefs, knowledge, and context rather than solely on statistical properties. Completeness: Referring to the ability of a data mining algorithm to generate all of the patterns that are present in the data. <br>
Statistical Model: A mathematical representation that describes the behavior of objects in a target class in terms of <a data-tooltip-position="top" aria-label="Random Variable" data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variables</a> and their associated <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="22" to="33" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions. Statistical models can be the output of a data mining task, or the foundation upon which data mining tasks are built upon. Predictive statistics models data to account for uncertainty in the observations and is used to draw inferences about the underlying process under investigation. <br>
<a data-href="Confirmatory Data Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Confirmatory Data Analysis</a>: A statistical approach which aims to confirm or refute a hypothesis based on statistical evidence. A result is statistically significant if it is unlikely to have occurred by chance. <br>
<a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a>: A branch of <a data-href="Artificial Intelligence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Artificial Intelligence</a> which deals with the development of algorithms and statistical models which can learn patterns from data and make intelligent decisions. <br><a data-href="Supervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Supervised Learning</a>: Training a machine learning algorithm on prelabelled data. This includes <a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a> or <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> algorithms.
<br><a data-href="Unsupervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Unsupervised Learning</a>: Models which identify patterns in unlabeled data. This includes <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a> or <a data-href="Dimensionality Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dimensionality Reduction</a> techniques.
<br><a data-href="Semi-Supervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Semi-Supervised Learning</a>: Combines both supervised and unsupervised learning. Useful for when there is a small amount of labeled data and a large amount of unlabeled data available.
<br><a data-href="Reinforcement Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reinforcement Learning</a>: Models learn by interacting with their environment and receiving feedback as rewards or penalties.
Active Learning: Models selectively query the user to label an example. The model identifies which unlabeled data points would provide the most valuable information if labeled and requests labels for those specific instances. Information Retrieval: The process of searching for and obtaining information from sources. This field focuses on searching through sources, such as documents or databases, and matching data points based on user queries that are mainly formed by keywords. <br>This process is often assessed with metrics such as <a data-href="Precision" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Precision</a> and <a data-href="Recall" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recall</a>.
Common techniques include keyword-based searching, Boolean retrieval using logical operators, or machine learning approaches.
A topic model is a statistical model which models the topic of a document as a probability distribution over the vocabulary of the document. Search engines are very large data mining applications that use techniques such as crawling, indexing, and searching. <br>
<a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a>: Measures which give an idea about the center of a distribution. Common measures include <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a>, <a data-tooltip-position="top" aria-label="Median" data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">median</a>, and <a data-tooltip-position="top" aria-label="Mode" data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mode</a>. Mean: Also called the average, is the sum of values over the number of values in a dataset. The mean is typically very sensitive to outliers.
<br><a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="0" to="4" origin-text="Mode" class="internal-link virtual-link-a">Mode</a>: The most frequently occurring value in a dataset. for unimodal, moderately skewed numerical data: Median: The middle value of an ordered dataset. Better for skewed data, since it is less affected by outliers. Dataset: A set of data objects— single entities described by attribute values. Data objects are also referred to as samples, records, or data points. If the data objects are stored in a database, they are data tuples. Attribute: Also called a feature, is a data field representing a specific characteristic of a data object. Observed values for attributes are called observations.
A set of attributes used to describe an object are called an attribute/feature vector. The type of an attribute is determined by its domain. The most common types include. <br><a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal</a>: Each value represents some sort of category, therefore, they are also commonly referred to as categorical. A nominal attribute may be instantiated as an integer, though this integer is only used to refer to a category and cannot be used quantitatively.
<br><a data-tooltip-position="top" aria-label="Binary Data" data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Binary</a>: A nominal attribute with only 2 states, zero or one. Binary attributes are called Boolean if the values represent true and false.
<br><a data-tooltip-position="top" aria-label="Ordinal Data" data-href="Ordinal Data" href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Ordinal</a>: A type of categorical data, where values have some sort of meaningful order among them. Ordinal attributes may be obtained from the discretization of a numeric attribute.
<br><a data-tooltip-position="top" aria-label="Numeric Data" data-href="Numeric Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numeric</a>: A quantitative attribute represented by integer or real values. Numeric attributes can be interval or ratio scaled. <br>
<a data-href="Interval Scaled" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interval Scaled</a>: Numeric attributes measured on a scale of equal units. Interval scaled attributes have no true zero point, that is, the value zero doesn't represent the absence of the attribute. For example, 0° does not represent no temperature. You can perform addition and subtraction on interval scaled attributes, but no multiplication or division. <br>
<a data-href="Ratio Scaled" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ratio Scaled</a>: Numeric attributes with a true zero point, allowing for the comparison of absolute magnitudes. This means all arithmetic operations are applicable. Discrete Attribute: An attribute with a finite or countable infinite set of possible values. <br>
Continuous Attribute: An attribute which can take on any value in a given <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="54" to="59" origin-text="range" class="internal-link virtual-link-a">range</a>. <br>
Statistical Descriptions: Used to infer properties of data and highlight what values should be treated as noise or <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>. <br>
<a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>: The <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="6" to="10" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the minimum and maximum values in a dataset. <br>
Data is positively skewed if the mean is a value smaller than the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="41" to="47" origin-text="median" class="internal-link virtual-link-a">median</a>. Data is negatively skewed if the mean is greater than the median. <br>
<a data-href="Measures of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measures of Dispersion</a>: Statistical measures which characterize the spread of data. Common measures include: <br><a data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Range</a>: The difference between the maximum and minimum values in a dataset.
<br><a data-href="Quantile" href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quantile</a>: The data points which split an ordered dataset into equal or near-equal parts.
<br><a data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartile</a>: The 4-quantiles, or the three data points which split a dataset into four equal parts.
<br><a data-href="Percentile" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percentile</a>: The 100-quantiles, or the 99 values which split a dataset into 100 equal subsets.
<br><a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a>: The difference between the third and first quartile.
<br><a data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Variance</a>: The average squared distance of each value from the mean value of the dataset.
<br><a data-href="Standard Deviation" href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a>: The average distance of each value from the mean value of the dataset. <br>
<a data-href="Chebyshev's Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev's Inequality</a>: A statistical theorem which shows that the proportion of values that lie more than <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="1" to="20" origin-text="standard deviations" class="internal-link virtual-link-a">standard deviations</a> away from the mean is at most . <br>
<a data-href="Five-Number Summary" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Five-Number Summary</a>: The first and third <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="22" to="30" origin-text="quartile" class="internal-link virtual-link-a">quartile</a>, median, and least and greatest values in a dataset. A <a data-href="Box Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box Plot</a> is used to visualize the five-number summary. Data Visualization: Graphical representations of data using charts, graphs, or maps. <br>
<a data-href="Quantile Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quantile Plot</a>: A data visualization technique where the x-axis represents the <a href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" target="_self" rel="noopener noreferrer" from="65" to="74" origin-text="quantiles" class="internal-link virtual-link-a">quantiles</a> of a theoretical or real distribution, and the y-axis represents the quantiles of the observed data. Quantile plots are used to visualize the distribution of data, including any bias or skewness in the dataset. <br>
<a data-href="Histogram" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Histogram</a>: Also known as a bar chart, where a bar is drawn for each known value of , and the height of the bar represents the frequency of that value in the dataset. If is numeric, the domain of is partitioned into bins—disjoint, consecutive subranges. The range of a bin is called its width. <br>
<a data-href="Scatterplot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Scatterplot</a>: A data visualization technique which visualizes the relationship between two numeric attributes. Scatterplots are useful to visualize clusters, <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, or correlations. Scatterplots can be extended to n-dimensions to create a scatter matrix. <br>
<a data-href="Pixel-Oriented Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pixel-Oriented Visualization</a>: A class of data visualization techniques which use individual pixels as the primary unit of display. <br>
<a data-href="Space-Filling Curve" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Space-Filling Curve</a>: Continuous curves that pass through every point in a multidimensional space. One of the most common curves is the <a data-href="Hilbert Curve" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hilbert Curve</a>. Circle-Segment Technique: Uses windows in the shape of segments of a circle, each point corresponds to one dimension of one data record. <br>
<a data-href="Geometric Projection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Geometric Projection</a>: Techniques used to represent high-dimensional objects on a two-dimensional surface. Scatterplot Matrix: An by grid of 2D scatterplots that visualize each dimension with each other dimension. <br>
<a data-href="Parallel Coordinates" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Parallel Coordinates</a>: A visualization technique that can handle high-dimensional data. Each -dimensional data point is a line crossing equally spaced parallel axes, each representing one dimension. Icon-Based Visualization: A class of visualization techniques which used icons to represent multidimensional data objects. Two common techniques are Chernoff faces and "stick figures". Hierarchical Visualization: A class of visualization techniques which organize dimensions in a nested, hierarchical manner. Tree maps are a popular hierarchical visualization technique which visualize data as a set of nested triangles. Commonly used for visualizing changes in the stock market based on sector. <br>
Cluster: A collection of 'similar' data objects. Clustering is important for discovering potential classes of data objects, or for identifying <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="136" to="144" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>. Measures of Proximity: Statistical measures which quantify the similarity or dissimilarity of data objects. Multiattribute Objects are also referred to as data samples or feature vectors. Data Matrix: A data structure which stores data objects in an matrix, where is the number of attributes. Each row represents a data object. Dissimilarity Matrix: An matrix which stores the dissimilarity values for all pairs of objects. This matrix is symmetric, meaning that . Many clustering and nearest-neighbor algorithms operate on a dissimilarity matrix. <br>
<a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal Attribute</a>: A type of <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> that represents categories that don't have a specific order or ranking. The dissimilarity between 2 objects represented by <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="124" to="131" origin-text="nominal" class="internal-link virtual-link-a">nominal</a> attributes is computed based on the ratio of mismatches: Where is the number of matches and is the total number of attributes. <br>
<a data-href="One-Hot Encoding" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">One-Hot Encoding</a>: A technique for encoding nominal attributes into <a data-tooltip-position="top" aria-label="Binary Data" data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">binary attributes</a>, where is the number of states in the nominal attribute. A binary attribute is symmetric if each state 0 or 1 is equally valuable. A binary attribute is asymmetric if the 2 states are not equally important, such as the outcomes of a disease test. <br>One approach for computing the dissimilarity of <a href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" target="_self" rel="noopener noreferrer" from="48" to="59" origin-text="binary data" class="internal-link virtual-link-a">binary data</a> involves computing a dissimilarity matrix. If all binary attributes have equal weight, then can represent the number of attributes that are 1 for both object and . A variable can represent the number of attributes that are 1 for and 0 for , can represent the number of attributes which are 0 for and 1 for . Finally, can represent the number of attributes which are 0 for both and . If objects and are described by symmetric binary attributes, then the dissimilarity between and is .
If objects and are described by asymmetric binary attributes, then the dissimilarity between and is defined as . Conversely, the asymmetric binary similarity between and is . <br>The coefficient is called the <a data-href="Jaccard Coefficient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jaccard Coefficient</a>. <br>
<a data-href="Distance Measures" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measures</a>: A class of statistical measures used to quantify the proximity of numeric attributes. The most common measures include the <a data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean Distance</a>, <a data-href="Chebyshev Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev Distance</a>, <a data-href="Manhattan Distance" href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Manhattan Distance</a>, and <a data-href="Minkowski Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minkowski Distance</a>. <br>
The <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="4" to="22" origin-text="Euclidean distance" class="internal-link virtual-link-a">Euclidean distance</a> is the most popular <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> and it represents the straight-line distance between two points in Euclidean space and is calculated using the <a data-href="Pythagorean Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pythagorean Theorem</a>. <br>
The <a href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" target="_self" rel="noopener noreferrer" from="4" to="22" origin-text="Manhattan distance" class="internal-link virtual-link-a">Manhattan distance</a>, also called the city-block distance, is defined as . Both the Euclidean distance and the Manhattan distance satisfy the following properties: Non-Negativity: is never negative.
Identity of Indiscernibles: , the distance of an object to itself is always 0.
Symmetry: <br><a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>: , going directly from one point to another is never more than making a detour to some third point. A measure that satisfies all of these qualities is called a metric. The non-negative property is implied by the 3 other properties. The Minkowski distance is a generalization of the Euclidean and Manhattan distances, , where is some real number such that . Such a distance is also the norm where refers to . When is 1, it represents the Manhattan distance. When is 2, it represents the Euclidean distance ( norm). The Chebyshev distance (, norm, supremum distance), is a generalization of the Minkowski distance for . To compute it, we find the attribute that gives the maximum distance in values between 2 objects, . <br>
The treatment of <a href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" target="_self" rel="noopener noreferrer" from="17" to="24" origin-text="ordinal" class="internal-link virtual-link-a">ordinal</a> attributes is similar to numeric attributes when computing dissimilarity between objects. To compute the dissimilarity of objects of mixed attribute types, you process the attributes types together, then perform a single analysis. Suppose a dataset has attributes of mixed type, the dissimilarity of objects and is defined as: Where the indicator if either or is missing, or and attribute is asymmetric binary. Otherwise, . The computation of attribute to the dissimilarity of and () depends on the attribute type of : If is numeric, , where runs over all non-missing values of attribute . <br>
If is <a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">nominal</a> or binary, if , otherwise it equals 1. If is ordinal, compute the ranks and , then treat as numeric. <br>
<a data-href="Data Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Normalization</a>: The process of adjusting the values in a dataset to a common scale without distorting the differences in the ranges of values. A document can be represented by a term-frequency vector, with each attribute recording the frequency of a particular word or phrase in the document. Term frequency vectors are typically long and sparse, meaning they have many 0 values. Traditional distance measures are incompatible with sparse data, since the many shared 0 values would suggest that the two documents are similar, even if they're vastly different. <br><a data-href="Cosine Similarity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Cosine Similarity</a> can be used to compare term-frequency vectors with respect to a third vector of query words. Let and be two vectors, using the cosine similarity measure, we have: Where is the Euclidean norm of vector defined as .
The measure computes the cosine of the angle between vector and . A cosine value of 0 means the 2 vectors are at 90° to each other and have no match.
Cosine similarity is a non-metric measure.
When attributes are binary, the cosine similarity function can be interpreted in terms of shared features. Therefore, is a measure of relative possession of shared features: <br>Which is the ratio of the number of shared attributes between and to the number of attributes possessed by or . This is known as the <a data-href="Tanimoto Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Tanimoto Distance</a>. Data preprocessing is the process taken to improve the quality of data in order to increase the efficiency, ease, and quality of the data mining process. Data preprocessing consists of: Data Cleaning: Involves dealing with missing values, smoothing noisy data, removing outliers, and resolving inconsistencies.
Data Integration: Involves consolidating data from multiple sources into one location, typically a dataset, data cube, or file.
Data Reduction: Involves obtaining a reduced representation of the data while minimizing the loss of relevant information for the data mining process.
Data Transformation: Involves normalization (feature scaling), discretization, and concept hierarchy generation. Data quality is measured using the following metrics: Accuracy: Having the correct attribute values. Data may be inaccurate due to faulty data collection, entry, transmission, or from inconsistencies in how fields are formatted. Disguised missing data occurs when users intentionally enter incorrect data in order to preserve anonymity.
Completeness: Having attribute values filled out. Data may be incomplete due to failure to collect, enter, or transmit the data.
Consistency:
Timeliness: Having the data available when needed. Timeliness may be compromised if users fail to submit data on time.
Believability: How trustworthy the data is by users. If users believe that the data is of poor quality, that belief in and of itself reduces the quality of the data. This is due to users not willing to use the data or take it seriously, thus, reducing the value of the data.
Interpretability: How easily the data is understood. A missing value may not necessarily indicate an error. Each attribute should have at least one rule for handling null values. To handle missing values you can: Ignore the tuple: This is usually done if the class label is missing in the case of a classification problem, if a single tuple has many missing values, or if they're few tuples missing values. This is generally a poor choice since useful data is also being removed.
Manually fill in the values: This is only feasible for very small datasets and is still a poor method due to arbitrary values being inserted, thereby adding noise to the data.
Use a global constant: Missing values can be replaced with a constant such as null or , though the mining program may mistakenly think there is a relationship between tuples with the global constant present.
<br>Use a <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">measure of central tendency</a>: A measure, such as the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="25" to="29" origin-text="mean" class="internal-link virtual-link-a">mean</a> or <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="33" to="39" origin-text="median" class="internal-link virtual-link-a">median</a> can be used to fill in the value. The mean is more appropriate for symmetric distributions, while the median is more appropriate for skewed distributions.
<br>Use a measure of central tendency from the samples from the same class: Calculate a <a href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" target="_self" rel="noopener noreferrer" from="14" to="41" origin-text="measure of central tendency" class="internal-link virtual-link-a">measure of central tendency</a> using only data objects that are of the same class as the tuple with the missing value. <br>Fill in the most probable missing value: This may be calculated using <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>, Bayesian formalism, or <a data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Tree</a> induction. This method uses the most information from the available data. <br>
Noise: Random error or <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">variance</a> present in a dataset. <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="23" to="31" origin-text="Outliers" class="internal-link virtual-link-a">Outliers</a> commonly represent noise since they stray far most other observations. Noise can be smoothed using techniques like: Binning: Performs local smoothing by discretizing attribute values using the neighborhood of observations in the sorted data. Attribute values are sorted, then partitioned into a fixed number of bins, which are consecutive disjoint sets. In smoothing by bin means, each value in a bin is replaced by that bin's mean. Smoothing by bin medians, similarly, replaces each value in the bin with the bin's median. Smoothing by bin boundaries replaces each value in the bin with the value of the nearest bin boundary. Bins may be equal-frequency, where each bin has the same number of values; or they may be equal width, that is, they have the same range. Binning is also a form of data discretization.
<br><a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>: Data can be smoothed using regression—the process of finding a function which best fits a dataset. The values of the attribute can be replaced with the regression models's predicted values.
<br><a data-href="Outlier Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Outlier Analysis</a>: Techniques like clustering, scatterplots, or z-score analysis can be used to identify and remove outliers from a dataset. The first step in data cleaning is discrepancy detection. Discrepancies may arise due to human error, deliberate errors, or data decay (data becoming less accurate over time). Inconsistent data representations are also a source of discrepancies, such as inconsistent encoding schemas or formatting. Nested discrepancies occur when the correction of one discrepancy reveals the presence of another. Metadata is data about data. Metadata is useful for discrepancy detection for providing information about an attribute's data type, acceptable range, or dependencies.
Field overloading is another source of discrepancies where fields can have the same name but be of different data types.
Unique rules say that each value in a dataset must be unique. Consecutive rules say that there can be no missing values between the range of an attribute. Null rules specify the handling of null conditions, such as whether they are permitted or not. Data scrubbing tools, such as spell-checking, make use of domain knowledge to detect and correct errors. Data auditing tools analyze the data to find rules or relationships, as well as identifying objects that violate such rules. Data migration tools allow simple transformations, such as renaming of attributes. Extraction/Transformation/Loading (ETL) tools provide users with a GUI for performing transformations. Careful data integration can help reduce the amount of data cleaning needed by avoiding redundancies and inconsistencies. One of the biggest problems in data integration is the entity identification problem, which is the problem of identifying which real-world entities correspond to which data objects. This includes the schema integration and object matching processes. <br>Redundancy occurs when two columns refer to the same measure, or when a column can be derived for the other attributes. The former typically occurs when there is no standard for dimension naming, resulting in one attribute having multiple different names. Some redundancies can be detected using correlation analysis methods. This includes the <a data-href="Chi-Square Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chi-Square Test</a> for nominal attributes, or the correlation coefficient and <a data-href="Covariance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Covariance</a> for numerical attributes. The chi-square test is performed as follows: <br>Suppose attribute has distinct values, . Attribute has distinct values, . The tuples described by and can be represented by a <a data-href="Contingency Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Contingency Table</a> of dimensions . Each possible tuple has its own cell in the table. The value is computed as: Where is the observed frequency of the tuple , and is the expected frequency of the tuple calculated as: <br>Where is the number of data tuples. The statistic assumes the two attributes to be independent, the test is based on a significance level with <a data-tooltip-position="top" aria-label="Degree of Freedom" data-href="Degree of Freedom" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Degrees of Freedom</a>. The correlation coefficient between two attributes and can be calculated as: <br>Where is the number of data tuples, and are the respective mean values of and , and is the <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="8" to="26" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a>. The returned correlation coefficient is between +1 and -1, where a positive value indicates a positive correlation, a negative value indicates a negative correlation, and 0 indicates no correlation. Correlation and covariance are similar measures for assessing the relationship between two attributes. The covariance between and is: Note that a covariance of 0 does not necessitate independence. Data reduction techniques result in a reduced representation of the data while minimizing the amount of relevant information lost. Common data reduction strategies include: <br>Dimensionality Reduction: Involves reducing the number of attributes in the data. Common techniques include <a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a> and <a data-href="Wavelet Transform" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Wavelet Transform</a>.
Numerosity Reduction: replaces the original dataset with smaller forms, such as parametric and non-parametric machine learning models.
Compression: Data compression transforms the data into a reduced form. Lossy compression occurs when only an approximation of the original data can be reconstructed from the compressed version. If the compression technique results in no information loss then it is lossless compression. <br>
<a data-href="Discrete Wavelet Transform" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Discrete Wavelet Transform</a>: The DWT is a linear signal processing technique which transforms a data vector into a equal-length vector of wavelet coefficients. The data is reduced by setting all coefficients under a given threshold to 0, thus making it a sparse vector. Therefore, operations that can take advantage of this sparsity can exploited. DWT can also be used to smooth out noise in a dataset. The general steps for applying a DWT is as follows: The length if the input vector must be a power of two,. If not the vector can be padded with zeros as necessary.
Each transform applies a smoothing function, such as a weighted mean. Then a weighted difference is applied to bring out the details of the dataset.
These two functions are applied to pairs of points in . This results in two datasets of length .
The two functions are applied recursively until the resulting datasets are of length 2.
Selected values are obtained and designated the wavelet coefficients. <br>
<a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a>: Reduces a -dimensional dataset into dimensions where is a user-specified hyperparameter and . PCA reduces the dimensionality by combining certain attributes, thereby creating a smaller subset of attributes without entirely removing dimensions. The process is as follows: The input data is scaled to a common range.
<br>Compute <a data-tooltip-position="top" aria-label="Orthonormalilty" data-href="Orthonormalilty" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Orthonormal</a> unit vectors, each pointing in a direction perpendicular to the others. These vectors are called principal components.
<br>The principal components are sorted in decreasing order of significance. Significance refers to how much of the <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">variance</a> of the dataset is explained by the axis.
Eliminate the axes that are the least significant. Attribute Subset Selection: The process of entirely removing attributes that are redundant or irrelevant for the data mining task. This can be done manually by a domain expert, though it is almost always better to be performed analytically using one of the following techniques: Forward Selection: Start with an empty set of attributes and at each iteration, add the best attribute.
Backward Elimination: Start with the full set of attributes, and at each iteration, remove the worst attribute.
<br>Decision Tree Induction: Create a <a data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Tree</a> of the given data, and attributes that do not appear in the tree can be assumed to be irrelevant. <br>
Histograms: A visualization technique that uses binning to approximate data distributions. A histogram partitions a distribution into consecutive disjoint subsets known as bins. Bins often represent a continuous <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="36" to="41" origin-text="range" class="internal-link virtual-link-a">range</a> of values for an attribute. An equal-width histogram has a uniform range for each bin.
An equal-frequency histogram has a uniform number of samples in each bucket. <br>
<a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>: The process of partitioning a dataset of objects into clusters such that intra-cluster items are similar and inter-cluster items are dissimilar. Similarity can be defined using a <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> such as <a data-tooltip-position="top" aria-label="Euclidean Distance" data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean distance</a>. The quality of a cluster can be quantified by its diameter, which is the maximum distance between any two values in the cluster. The centroid distance is another measure of cluster quality which is defined as the average distance of each object in the cluster from the cluster's centroid. The centroid is the average point in space of the cluster.
Clustering can be used for data reduction by replacing the actual data with the cluster representations of the data. Sampling: Can be used as a data reduction method by selecting a subset of the data objects in the whole dataset. Common sampling techniques include: Simple random sample without replacement: Drawing tuples randomly from the dataset and removing the chosen tuple from the drawing pool.
Simple random sample with replacement: Drawing samples randomly without removing them from the pool.
Stratified Sample: Performing simple random sampling from mutually disjoint subsets of the dataset, called strata. This is useful for skewed datasets to ensure equal representation from the entire distribution. Data cubes are multidimensional representations of data stored in data warehouses. Data cubes typically store aggregated data (e.g. Yearly Sales). Each cell holds an aggregate data value and each dimension represents a different level of abstraction (e.g. Yearly). The cube at the lowest abstraction level is the base cuboid. This typically corresponds to individual entity such as sales.
The cube at the highest level of abstraction is the apex cuboid. It summarizes the data across all dimensions. Data Transformation: The process of converting data from one form into another to prepare for mining. Common transformation strategies include: Smoothing: The process of removing noise from data. This includes binning, regression, and clustering.
Feature Engineering: The process of constructing new features from existing features.
Aggregation: Summarizing data at a higher level of abstraction, such as calculating average monthly sales rather than daily sales.
Normalization: Changing values of attributes to a uniform scale.
Discretization: Converting continuous range values into discrete categories.
Concept Hierarchy Generation: Where specific attributes can be generalized to to higher levels of abstraction by organizing data into a tree structure. Lower levels of the tree are more specific, higher levels are more broad. <br>
To avoid having the unit of measurement impact the results of the data mining process, it is recommended to normalize the data to a common range. Normalization is particularly important for distance-based algorithms like <a data-href="K-Nearest Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest Neighbors</a> or <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a>. Normalization is also critical for <a data-tooltip-position="top" aria-label="Neural Network" data-href="Neural Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Neural Networks</a>, because the backpropogation algorithm performs significantly better if input values are normalized. <br><a data-href="Min-Max Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Min-Max Normalization</a>: A linear transformation which maps a set of values to a new range by computing: <br><a data-href="Z-Score Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score Normalization</a>: Normalizes the data to have a mean of 0 and standard deviation of 1, and is computed as: Decimal Scaling: Normalizes by moving the decimal point of the values. Decimal scaling is computed as: Where is the smallest integer such that . Discretization techniques are supervised if they use class information to perform its discretization, else, its unsupervised. Top-down discretization techniques start from the entire attribute range and split the range into intervals. Bottom-up techniques start with individual values and merge them to form intervals. Binning, as mentioned previously, can be used as an unsupervised, top-down discretization technique.
Clustering: Can be used to generate concept hierarchies with top-down or bottom-up algorithms.
<br>Classification Decision Trees: Can be used as a supervised top-down discretization technique. The main idea is to split points in a way that maximizes information gain. This is the split point which results in partitions that contain as many tuples of the same class as possible. The reduction in <a data-href="Entropy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entropy</a> is what quantifies the information gain.
ChiMerge: A supervised bottom-up discretization technique based on the chi-squared test. tests are performed on each pair of adjacent values and pairs with the lest values are merged together. <br>
Concept Hierarchy: A concept hierarchy for <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="26" to="33" origin-text="nominal" class="internal-link virtual-link-a">nominal</a> attributes is a tree-like structure which groups categories into broader categories or classes. Leaves typically represent specific values, such as 'cat' or 'dog', and nodes represent higher level categories such as 'animals'. Manual definition of concept hierarchies can be a tedious task, though, there are methods for more efficient generation: Specification of a partial ordering of attributes at the schema level. A domain expert can define a ordering on attributes at the schema level, such as food &gt; fruits &gt; citrus &gt; lemon.
<br>A system can automatically generate a hierarchical ordering using a <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a> function. One common heuristic is the number of distinct values in the domains of each attribute. More granularized attributes tend to have more distinct values, for example, there are more countries then there are continents. Some manual adjustments may be needed by users. J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Haryana, India ; Burlington, Ma: Elsevier, 2018.
]]></description><link>https://emujakic.github.io/TechKB/textbooks/data-mining-concepts-and-techniques-summary.html</link><guid isPermaLink="false">TEXTBOOKS/Data Mining Concepts and Techniques Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Binary Data]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-08Binary data is a type of <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> with only two possible values, typically 1 and 0. Binary data is a specific type of <a data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal Data</a>, meaning the values are non-numeric, and qualitative.
Presence: Binary data is commonly used to represent the presence or absence of a specific attribute, 1 meaning the attribute is present, 0 meaning the attribute is absent.
Truth: Binary data is also commonly used to represent truth, where 1 indicates truth, and 0 indicated falsehood.
Opposing Categories: Binary data is commonly used to represent 2 opposing categories, such as male/female, or employed/unemployed.
<br>Since <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="6" to="18" origin-text="nominal data" class="internal-link virtual-link-a">nominal data</a> lacks numerical significance, data operations such as <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> or <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a> cannot be performed. However, the frequency of nominal data values can be analyzed, and a measure like the <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a> can describe the most common category within a given dataset.A binary attribute is symmetric if each state 0 or 1 is equally valuable, such as a gender attribute. A binary attribute is asymmetric if the two states are not equally valuable, such as the results of a disease test.<br>Asymmetric binary attributes require careful consideration in <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a> tasks to ensure the model understands the underlying implications of the data. Common strategies include:
<br><a data-href="Label Encoding" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Label Encoding</a>: Label encoding assigns numerical values to binary attributes. Each binary class can be assigned a value representative of its importance, for example, assigning the true class a value of , while the false class is assigned a value of .
Class Weighting: In binary classification tasks, assigning different weights to each state during model training can put more emphasis on a particular class.
Calculating the similarity and dissimilarity of binary attributes involves different methods depending on whether the attribute is symmetric or not.For symmetric binary attributes, common measures include:
<br>
<a data-href="Jaccard Coefficient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jaccard Coefficient</a>: The size of the intersection of two sets over their union: Where: is the number of attributes where and are 1. is the number of attributes where A is 1 and B is 0 is the number of attributes where A is 0 and B is 1 <br>
<a data-href="Dice Coefficient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dice Coefficient</a>: Twice the size of the intersection of two sets over the sum of the sets: For asymmetric binary attributes, common measures include:
Weighted Jaccard Coefficient: The Jaccard coefficient can be modified to emphasize a particular class: Where:
​ is 1 if the element is present in set and 0 if absent.
​ is 1 if the element is present in set and 0 if absent.
​ is the weight assigned to the element . <br><a data-href="Binary Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Binary Regression</a> estimates a function that maps one or more independent variables to a single dependent binary variable. Common techniques include:
<br>
<a data-href="Logistic Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logistic Regression</a>: A statistical method used for binary classification, predicting the <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probability</a> that a given input vector belongs to a certain binary category. It is essentially a <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> model with a Logistic Function applied to map the output to a value between 0 and 1. <br>
<a data-href="Probit Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probit Regression</a>: Similar to logistic regression, though, it assumes that errors between the predicted and actual values are normally distributed. Probit regression also uses the <a data-href="Probit Link Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Probit Link Function</a> rather than the logistic function. J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>GeeksforGeeks, “Jaccard Similarity,”&nbsp;GeeksforGeeks, Mar. 17, 2025. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/python/jaccard-similarity/" target="_self">https://www.geeksforgeeks.org/python/jaccard-similarity/</a> (accessed Aug. 01, 2025).
<br>“Binary data,”&nbsp;Wikipedia, Sep. 13, 2021. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Binary_data" target="_self">https://en.wikipedia.org/wiki/Binary_data</a>
Wikipedia Contributors, “Binary regression,”&nbsp;Wikipedia, Mar. 27, 2022.
]]></description><link>https://emujakic.github.io/TechKB/notes/math/binary-data.html</link><guid isPermaLink="false">NOTES/Math/Binary Data.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 08 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Ordinal Data]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-07Ordinal data is a type of <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> that represents categories that a defined order or ranking. Unlike <a data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal Data</a>, which has no intrinsic ordering, ordinal data allows for the comparison of the relative positioning of items.A key property of ordinal data is that the interval between adjacent ranks is not necessarily equal. For example, the interval between "expensive" and "average" is not necessarily equal to the interval between "cheap" and "average."Another key property of Ordinal data is that it is non-numeric. While ordinal variables may be represented by numbers (e.g. 1, 2, 3), these numbers are only labels that indicate orders and not precise values.Examples of ordinal data include attributes like education levels (e.g. High School, Bachelor's, Masters), or survey responses (e.g. Unsatisfied, Neutral, Satisfied).The analysis of ordinal data requires specific statistical techniques that respect the inherent order of the categories while acknowledging that the intervals between them are not necessarily uniform.
<br>The <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a> and <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a> can be used to summarize the central tendencies and identify the most frequent categories.
<br><a data-tooltip-position="top" aria-label="Bar Chart" data-href="Bar Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bar Charts</a> can visualize the frequency distribution of categories and illustrate the most common or uncommon values. <br>Because ordinal data does not meet the assumptions required for <a data-tooltip-position="top" aria-label="Parametric Test" data-href="Parametric Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Parametric Tests</a>, <a data-tooltip-position="top" aria-label="Non-Parametric Test" data-href="Non-Parametric Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Non-Parametric Tests</a>, such as <a data-href="Mann-Whitney U Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Mann-Whitney U Test</a> or <a data-href="Kruskal-Wallis Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Kruskal-Wallis Test</a> are often used to analyze the difference between groups.
<br><a data-href="Spearman's Rank" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Spearman's Rank</a> correlation can be used to assess relationships between ordinal attributes, providing potential insights on the strength and direction of correlations. J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Haryana, India ; Burlington, Ma: Elsevier, 2018.
<br>“Types of Data | Introduction to Data Science,”&nbsp;<a data-tooltip-position="top" aria-label="http://www.stat.lsa.umich.edu" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.stat.lsa.umich.edu" target="_self">www.stat.lsa.umich.edu</a>. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://dept.stat.lsa.umich.edu/~kshedden/introds/topics/types_of_data/" target="_self">https://dept.stat.lsa.umich.edu/~kshedden/introds/topics/types_of_data/</a>
<br>“Ordinal data,”&nbsp;Wikipedia, Apr. 03, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Ordinal_data" target="_self">https://en.wikipedia.org/wiki/Ordinal_data</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/ordinal-data.html</link><guid isPermaLink="false">NOTES/Math/Ordinal Data.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Measure of Central Tendency]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-06A measure of central tendency is a statistical measure that attempts to describe the center of a dataset. The measure attempts to summarize the dataset with a single value that represents the middle or "average" of the data. The most common measures are the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a>, <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a>, and <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a>. Depending on the characteristics of the underlying dataset, one measure may be more appropriate than the others.<br> <img alt="Pasted image 20250708171735.png" src="https://emujakic.github.io/TechKB/resources/pasted-image-20250708171735.png" target="_self"><br>
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.studyforfe.com/blog/measures-of-central-tendencies-and-dispersions" target="_self">https://www.studyforfe.com/blog/measures-of-central-tendencies-and-dispersions</a><br>The <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mean" class="internal-link virtual-link-a">mean</a>, often referred to as the average, is one of the most widely used measures of central tendency. There are various types of means, with the arithmetic mean being the most common. The arithmetic mean is calculated by summing all values in a dataset and dividing by the number of values.<br>The sample <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="11" to="15" origin-text="mean" class="internal-link virtual-link-a">mean</a>, denoted as , is defined by the formula:Where is the number of values in the dataset.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mean" class="internal-link virtual-link-a">mean</a> is sensitive to <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, so it may not provide an accurate representation of the center when the underlying dataset is asymmetric, or has many extreme <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="128" to="136" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>. For symmetric distributions, the mean is a useful measure that provides the average value of the dataset.
The mean is often used in algorithms such as linear regression, where it helps minimize error in predictions.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="4" to="10" origin-text="median" class="internal-link virtual-link-a">median</a> is the middle value of a dataset when it is ordered. If there is an even number of values, then the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="111" to="115" origin-text="mean" class="internal-link virtual-link-a">mean</a> (average) of the two middlemost values are taken.<br>If is even, the formula for the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="30" to="36" origin-text="median" class="internal-link virtual-link-a">median</a> is:<br>While if is odd, the formula for the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="29" to="35" origin-text="median" class="internal-link virtual-link-a">median</a> is:
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="4" to="10" origin-text="median" class="internal-link virtual-link-a">median</a> is less susceptible to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="34" to="42" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> than the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="52" to="56" origin-text="mean" class="internal-link virtual-link-a">mean</a>, therefore, it provides a more accurate measure of the center for skewed distributions.
<br>In data science and machine learning, the <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="42" to="46" origin-text="mode" class="internal-link virtual-link-a">mode</a> is useful for categorical variables, such as determining the most common class label in classification tasks.
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mode" class="internal-link virtual-link-a">mode</a> of a dataset is the value that appears most frequently. A dataset can have:
<br>One <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mode" class="internal-link virtual-link-a">mode</a> (unimodal)
Two modes (bimodal)
Multiple modes (multimodal)
<br>The <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mode" class="internal-link virtual-link-a">mode</a> is useful for analyzing <a data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal Data</a>, as it helps identify the most "popular" category within a given set of values.<br>The <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="4" to="8" origin-text="mode" class="internal-link virtual-link-a">mode</a> can be defined as:Where is the frequency of the value in a given dataset.
<br>Unlike the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="11" to="15" origin-text="mean" class="internal-link virtual-link-a">mean</a> or <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="19" to="25" origin-text="median" class="internal-link virtual-link-a">median</a>, the <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="31" to="35" origin-text="mode" class="internal-link virtual-link-a">mode</a> can be directly applied to <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a>, making it one of the most simple and versatile measures of central tendency. J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Amsterdam ; Boston: Elsevier/Morgan Kaufmann, 2012.
<br>Laerd Statistics, “Measures of central tendency,”&nbsp;Laerd Statistics, 2018. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php" target="_self">https://statistics.laerd.com/statistical-guides/measures-central-tendency-mean-mode-median.php</a>
<br>“Central tendency,”&nbsp;Wikipedia, Jul. 13, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Central_tendency" target="_self">https://en.wikipedia.org/wiki/Central_tendency</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html</link><guid isPermaLink="false">NOTES/Math/Measure of Central Tendency.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://emujakic.github.io/TechKB/HTML/resources/pasted-image-20250708171735.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://emujakic.github.io/TechKB/HTML/resources/pasted-image-20250708171735.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Median]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-07The Median is a <a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a> that represents the middle value of an ordered dataset. It is particularly useful in scenarios where the data is skewed or contains <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, as it provides a more accurate representation of the center of the dataset compared to other measures like the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a>. The median can only be applied to <a data-href="Numerical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numerical Data</a> and not <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a>.<br>The median is defined as the 50th <a data-href="Percentile" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percentile</a> or the second <a data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartile</a> (Q2), which divides the dataset into two equal halves. This means that half of the data points are below the median and half are above it.
Uniqueness: In a finite dataset, the median is unique, meaning there is only one median.
<br>Robustness: The median is robust to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="26" to="34" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>, making it a reliable measure in skewed or noisy datasets.
Non-Parametric: The median does not assume a particular distribution of the underlying data.
Invariance: The median remains unchanged under linear transformations of the dataset.
If is even, the formula for the median is:While if is odd, the formula for the median is:<br>The multivariate median extends the concept of the median to multiple dimensions. One of the most common multivariate median is the <a data-href="Geometric Median" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Geometric Median</a> which focuses on minimizing the <a data-tooltip-position="top" aria-label="Euclidean Distance" data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean distance</a> of a set of points in a Euclidean space. The geometric median is defined as:Where:
<br> denotes the <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="13" to="31" origin-text="Euclidean distance" class="internal-link virtual-link-a">Euclidean distance</a>. represents the -th data point in -dimensional space. <br>Machine Learning: Multivariate medians are commonly employed in machine learning, particularly in clustering algorithms when dealing with centroid initialization, such as in <a data-href="DBSCAN" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">DBSCAN</a>.
Computer Vision: The geometric median can be used to find a central point among pixel locations, helping in tasks such as object tracking.
<br><a data-href="Robust Statistics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Robust Statistics</a>: Multivariate medians are utilized as a <a href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" target="_self" rel="noopener noreferrer" from="41" to="68" origin-text="measure of central tendency" class="internal-link virtual-link-a">measure of central tendency</a> over other measures such as the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="101" to="105" origin-text="mean" class="internal-link virtual-link-a">mean</a>, due to median's robustness to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="137" to="145" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>.
<br>Other common <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measures of Central Tendency</a> include the <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a>, which represents the average value of a population, the <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a>, which identifies the most frequently occurring value in a set, and the <a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>, calculated as the average of the maximum and minimum values.
J. Han, M. Kamber, and J. Pei,&nbsp;Data Mining : Concepts and Techniques. Burlington, Ma: Elsevier, 2012.
<br>Wikipedia, “Median,”&nbsp;Wikipedia, Apr. 17, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Median" target="_self">https://en.wikipedia.org/wiki/Median</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/median.html</link><guid isPermaLink="false">NOTES/Math/Median.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Least Squares]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-21The least squares method is an optimization technique that attempts to find a linear function which minimizes the sum of squared distances between observed and predicted values. This method is widely used in <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> analysis for finding the best-fit function between a matrix of features and one or more independent variables.<br><img alt="linearRegression.png" src="https://emujakic.github.io/TechKB/resources/linearregression.png" target="_self"><br>In a <a data-href="Simple Linear Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simple Linear Regression</a>, the model is defined as:Where: is the dependent variable. is the slope of the line. is the independent variable. is the y-intercept.
<br>The objective is to minimize the sum of squared <a data-tooltip-position="top" aria-label="Euclidean Distance" data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean distances</a>:Where: is the number of data points. are the observed data points.
This is equivalent to min
Calculate Slope: Use the following formula to calculate the slope, : Calculate Y-Intercept: Use the slope calculated in the previous step and the following formula to calculate the y-intercept, : Formulate the Function: Construct the line of best fit in the form of <br>Sensitive to <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outliers</a>:The least squares method is sensitive to <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="42" to="50" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>, which could unfairly skew the resulting regression line, resulting in inaccurate predictions.
<br>Assumes Linearity: The least squares method assumes a linear relationship between the dependent and independent variables. If the underlying relationship is non-linear, this can introduce <a data-href="Bias" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bias</a> in the predictions.
<br>Assumes <a data-href="Homoscedasticity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Homoscedasticity</a>: The least squares method assumes that the <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">variance</a> of errors is a constant (homoscedastic), rather than a function of the independent variable (<a data-href="Heteroscedastic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heteroscedastic</a>).
<br><a data-href="Multicollinearity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Multicollinearity</a>: If the independent variables are highly correlated, the least squares method has difficulty determining the effect of each attribute on the dependent variable, making the model unstable.
The most common form of the least squares method, commonly used in Linear Regression models. It simply minimizes the sum of squared residuals without any weights.<br>Extends ordinary least squares to handle heteroscedasticity by assigning weights to data objects based on <a data-href="Covariance Matrix" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Covariance Matrix</a> of the residuals.<br>A specific type of generalized least squares, used when the dataset exhibits heteroscedasticity. WLS is more robust because it weighs the influence of each data point based on its <a href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" target="_self" rel="noopener noreferrer" from="180" to="188" origin-text="variance" class="internal-link virtual-link-a">variance</a>. <br>Also known as L2 regularization, ridge regression is a type of linear regression that introduces a penalty term to the OLS cost function. Ridge regression adds the squared coefficients as a penalty to the cost function, thereby, punishing large coefficient values. This helps prevent overfitting and addresses any <a data-href="Multicollinearity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Multicollinearity</a> in the independent variables.
The cost function for ridge regression defined as:Where: is the actual output. is the predicted output. are the coefficients is the regularization parameter which determines the magnitude of the penalty term.
<br>By adjusting the ridge parameter, λ, ridge regression allows for control over the bias-<a href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" target="_self" rel="noopener noreferrer" from="87" to="95" origin-text="variance" class="internal-link virtual-link-a">variance</a> tradeoff. As increases, the bias of the model increases and the variance decreases. Optimizing this parameter can achieve the ideal balance between overfitting and underfitting model.Also known as L1 regularization, lasso regression is a type of linear regression which, like ridge regression, introduces a penalty term to the OLS cost function. Lasso regression adds the absolute coefficient values to the cost function, this allows the coefficients of irrelevant variables to be shrunk down to 0, thereby, simplifying and regularizing the model.
The cost function for lasso regression defined as:Where: is the actual output. is the predicted output. are the coefficients is the regularization parameter which determines the magnitude of the penalty term.
<br>Unlike ridge regression, which shrinks coefficients but typically keeps all predictors in the model, lasso regression can set the coefficients of irrelevant variables exactly to zero. This makes it an effective technique for <a data-href="Feature Selection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Feature Selection</a>, that is, identifying and retaining only the most important variables.
<br>Prabhu Raghav, “Linear Regression Simplified - Ordinary Least Square vs Gradient Descent,”&nbsp;Medium, May 15, 2018. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/data-science/linear-regression-simplified-ordinary-least-square-vs-gradient-descent-48145de2cf76" target="_self">https://medium.com/data-science/linear-regression-simplified-ordinary-least-square-vs-gradient-descent-48145de2cf76</a> (accessed Jul. 21, 2025).
<br>GeeksforGeeks, “Least Square Method | Definition Graph and Formula,”&nbsp;GeeksforGeeks, Jul. 06, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/least-square-method/" target="_self">https://www.geeksforgeeks.org/maths/least-square-method/</a>
<br>“Least squares,”&nbsp;Wikipedia, Dec. 19, 2019. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Least_squares" target="_self">https://en.wikipedia.org/wiki/Least_squares</a>
<br>A. Menon, “Linear Regression Using Least Squares - TDS Archive - Medium,”&nbsp;Medium, Sep. 08, 2018. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/data-science/linear-regression-using-least-squares-a4c3456e8570" target="_self">https://medium.com/data-science/linear-regression-using-least-squares-a4c3456e8570</a> (accessed Jul. 21, 2025).
<br>The Organic Chemistry Tutor, “Linear Regression Using Least Squares Method - Line of Best Fit Equation,”&nbsp;YouTube. Jul. 13, 2020. [YouTube Video]. Available: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=P8hT5nDai6A" target="_self">https://www.youtube.com/watch?v=P8hT5nDai6A</a>
<br>GeeksforGeeks, “Ridge Regression,”&nbsp;GeeksforGeeks, Jun. 11, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/machine-learning/what-is-ridge-regression/" target="_self">https://www.geeksforgeeks.org/machine-learning/what-is-ridge-regression/</a> (accessed Jul. 23, 2025).
<br>GeeksforGeeks, “What is Lasso Regression?,”&nbsp;GeeksforGeeks, May 15, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/machine-learning/what-is-lasso-regression/" target="_self">https://www.geeksforgeeks.org/machine-learning/what-is-lasso-regression/</a>
]]></description><link>https://emujakic.github.io/TechKB/notes/math/least-squares.html</link><guid isPermaLink="false">NOTES/Math/Least Squares.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate><enclosure url="https://emujakic.github.io/TechKB/resources/linearregression.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://emujakic.github.io/TechKB/resources/linearregression.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Manhattan Distance]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-31The Manhattan distance is a <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> defined as the sum of the absolute differences of the Cartesian coordinates of two points. It is the distance between two points using only grid-like movements (horizontal and vertical). The Manhattan distance is also the norm of the distance between two vectors in <a data-href="Lp Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Lp Space</a>.The Manhattan distance between two objects in -dimensional space is calculated as:
<br>Positive: Like any other distance metric, the <a data-tooltip-position="top" aria-label="Range" data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">range</a> of the Manhattan distance is where a 0 distance indicates that the two points are at the same location.
Symmetric: The Manhattan distance is symmetric, meaning <br><a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>: The Manhattan distance obeys the triangle inequality, which states that the distance from to is always less than or equal to the distance from to plus the distance from to . Meaning that taking a detour through a third point cannot result in a shorter distance than a direct path from to . <br><a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>: Manhattan distance may be used in clustering algorithms like <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a> to group similar data points.
<br><a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>: The Manhattan distance may be employed in distance-based classification algorithms such as <a data-href="K-Nearest-Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest-Neighbors</a>. Measuring Pixel Differences: The Manhattan distance, or other distance measures, may be employed to compare pixel values, or features in image recognition tasks. <br>The Manhattan distance can be used for calculating the shortest path between points. It is also an <a data-href="Admissible" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Admissible</a> and <a data-href="Consistent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Consistent</a> <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a> in search algorithms such as <a data-href="A* Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">A* Search</a>.
Grid-Navigation: The Manhattan distance is particularly useful for pathfinding in domains which only allow grid-like movements, such as a chessboard or a city network. <br><a data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Outlier</a> Detection: Manhattan distance can be used for distance based <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="52" to="59" origin-text="outlier" class="internal-link virtual-link-a">outlier</a> detection algorithms such as <a data-href="DBSCAN" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">DBSCAN</a>.
<br><a data-href="Multidimensional Scaling" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Multidimensional Scaling</a>: Manhattan distance may be employed to visualize higher-dimensional data into lower dimensions.
Other common distance measures include:
<br><a data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean Distance</a>: The <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="6" to="28" origin-text="straight-line distance" class="internal-link virtual-link-a">straight-line distance</a> between 2 points in Euclidean space.
<br><a data-href="Chebyshev Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev Distance</a>: The maximum absolute difference between 2 vectors across all dimensions.
<br><a data-href="Minkowski Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minkowski Distance</a>: A generalized distance measure that is defined by a parameter whose common values are the Manhattan distance, Euclidean distance, and Chebyshev distance.
<br><a data-href="Jaccard Index" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jaccard Index</a>: Used to compare sets and is defined as the size of the intersection of 2 sets, over the size of their union. J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Haryana, India ; Burlington, Ma: Elsevier, 2018.
<br>“Taxicab geometry,”&nbsp;Wikipedia, Jan. 21, 2022. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Taxicab_geometry" target="_self">https://en.wikipedia.org/wiki/Taxicab_geometry</a>
<br>GeeksforGeeks, “Clustering Distance Measures,”&nbsp;GeeksforGeeks, May 24, 2024. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/machine-learning/clustering-distance-measures/#common-distance-measures" target="_self">https://www.geeksforgeeks.org/machine-learning/clustering-distance-measures/#common-distance-measures</a> (accessed Jul. 31, 2025).
]]></description><link>https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html</link><guid isPermaLink="false">NOTES/Math/Manhattan Distance.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Thu, 31 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Commutative Property]]></title><description><![CDATA[Author: Ernad Mujakic
Date: 2025-07-20The commutative property states that the sums and products of values is unaffected by the order those values come in. It allows you to transform mathematical expressions into equivalent forms without altering its value.The commutative property applies to addition. For any numbers , and :The commutative property applies to multiplication. For any numbers , and :Operations such as subtraction or division are not commutative:
Subtraction: , subtraction is actually <a data-href="Anti-Commutative" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Anti-Commutative</a>, meaning, Division: Exponentiation: Matrix Multiplication: For matrices , , and with compatible dimensions: The anti-commutative property refers to specific operations where switching the order of arguments negates the result of the expression.Subtraction is an anti-commutative operation. Meaning, for any 2 values and :<br>Some <a data-href="Logical Connectives" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logical Connectives</a> are commutative, allowing for the rearrangement of variables without changing the truth value of the logical expression.The commutative property applies to conjunction (AND), for any variables and :The commutative property applies to disjunction (OR), for any variables and :<br>In set theory, the commutative property refers to how the <a data-href="Union" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Union</a> and <a data-href="Intersection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Intersection</a> of sets are unaffected by the order of the sets they are applied to.for any sets , and :for any sets , and :<br>The <a href="https://emujakic.github.io/TechKB/notes/math/associative-property.html#_0" target="_self" rel="noopener noreferrer" from="4" to="24" origin-text="associative property" class="internal-link virtual-link-a">associative property</a> states that the sum or product of any group of values is not affected by how the values are grouped.
Addition: Multiplication: <br>“Commutative property,”&nbsp;Wikipedia, Dec. 04, 2020. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Commutative_property" target="_self">https://en.wikipedia.org/wiki/Commutative_property</a>
<br>GeeksforGeeks, “Commutative Property Definition | Commutative Law and Examples,”&nbsp;GeeksforGeeks, Dec. 28, 2023. <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/maths/commutative-property/" target="_self">https://www.geeksforgeeks.org/maths/commutative-property/</a> (accessed Jul. 20, 2025).
]]></description><link>https://emujakic.github.io/TechKB/notes/math/commutative-property.html</link><guid isPermaLink="false">NOTES/Math/Commutative Property.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 20 Jul 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Practice Problems]]></title><description><![CDATA[
What is data mining? Answer: Data mining is the application of analytical techniques to extract patterns and knowledge from data. Data mining is a essential and impactful consequence of the recent exponential availability of digital data. It is both the result of the evolution of database technology, which stores and organizes data in a structured way, allowing for efficient access for data analysis, as well as a consequence of machine learning evolution which requires large datasets to train reliable, accurate models. How is a data warehouse different from a database? How are they similar? Answer: A database is a single schema consisting of related data stored in a single place. A data warehouse, on the other hand, stores data from multiple sources and timeframes, and allows multidimensional analysis which can make use of data from different levels of abstraction. Define each of the following data mining functionalities: characterization, discrimination, association and correlation analysis, classification, regression, clustering, and <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="174" to="181" origin-text="outlier" class="internal-link virtual-link-a">outlier</a> analysis. <br>Answer: Characterization is the summarization of the general characteristics or features of a target class of data. Discrimination is the comparison of the general characteristics of the target class of data to a set of contrasting classes. Association is the analysis of correlations between data objects or attribute-value pairs. <a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a> is the process of finding a model that distinguishes data classes from one another. <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> is the process of finding a model which accurately predicts a continuous, dependent feature of the data. <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a> is the process of grouping and separating data objects based on statistical similarities. Outlier analysis is the discovery of outliers in a dataset. Present an example where data mining is crucial to the success of a business. Answer: Data mining may be crucial to the success of a business when it comes to quality control analysis, which would allow an organization to better detect shortcomings in quality control systems and be able to produce a more consistent product. Explain the difference and similarity between discrimination and classification, between characterization and clustering, and between classification and regression. Answer: Based on your observations, describe another possible kind of knowledge that needs to be discovered by data mining methods but has not been listed in this chapter. Does it require a mining methodology that is quite different from those outlined in this chapter? Answer: <br>Using fraudulence detection as an example, propose two methods that can be used to detect <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="90" to="98" origin-text="outliers" class="internal-link virtual-link-a">outliers</a> and discuss which one is more reliable. <br>Two methods that could be used to detect outliers is the <a data-href="Z-Score" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score</a> method and DBSCAN. Z-score methods detect outliers based on the number of <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="75" to="94" origin-text="standard deviations" class="internal-link virtual-link-a">standard deviations</a> a data point is from the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="120" to="124" origin-text="mean" class="internal-link virtual-link-a">mean</a>. DBSCAN groups points based on density and points in low-density regions are labelled as outliers. Z-score is more reliable because it is based on global rather than local relationships. Describe three challenges to data mining regarding data mining methodology and user interaction issues. Answer: 3 challenges to data mining are data quality and preprocessing, computational complexity, and complex data visualization. What are the major challenges of mining a huge amount of data (e.g., billions of tuples) in comparison with mining a small amount of data (e.g., data set of a few hundred tuple)? Answer: Large amounts of data may be difficult to mine if inefficient algorithms are used, as well as potential needs for cluster or distributed computing which significantly increases complexity and overhead. Outline the major research challenges of data mining in one specific application domain, such as stream/sensor data analysis, spatiotemporal data analysis, or bioinformatics. <br>Answer: The major research challenge in data mining, specifically in the sensor/signal analysis domain is the wide <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="109" to="114" origin-text="range" class="internal-link virtual-link-a">range</a> of potential domain value mappings. Give three additional commonly used statistical measures that are not already illustrated in this chapter for the characterization of data dispersion. Discuss how they can be computed efficiently in large databases. <br>Answer: <a href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" target="_self" rel="noopener noreferrer" from="2" to="10" origin-text="Variance" class="internal-link virtual-link-a">Variance</a> is the average of the square differences of the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="59" to="63" origin-text="mean" class="internal-link virtual-link-a">mean</a>, or the square of the <a data-href="Standard Deviation" href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a>.
Answer: the Mean Absolute Deviation is the average of the absolute differences between each data point and the mean. Answer: The coefficient of variation is expressed as a percentage of the mean: Suppose that the data for analysis includes the attribute age. The age values for the data tuples are (in increasing order) 13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70.
<br>(a) What is the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="16" to="20" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the data? What is the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="46" to="52" origin-text="median" class="internal-link virtual-link-a">median</a>?
<br>(b) What is the <a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="16" to="20" origin-text="mode" class="internal-link virtual-link-a">mode</a> of the data? Comment on the data’s modality (i.e., bimodal, trimodal, etc.).
(c) What is the midrange of the data?
<br>(d) Can you find (roughly) the first <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="37" to="45" origin-text="quartile" class="internal-link virtual-link-a">quartile</a> (Q1) and the third quartile (Q3) of the data? (e) Give the five-number summary of the data.
(f) Show a boxplot of the data.
<br>(g) How is a <a href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" target="_self" rel="noopener noreferrer" from="13" to="21" origin-text="quantile" class="internal-link virtual-link-a">quantile</a>–quantile plot different from a quantile plot? <br>Answer: <a data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mean</a> - 25.37
<br>Answer: <a data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Median</a> - 14
<br>Answer: <a data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Mode</a> - 35 &amp; 25, the data is bimodal since there are 2 modes
<br>Answer: <a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a> - Answer: Q1 = 20 Q3 = 35
Answer: five-number summary is 13, 20, 25, 35, 70
<br>Answer: A <a data-href="Quantile" href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quantile</a> plot compares the quantiles of a dataset against the quantiles of a theoretical distribution, such as a normal distribution. A <a data-href="Quantile-Quantile Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quantile-Quantile Plot</a> plot compares the quantiles of 2 datasets against one another. <br>Suppose that the values for a given set of data are grouped into intervals. Compute an approximate <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="99" to="105" origin-text="median" class="internal-link virtual-link-a">median</a> value for the data. The intervals and corresponding frequencies are as follows: <br>Answer: The <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="6" to="12" origin-text="median" class="internal-link virtual-link-a">median</a> class is 21-50 Answer: Suppose that a hospital tested the age and body fat data for 18 randomly selected adults with the following results: <br>(a) Calculate the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="18" to="22" origin-text="mean" class="internal-link virtual-link-a">mean</a>, <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="24" to="30" origin-text="median" class="internal-link virtual-link-a">median</a>, and <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="36" to="54" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a> of age and %fat.
(b) Draw the boxplots for age and %fat. Answer: Mean (age)- 46.44
Answer: Median (age)- 51 2.5 Briefly outline how to compute the dissimilarity between objects described by the following:
<br>(a) <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="4" to="11" origin-text="Nominal" class="internal-link virtual-link-a">Nominal</a> attributes
(b) Asymmetric binary attributes
(c) Numeric attributes
(d) Term-frequency vectors Answer: Nominal dissimilarity is where i and j are 2 objects, p is the total number of attributes, and m is the number of matching values.
Answer: asymmetric binary dissimilarity is where r is the number of attributes that are 1 for i and 0 for j, s is the number of attributes that are 0 for i and 1 for j, and q is the number of attributes that are 1 for both i and j.
<br>Answer: <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="2" to="20" origin-text="Euclidean distance" class="internal-link virtual-link-a">Euclidean distance</a> for numeric dissimilarity is Dissimilarity for term-frequency vectors is <br>Given two objects represented by the tuples (22, 1, 42, 10) and (20, 0, 36, 8): (a) Compute the <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="96" to="114" origin-text="Euclidean distance" class="internal-link virtual-link-a">Euclidean distance</a> between the two objects. (b) Compute the <a href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" target="_self" rel="noopener noreferrer" from="156" to="174" origin-text="Manhattan distance" class="internal-link virtual-link-a">Manhattan distance</a> between the two objects. (c) Compute the Minkowski distance between the two objects, using q = 3. (d) Compute the supremum distance between the two objects. Answer: Euclidean - 6.71
Answer: Manhattan - 11
Answer: Minkowski - 233 (q = 3)
Answer: Supremum - 6 X Answer: ]]></description><link>https://emujakic.github.io/TechKB/textbooks/data-mining-concepts-and-techniques/practice-problems.html</link><guid isPermaLink="false">TEXTBOOKS/Data Mining-Concepts and Techniques/Practice Problems.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[Practice Problems]]></title><description><![CDATA[
Define in your own words:
(a) intelligence
(b) artificial intelligence
(c) agent
(d) rationality
(e) logical reasoning. Answer: Intelligence is the ability to define and utilize knowledge.
Answer: Rationality is the understanding, prioritizing, and doing the ‘right’ thing.
Answer: Artificial intelligence is a program that acts rationally given its knowledge base.
Answer: An agent is anything that can act upon its environment, sometimes an agent can observe its environment with sensors.
Answer: Logical reasoning is coming to sound conclusions based on given knowledge and the application of logical axioms and rules to derive new conclusions. Read Turing’s original paper on AI&nbsp;<a data-tooltip-position="top" aria-label="https://aimacode.github.io/aima-exercises/intro-exercises/" rel="noopener nofollow" class="external-link is-unresolved" href="https://aimacode.github.io/aima-exercises/intro-exercises/" target="_self">Turing:1950</a>&nbsp;.In the paper, he discusses several objections to his proposed enterprise and his test for intelligence. Which objections still carry weight? Are his refutations valid? Can you think of new objections arising from developments since he wrote the paper? In the paper, he predicts that, by the year 2000, a computer will have a 30% chance of passing a five-minute <a href="https://emujakic.github.io/TechKB/notes/ai/turing-test.html#_0" target="_self" rel="noopener noreferrer" from="363" to="374" origin-text="Turing Test" class="internal-link virtual-link-a">Turing Test</a> with an unskilled interrogator. What chance do you think a computer would have today? In another 50 years? Answer: <br>Every year the Loebner Prize is awarded to the program that comes closest to passing a version of the&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Turing_test" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Turing_test" target="_self">Turing Test</a>. Research and report on the latest winner of the Loebner prize. What techniques does it use? How does it advance the state of the art in AI? Answer: Are reflex actions (such as flinching from a hot stove) rational? Are they intelligent? Answer: <br>There are well-known classes of problems that are intractably difficult for computers, and other classes that are provably undecidable. Does this <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="146" to="150" origin-text="mean" class="internal-link virtual-link-a">mean</a> that AI is impossible? Answer: Suppose we extend Evans’s&nbsp;SYSTEM&nbsp;program so that it can score 200 on a standard IQ test. Would we then have a program more intelligent than a human? Explain. Answer: <br>The neural structure of the sea slug&nbsp;Aplysis&nbsp;has been widely studied (first by Nobel Laureate Eric Kandel) because it has only about 20,000 neurons, most of them large and easily manipulated. Assuming that the cycle time for an&nbsp;Aplysis&nbsp;neuron is roughly the same as for a human neuron, how does the computational power, in terms of memory updates per second, compare with the high-end computer described in (Figure&nbsp;<a data-tooltip-position="top" aria-label="https://aimacode.github.io/aima-exercises/figures/computer-brain-table.png" rel="noopener nofollow" class="external-link is-unresolved" title="computer-brain-table" href="https://aimacode.github.io/aima-exercises/figures/computer-brain-table.png" target="_self">1.3</a>)? Answer: How could introspection—reporting on one’s inner thoughts—be inaccurate? Could I be wrong about what I’m thinking? Discuss. Answer: To what extent are the following computer systems instances of artificial intelligence: Supermarket bar code scanners, Web search engines, Voice-activated telephone menus, Internet routing algorithms that respond dynamically to the state of the network. Answer: To what extent are the following computer systems instances of artificial intelligence:
Supermarket bar code scanners. Voice-activated telephone menus. Spelling and grammar correction features in Microsoft Word. Internet routing algorithms that respond dynamically to the state of the network. Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: X Answer: ]]></description><link>https://emujakic.github.io/TechKB/textbooks/ai-a-modern-approach/practice-problems.html</link><guid isPermaLink="false">TEXTBOOKS/AI-A Modern Approach/Practice Problems.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Summary]]></title><description><![CDATA[
Name: Stuart Russell and Peter Norvig
Edition: 4th Edition
AI: A Modern Approach by Norvig and Russel is a foundational text in the dynamic field of artificial intelligence. The book covers a wide <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="117" to="122" origin-text="range" class="internal-link virtual-link-a">range</a> of topics, from Markov models and evolutionary algorithms, to natural language processing. This summary attempts to breaks down the main ideas and insights from the book. The field of AI is concerned with the understanding, engineering, and implementation of intelligent agents. Intelligence can be defined through several perspectives: <br>Acting Humanly- The ability to pass a <a data-href="Turing Test" href="https://emujakic.github.io/TechKB/notes/ai/turing-test.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Turing Test</a>.
Thinking Humanly- Thinking like a human.
Thinking Rationally- Acting in such a way as to achieve the 'best' possible outcome.
Beneficial Machines- Acting in a way beneficial to humans. <br>
<a data-href="Utility" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility</a> is the subjective value of an outcome. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a> is a branch of logic made up of predicates that return either true or false, universal/existential quantifiers, terms, and logical connectives such as 'and' 'or' 'not'. <br>
<a data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Probability</a> extends logic to scenarios involving uncertainty, allowing for the modeling of real-world conditions where information is incomplete or ambiguous. <br>
<a data-href="Decision Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Theory</a> deals with the principles and methods for making rational decisions under uncertainty. <br>
<a data-href="Game Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game Theory</a> is a framework for analyzing interdependent multi-agent environments. <br>
<a data-href="Control Theory" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Control Theory</a> is the design of systems that can automatically adjust their behavior to achieve desired outcomes. A cost function quantifies the cost of a particular action or sequence of actions. Something is 'stochastic' if it exhibits uncertainty. <br>
A <a data-href="Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Markov Model</a> is a system where the following state depends only on the current state. A Markov Process is a stochastic process that satisfies the Markov Model. A <a data-href="Hidden Markov Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hidden Markov Model</a> is a statistical model that represents systems that transitions between different hidden states, while perceiving observable outputs. <br>
A <a data-href="Bayesian Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bayesian Network</a> is a probabilistic model implemented as a directed acyclic graph that represents a set of <a data-tooltip-position="top" aria-label="Random Variable" data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variables</a> and their conditional dependencies, as well as a set of conditional <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="69" to="80" origin-text="probability" class="internal-link virtual-link-a">probability</a> distribution tables. <br>
<a data-href="Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent</a> - Anything that can perceive its environment with sensors and act upon it with actuators. <br>
<a data-href="Percept Sequence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percept Sequence</a> - Everything an agent has perceived. <br>
<a data-href="Agent Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Agent Function</a> - An abstract mathematical function that maps percept sequences to actions. Agent Program - A concrete implementation of some abstract agent function. Performance Measure - Evaluates the desirability of an outcome. Information Gathering - Performing potentially sub-optimal actions in order the perceive new information about the environment. Rationality maximizes expected performance based on the knowledge available. What is rational at a given time-step is based on the agent's performance measure, its available actions, its prior knowledge of the environment, as well as its percept sequence up until that time-step. <br>
<a data-href="Task Environment" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Task Environment</a> - The factors that determine how an agent operates. The task environment consists of the performance measure, sensors, actuators, and external environment. A task environment can be fully observable, meaning the agent's sensors give it complete knowledge about all relevant variables of the environment at all times. A Task environment is partially observable if the sensors provide a noisy or incomplete description of the actual state at any time step. A task environment is single agent if there is only one actor that influences the environment, else, it is a multi-agent environment. <br>
A task environment is deterministic if the next state is completely determined by the current state and the action taken. Otherwise, the environment is nondeterministic or stochastic. An environment is uncertain if there is uncertainty in either the <a data-href="Sensor Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Sensor Model</a> - which returns the perceived output of the current state, or if there is uncertainty in the <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a> - which returns the next state based on the current state and the action taken. Together the transition and sensor model allow the agent to keep track of the state of the world . A task environment is episodic if the sequence of states are divided into atomic episodes, that is, the next state (episode) does not depend on the actions from previous states. A task environment is sequential if actions at any given state can impact the actions taken in future states. A task environment is dynamic if it can change while the agent is deliberating, otherwise, the environment is static. If the environment itself doesn't change but the passage of time impacts the agent's performance measure, the environment is considered semi-dynamic. <br>
An environment is known if the outcomes (or <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a> of outcomes) of actions are given. Otherwise, the environment is unknown and the agent will have to learn the result of its actions. Discrete variables can take on distinct, separate values. <br>
Continuous variables can take on any value in a <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="28" to="33" origin-text="range" class="internal-link virtual-link-a">range</a>. Simple Reflex Agent - An agent that selects an action that selects based only on the current percept. Is susceptible to infinite loops in partially-observable environments which can be avoided if the agent selects actions with an element of randomization. Model-Based Reflex Agent - An agent which maintains an internal state which is constructed based on the percept history. The agent's internal state keeps track of the result of actions, as well as how the world evolves independent of itself. Goal-Based Agent - An agent that maintains a current state description as well as goal information which determines the desirability of a state or action. Though, goals treat all non-goal states with equal desirability which leads to poor performance. <br>
Utility-Based Agent - Instead of a goal, the agent has a <a data-href="Utility Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Utility Function</a> which assigns a continuous value to a state or action, allowing the agent to act in such a way that maximizes its utility function. The utility function is simply and internalization of the agent's performance measure, in the case where all an agent's current actions lead to non-goal states, a utility-based agent will choose the action that leads to the "best" state, rather than treating each action as equal like a goal-based agent would. Utility also allows an agent to rationally deal with multiple goals by selecting the goal with the maximum utility. <br>
<a data-href="Learning Agent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Agent</a> - An agent that can learn and improve from experience or training. A learning agent can be of any of the mentioned types. Learning agents typically consist of four main components: Learning Element - The element responsible for making improvements.
Performance Element - The element responsible for selecting external actions. The performance element is what we previously considered as the entire agent.
Critic - The element which provides feedback to the learning element on how well the agent is performing. Problem-solving agent: an agent that needs to plan, and consider a sequence of actions to reach a goal. Search: the computational process a problem-solving agent undertakes. <br>
An algorithm is informed if the agent can estimate its proximity to the goal using a <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a>. Otherwise, the algorithm is uninformed. A problem solving agent: Formulates its goal
Devises a description of the states and actions needed to reach its goal.
Simulates a sequence of actions until it finds a solution.
Executes the solution, if one is found. An system is considered open-loop if it ignores its percepts while executing it's solution. This is done so if the environment is known and deterministic, meaning the agent needs not to keep track of its percepts. <br>A system is closed-loop if it keeps track of its percepts during execution. The term closed loop is used to <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="85" to="89" origin-text="mean" class="internal-link virtual-link-a">mean</a> that the loop between the agent and its environment is not broken. A search problem is defined by the following five components: <br>The set of possible states (<a data-href="State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State Space</a>).
The initial state.
A set of one or more goals states.
The set of actions available to the agent.
<br>The <a data-href="Transition Model" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transition Model</a>, which describes the result of the agent taking a action in its current state. A sequence of actions forms a path within the state space, and a path is considered a solution if it reaches a goal state from the initial state. A solution is considered optimal if it has the lowest cost among all possible solutions. <br>
The state space can be represented as a <a data-href="Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Graph</a> where the vertices represent states, and edges represent actions which lead to other states. The diameter of a graph is the greatest distance between any 2 nodes. A state can be abstracted by removing as much detail as possible, while still retaining validity. <br>
<a data-href="Search Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Algorithm</a>: Takes a search problem and returns a solution or failure. There are four ways to evaluate the performance of a search algorithm: Completeness: Does the algorithm always find a solution if one exists?
Optimality: Does the algorithm find the optimal solution?
<br><a data-href="Time Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Time Complexity</a>: How does the search time scale as the size of the problem scales?
<br><a data-href="Space Complexity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Space Complexity</a>: How does the memory usage scale as the size of the problem scales? In bounded suboptimal search we look for a solution within some constant factor of the optimal solution. In bounded-cost search we look for a solution who's cost is less than some constant. In unbounded-cost search we accept any solution and prioritize the speed of the algorithm. For a search algorithm to be complete in an infinite state space, it needs to systematically explore the space. <br>
<a data-href="Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Tree</a>: Describes the path between states. The root node represents the initial state, and the current node can be expanded by considering the actions available, then generating a new child node for each resulting state. <br>
Frontier: The collection of nodes that have been generated but not yet explored and is typically implemented as a <a data-href="Queue" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Queue</a> or a <a data-href="Stack" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stack</a>. The functions available on the frontier are: is-Empty, which checks if the frontier is empty.
pop, which returns and removes the first element.
top, which returns the first element but does not remove it.
add, which adds a new element to the end of the queue. A best-first search, also known as a greedy search, chooses the node with the lowest cost in the frontier. A node is made up of the following four components: The state that it represents.
Its parent node, which allows us to backtrack from a goal state back to the initial state.
The action which generated it.
Its total path cost from the root. An uninformed search algorithm is completely unaware of how far any state is from the goal. Uninformed algorithms are differ in the way that they expand nodes in the frontier. Some common uninformed search algorithms include: <br><a data-href="Breadth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Breadth-First Search</a>: Expands all the nodes in the current depth, starting at the root, before moving deeper into the tree. This search in implemented using a queue, which is a FIFO data structure. BFS is a systematic search, meaning, it is complete even in infinite state spaces.
BFS is cost optimal if the edges are unweighted or have a global constant weight.
The goal test may be early, meaning each node is checked to be a goal when it is first generated; or the goal test may be late, meaning each node is checked when it is popped from the queue.
The time and space complexity of BFS is where is the number of children and is the depth of the tree. <br><a data-href="Dijkstra's Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dijkstra's Algorithm</a>: is a greedy search algorithm that uses a late goal test to ensure optimality. It maintains a list of the shortest distances to each node from the root where, initially, the distance to the root is 0 and the distance to all other nodes is . The frontier is implemented as a priority queue, where the node with the smallest distance is expanded first. Then all of the current node's neighbors are examined and if a shorter distance is found, the distance to the corresponding node is updated. This process is iterated until the optimal path is found. Dijkstra's is complete and optimal for weighted graphs with non-negative weights.
The time complexity of Dijkstra's is where is the number of vertices, and is the number of edges. The space complexity of Dijkstra's is . <br><a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a>: Expands the deepest node in the frontier. DFS uses a stack as opposed to a queue, which is a LIFO data structure. This algorithm is commonly implemented as a tree search, meaning, it doesn't keep track of the states that it has reached. DFS continues down a path until either a goal is found, or a leaf node is found. In the latter case, the algorithm backtracks to the next deepest node and expands its children if any. DFS is not cost-optimal. DFS is complete in finite state spaces though not in infinite state spaces.
The time complexity of DFS is and the space complexity is .
<br><a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a> is a variation of DFS where only one successor is generated at a time, and the current state description is updated in place, rather than allocating memory for a new state. <br><a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>: Treats nodes at depth as if they are leaf nodes. This prevents the node from traveling down an infinite path. <br>The time complexity of depth-limited search is where is the <a data-href="Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Branching Factor</a> and is the depth limit.
The diameter of the state space is a good limit value, though, it is rarely known beforehand. <br><a data-href="Iterative Deepening DFS" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening DFS</a>: A depth limited search which iteratively increments the depth limit until a solution is found or a failure is returned. This combines the benefits of depth first and breadth first search. Optimal for unweighted paths.
Complete for finite, acyclic state spaces.
Time complexity of <br><a data-href="Bidirectional Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bidirectional Search</a>: Searches forward from the initial state and backward from the goal state until the 2 meet. The goal test returns true when the two paths meet. Since 2 frontiers need to be tracked, the space requirements are higher than most of the previously discussed algorithms. An informed (heuristic) search algorithm uses a heuristic function to estimate the distance of any given node from the goal. A search is considered greedy if it expands the node with the lowest always. Greedy searches are complete on finite spaces, but not on infinite spaces.
<br><a data-href="A* Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">A* Search</a>: The evaluation function, , is the path cost from the current state to node plus . A* is complete and optimal if the heuristic is admissible or optimistic - meaning it never overestimates the cost to the goal.
A* prunes nodes that are unnecessary for finding a solution.
If we allow A* to use an inadmissible heuristic, there is a risk of finding a suboptimal solution, but the heuristic may be more accurate, thus, reducing the number of expanded nodes.
A variant of A, called **weighted A search** emphasizes the heuristic by multiplying by some constant . Weighted A finds a solution somewhere between and . A heuristic is consistent if for every node , its successor : , where represents the cost from to .
<br>This means that the cost of reaching the goal from node is never greater than the cost of getting to from , plus the estimated cost of reaching the goal from . This is a version of the <a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>.
Every consistent heuristic is admissible, but not every admissible heuristic is consistent.
A composite heuristic combines multiple heuristics, and for certain complex problems, can be more effective than a single heuristic. A node is surely expanded if it can be reached from the initial state on a path where every node has , where is the optimal cost.
<br><a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>: Keeps track of only the nodes with the best f-scores. Is incomplete and suboptimal, but very fast and memory efficient. <br><a data-href="Iterative Deepening A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening A*</a>: Combines the advantages of A* and iterative deepening DFS, where, at each iteration, the cutoff values is the smallest f-score of any node that exceeds the cutoff of the previous iteration. The initial cutoff is the heuristic value of the root node. <br>Can be visualized using <a data-href="Search Contours" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Search Contours</a>. <br><a data-href="Recursive Best-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive Best-First Search</a>: Uses a f-limit variable to keep track of of the f-value of the best alternative path from any ancestor of the current node. If the current node exceeds that f-limit, the recursion unwinds to the alternative path. Is optimal if the heuristic is admissible. Both RBFS and IDA use too little* memory, meaning they forget most of what they've done.
<br><a data-href="Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Memory-Bounded A*</a>: And <a data-href="Simplified Memory-Bounded A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simplified Memory-Bounded A*</a> uses all of the memory that is allocated to it. SMA proceeds like A, expanding the node with the best f-score until memory is full. In that case, it drops the node with the highest f-score and passes its value to the parent, similar to RBFS. If all nodes have the same f-score, the oldest node is deleted and the newest is expanded.
Is complete and optimal if the optimal solution can fit in memory. <br>
One way to analyze the quality of a heuristic is the <a data-href="Effective Branching Factor" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Effective Branching Factor</a> . <br>If is the total number of nodes generated by A and the solution depth is , $b^$ is the branching factor a <a data-href="Uniform Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Uniform Tree</a> of depth must have to contain nodes. A well designed heuristic should have a branching factor close to 1. <br>
<a data-href="Relaxed Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Relaxed Problems</a>: problems with fewer restrictions on available actions. For example, allowing illegal moves in the <a data-href="N-Queens Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">N-Queens Problem</a>. The cost of an optimal solution in a relaxed problem is an admissible and consistent heuristic for the original problem.
Admissible heuristics can also be derived from subproblems of the original problem where the optimal cost in the subproblem is a lower bound on the cost of the complete problem. <br>
<a data-href="Pattern Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Database</a>: Stores the exact solution costs for possible subproblem instances. Commonly used to store <a data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebase</a>s for an AI <a href="https://emujakic.github.io/TechKB/projects/ai-chess-robot/chess-engine.html" target="_self" rel="noopener noreferrer" from="12" to="24" origin-text="chess engine" class="internal-link virtual-link-a">chess engine</a>, for example. When searching for a solution, the agent can use the pattern database to quickly estimate the cost for a given state.
Disjoint pattern databases ignore rather than abstract the rest of the problem. Pre-computation stores the optimal path between pairs of vertices. Landmark points can be precomputed and used as an efficient but inadmissible heuristic. <br>
<a data-href="Metalevel State Space" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Metalevel State Space</a>: Allows an agent to reason about its own reasoning process by evaluating potential strategies and their outcomes. Metalevel state spaces allow an agent to learn from experience and dynamically adjust their strategy based on observed output. Local search algorithms search the state space without keeping track of a path or previously reached states. These algorithms are not systematic, though they use very little memory, and usually have constant space complexity.
Local search is good for problems where only the final state is desired and not so much the path to get there. The most common application of local search is solving optimization problems, where the goal is to find the best state according to some objective function. Consider the states of a problem laid out in a state-space landscape—a line chart where each state has an elevation defined by the objective function. <br>If the goal is to find the highest peak, then the problem is called <a data-href="Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hill Climbing</a>.
<br>If the goal is to find the lowest valley, the problem is called <a data-href="Gradient Descent" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient Descent</a>. Hill Climbing: An optimization algorithm which keeps track of the current state, and on each iteration, moves to the neighboring state which provides the steepest ascent, that is, it moves uphill. Hill climbing terminates when it reaches a peak, or local maximum, a point where no neighboring state has a higher value.
Since it doesn't look ahead past it's immediate neighbors, nor does it consider more than the next move, hill climbing is considered a greedy local search.
Hill climbing is also susceptible to plateaus, a flat region of the state space landscape. A plateau is a shoulder if it immediately neighbors a better state. <br>
<a data-href="Stochastic Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Stochastic Hill Climbing</a>: Chooses randomly from the set of available uphill moves. Typically, the <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probability</a> of a move being selected is linear to the steepness of the move. <br>
<a data-href="First-Choice Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Choice Hill Climbing</a>: Randomly generates successors until a state better than the current one is generated. <br>
<a data-href="Random-Restart Hill Climbing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random-Restart Hill Climbing</a>: Conducts a series of searches from random initial states, until a goal is found. Random-restart is complete, since it will eventually generate a goal as the initial state.
If each search has a probability of success, the expected number of restarts is . <br>
<a data-href="Simulated Annealing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simulated Annealing</a>: A local search algorithm with a temperature which determines the <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="22" to="33" origin-text="probability" class="internal-link virtual-link-a">probability</a> of the algorithm accepting a downhill move. The algorithms starts with a high temperature, which decreases over iterations. The probability of a move being selected decreases with the "badness" of the move.
Since simulated annealing can make downhill moves, this allows it to escape local maxima that other algorithms can't. <br>
<a data-href="Local Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Local Beam Search</a>: A local search algorithm which keeps track of states rather than just one. It begins with randomly generated states, and at each iteration, generates all the neighbors of all states. If one of the successors is a goal state, then the algorithm halts; else, the algorithm selects the best successors and repeats. A variant of local beam search, called stochastic beam search, chooses successors with probabilities proportional to their values. <br>
<a data-href="Genetic Algorithms" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Genetic Algorithms</a>: A variant of local beam search inspired by the principles of natural selection and genetics. Successor states are generated by a process called recombination, where two parent states are combined to make a new state. One approach to recombination is to randomly select a crossover point, which splits each of the parent strings and recombines them to form a child. Genetic algorithms starts with a "population" of states, where each state is evaluated based on its fitness level, which determines the likelihood of that state being selected for reproduction. The mutation rate determines the probability that each bit in the offspring string is flipped. This ensures diversity in the population. Elitism is where a number of high-scoring individuals from the previous generation are propagated forward into the current generation without modification. This ensures that high-quality solutions are preserved while still maintaining diversity. Culling is where individuals performing under a certain threshold are removed from the population. Schema: A substring where some positions are left unspecified. Schemas can be thought of as templates or patterns for a full solution. Genetic algorithms work best when schemas correspond to meaningful components of a solution. Continuous Space: A state space with an infinite branching factor. Most real-world environments are continuous. You can discretize a continuous space be limiting values to fixed intervals.
Alternatively, you can make the branching factor finite by sampling successor states randomly, in a random direction by some small amount . <br>
<a data-href="Gradient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gradient</a>: A <a data-href="Vector" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Vector</a> that contains all the <a data-tooltip-position="top" aria-label="Partial Derivative" data-href="Partial Derivative" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">partial derivatives</a> of a function. Empirical Gradient: The gradient of a function based on observed data rather than analytical calculation. <br>
<a data-href="Line Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Line Search</a>: An optimization technique that is used to find a satisfactory step size along a specific direction to minimize a function. <br>
<a data-href="Newton-Raphson Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Newton-Raphson Algorithm</a>: A general method for finding roots of functions, that is, solutions to equations of the form . Constrained Optimization Problem: An optimization problem where solutions must satisfy some constraints on the value of variables. <br>The most well-known category of constrained optimization problems are <a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems.
<br>Linear programming is a case of the more general problem of <a data-href="Convex Optimization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Convex Optimization</a>. Search with Nondeterministic Actions: When the environment is partially-observable or is nondeterministic, the agent either doesn't exactly know it's current state (sensor model), or the next state (transition model) respectively. <br>
<a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>: The set of states that the agent believes it could be in. In nondeterministic or partially-observable environments, the solution to a problem is a conditional plan rather than a sequence of actions. The action to take is conditionally dependent on the percepts recieved. In a nondeterministic environment, the transition model returns a set of possible states, rather than a single state. The conditional plan can contain if-else statements, which allows solutions to be represented as trees rather than sequences. In a deterministic environment, the only branching is introduced by the agent's actions. These are called 'or' nodes. In a non-deterministic environment, branching is also introduced by the environments choice of outcome for each action. These are called 'and' nodes. <br>
These two nodes alternate to create an <a data-href="And-Or Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">And-Or Tree</a>. A solution for an and-or search problem is a subtree where: Every leaf is a goal node.
Specifies an action at each OR node.
Includes each outcome of each AND node. And-or graphs can be explored using breadth-first or depth-first search. Cycles can arise in nondeterministic problems, one case is where an action has no effect on the current state. If an agent is in an environment where actions can fail, there are no acyclic solutions.
One workaround is to use a while construct, where an action is repeated until it succeeds. This is only useful if repeating the action increases the probability that it succeeds. Sensorless Problems: A problem where an agent's percepts provide no information on the state of the environment. The solution to sensorless problems is a sequence of actions, not a conditional plan, since there are no possible percepts to condition on.
If problem has states, the belief-state problem has states.
The initial state is typically all the states of .
If the agent is unsure about what state it is in, and if some actions are only legal in particular states, then the agent is unsure about what actions it can legally perform. If illegal actions have no consequence on the environment, then the agent can take the union of all actions. Though, if performing illegal actions can be detrimental, then it is safer to take the intersection of available actions.
The transition model for belief states results in a new belief state with all the possible results of the action for each state in the current belief state.
The agent is possible in a goal state if the current belief state contains a goal state. The agent is necessarily in a goal state if every state in the current belief state is a goal state.
The path cost could be one of several values if the same action has different costs in different states.
In ordinary graph search, newly reached states are tested to see if they've been visited previously, this can be done for belief states as well. If the current belief state is a superset of a previous belief state, we can discard the superset belief state since a solution to the superset must be a solution for each state in the corresponding subset.
Additionally, if the superset has been proven to be solvable, then any of its subsets are guaranteed to be solvable. This extra level of pruning can dramatically increase the efficiency of sensorless solutions. Though, even with this pruning, sensorless problems are still too vast to be solved efficiently.
One alternative is to avoid standard search algorithms, and use algorithms that look within belief states and develop incremental belief-state search algorithms. Partially Observable Problems: Problems where the agent has a PERCEPTS function which returns the percept recieved by the agent's sensors in a given state. If sensing is nondeterministic, the PERCEPTS function can return a set of possible percepts.
With partial observability, many states can produce the same percepts.
The two main differences between agents in partially observable environments and fully observable deterministic environments is: The solution is a conditional plan rather than a sequence.
The agent needs to maintain a belief state. Online Search: A search algorithm which interleaves action and planning. This is useful in dynamic or semi-dynamic environments, where the environment can change while the agent is deliberating. Online search is also useful in nondeterministic environments by focusing on contingencies which actually occur, rather than the set of all possible contingencies.
The competitive ratio is the discovered solution cost to the optimal cost if the environment was known.
Online agents can get stuck in dead-ends, states from which no goal is reachable.
<br>One common example of online search are <a data-href="Simultaneous Localization and Mapping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Simultaneous Localization and Mapping</a> or SLAM problems, where an agent must build a map of an unknown environment while simultaneously keeping track of its position within that environment.
An offline algorithm explores a model of the state space, while an online algorithm explores the real world. Therefore, an online algorithm can only discover successors for the state it is currently in, while offline algorithms can jump around the state space.
In an online DFS, when an agent has tried all the actions in a given state, it must backtrack in the physical world. This can be done by keeping track of the predecessor states of the current state. Though this only works if the actions in the state-space are reversible. Online Local Search: Algorithms like hill climbing or gradient descent are already considered online algorithms. Though, these algorithms are not as good for exploration due to getting stuck at local maxima/minima. A random walk simply selects one of the actions available at random. Preference can be given to actions that have yet to be tried.
Hill climbing can be augmented with memory, where a heuristic value is stored for each visited state.
Optimism under uncertainty encourages the agent to explore new paths, rather than go down already explored paths.
<br><a data-href="Learning Real-Time A*" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Learning Real-Time A*</a>* updates the cost element for the state it just left, then chooses the best move according to it's current cost element. Factored Representation: A way of representing states as a set of variables that each have a value. <br>
<a data-href="Constraint Satisfaction Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Satisfaction Problem</a>: Specifies constraints on the values of variables of a state. The solutions is the set of states where each variable satisfies every constraint on it. A CSP has three components: : The set of variables.
: The set of domains, one for each variable. A domain can be discrete, continuous, finite, or infinite.
: The set of constraints. Each constraint is a pair , where is a tuple of variables and is a relationship defining the values that each in-scope variable can take on. A relationship may be written as an explicit set of tuples, or as a function.
A unary constraint deals with one variable, a binary constraint deals with two. A constraint that deals with more than two variables is called a global constraint, even if it doesn't involve all variables.
Precedence constraints assert that one task must be complete before another.
Disjunctive constraints allow a disjunction of conditions to satisfy the constraint.
<br>Preference constraints are encoded as costs on variable assignments. CSPs with preferences can be solved using path-based or local optimization search algorithms. Such a problem is called a <a data-href="Constraint Optimization Problem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Optimization Problem</a>.
With infinite domains, you must use implicit constraints.
<br><a data-href="Linear Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Linear Programming</a> problems are an example of CSPs in continuous domains, since each constraint is a linear equality/inequality. An assignment which satisfies all constraints is consistent or legal. An assignment is complete if it assigns a value to each variable.
A solution is a legal and complete assignment. <br>
<a data-href="Constraint Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Graph</a>: A data structure in which nodes correspond to state variables, and edges correspond to binary constraints between variables. Constraint Hypergraph: Consists of nodes (circles) and square nodes—hypernodes that represent -ary constraints involving variables. Auxiliary Variables: A temporary variable used to simplify problems or represent certain constraints. Constraint Propagation: Uses the constraints on variables to reduce the legal values for variables, which could reduce the domains of other variables, and so on. Enforcing local consistency on nodes in a constraint graph causes inconsistent values to be eliminated throughout the graph. Node Consistency: A variable is node-consistent if all the values in its domain satisfies all the unary constraints on out.
Arc Consistency: A variable is arc-consistent if every value in its domain satisfies all binary constraints its a part of. <br>
<a data-href="AC-3" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">AC-3</a>: The most popular arc-consistency algorithm which maintains a queue of arcs to consider. AC-3 pops an arc from the queue, (), and makes arc-consistent with respect to .
If the domain of , remains the same, it moves on to the next arc.
If the domain of changes, then all arcs are enqueued, where is a neighbor of .
The complexity is where is the number of arcs and is the maximum size of the domain. Path Consistency: A set of variables are path consistent if, for every assignment to and consistent with their constraints, there is an assignment to that satisfies constraints on () and (). This refers to the overall consistency of the path from to through a third variable . -Consistency: A CSP is -consistent if, for any set of variables, and for any consistent assignment to those variables, a consistent value can be assigned to any th variable. Arc-consistency is considered 2-consistent.
A CSP is strongly -consistent if it is -consistent, -consistent, all the way to 1-consistent. The alldiff constraint says that all in-scope variables must have distinct values. The resource constraint, also called the at-most constraint, is a limitation on the availability of a particular resource. <br>
For large problems, it is common to represent domains using upper and lower bounds. These domains are managed by <a data-href="Bounds Propagation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bounds Propagation</a>. A CSP is bounds-consistent if, for every variable , the lower and upper bounds of have corresponding values in the domain of every variable such that the constraints on and are satisfied. This means that for each value within the bounds of , there exists at least one compatible value in the domain of that meets the constraints. <br>
For a CSP with variables, the tree representing the CSP has leaves even though there are only possible complete assignments. We can reduce this by a factor of if we recognize that CSPs are <a data-tooltip-position="top" aria-label="Commutative Property" data-href="Commutative Property" href="https://emujakic.github.io/TechKB/notes/math/commutative-property.html#_0" class="internal-link" target="_self" rel="noopener nofollow">commutative</a>. Commutativity means that the order of application of a set of actions does not matter. With this restriction, the number of leaves is . <br>
<a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>: A depth-first search for CSPs is used when after performing constraint propagation, there are still multiple possible values for variables. A recursive backtracking search chooses an unassigned variable, then chooses a value for that variable which satisfies all the constraints on the variable. If the call assigns a value to all variables successfully, then a solution is returned. If a variable's domain becomes empty, then the call backtracks by undoing the last assignment and tries another legal value.
The simplest strategy for selecting an unassigned variable is called static ordering. This strategy simply chooses the variables in the order that they appear in. The next simplest strategy is choosing randomly. Neither of these are optimal.
Minimum-Remaining-Values Heuristic: Chooses the variable with the least amount of values in its domain. If some variable has no legal values left, the MRV heuristic will recognize this immediately and start backtracking.
Degree Heuristic: Chooses the variable that is involved in the largest number of constraints with other unassigned variables. This is typically used as a tiebreaker for the MRV heuristic.
Least-Constraining-Value Heuristic: Chooses the value in the current variables domain which rules out the fewest choices for neighboring values in the constraint graph. Forward Checking: A form of inference where whenever a variable is assigned a value, the forward-checking process establishes arc-consistency for it. For each unassigned neighbor of , delete any values from its domain that is inconsistent with the value chosen for .
For many problems, the search is more efficient if the MRV heuristic and forward-checking are combined.
Forward-checking is not a complete method for discovering inconsistencies. <br>
<a data-href="Maintaining Arc-Consistency" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Maintaining Arc-Consistency</a>: An algorithm that can detect more inconsistencies than forward checking. It creates a queue of all arcs in the CSP, then pops one ().
For each value in 's domain, check if there exists a value in that satisfies the constraint. If not, remove the value from 's domain.
If the domain of changes, add all arcs that are connected to back in the queue. Chronological Backtracking: A backtracking method which backtracks to the previous assigned variable and tries a new value for it. This is not an intelligent way to backtrack. A better way is to backtrack to variables that are more likely to fix the problem. One way to do so is to keep a conflict set—a set of assignments that are in conflict with some value of the current variable.
<br>The <a data-href="Backjumping Method" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backjumping Method</a> moves back to the most recent assignment in the conflict set. Forward checking can be modified to supply a conflict set.
<br><a data-href="Conflict-Directed Backjumping" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conflict-Directed Backjumping</a>: The conflict set for a variable is the set of preceding variables that cause to current variable to fail, together with any subsequent failed variables. <br>
<a data-href="Constraint Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Constraint Learning</a>: The process of learning and adding new constraints whenever an inconsistency is detected. It involve finding the minimum set of variables from the conflict set which causes the inconsistency. Local Search For CSPs: Local search algorithms can be effective for solving CSPs. A complete state formulation is used, meaning each state assigns a value to every variable and the search changes the value of one variable at a time. The landscape of a CSP using the min-conflicts heuristic usually has a series of plateaus. Plateau search allows sideways movements across plateaus which helps avoid getting stuck at local maxima.
Tabu search can avoid wandering back and forth on a plateau by keeping a list of recently visited states and forbidding the algorithm to return to such states. Constraint Weighing: Assigns weights to constraints based on their importance. All constraints are initiated with a weight of 1, and each time a constraint is violated, its weight is incremented. This adds topography to plateaus and it adds a form of machine learning. Independent Subproblem: A subset of variables and constraints in a CSP which can be solved without considering the rest of the problem. Independence can be discovered by finding independent components in the constraint graph. Though, comp
Independent subproblems can be solved in time linear in , the number of variables. Without this decomposition into subproblems, the work required is exponential in . Though, fully independent subproblems are rare in practice. There are constraint graph structures other than independent subproblems which are easy to solve. A constraint graph is a tree when any two variables are connected by only one path. Tree-structured CSPs can also be solved in linear time using directional arc-consistency. A CSP is DAC if under an ordering of variables , every is arc-consistent with every where .
To solve a tree-structured CSP, pick any variable as the root of the tree, then choose an ordering such that each variable appears after its parent in the tree. This is called a topological sort. Once you have a DAC graph, you can simply go down the list of variables and choose any remaining values. A constraint graph can be reduced to a tree by fixing the values of some variables, such that the remaining unassigned variables form a tree. A cycle cutset is a set of edges whose removal would disconnect the graph or eliminate cycles. There are approximation algorithms for finding the smallest cycle cutset . Tree Decomposition: Another technique for reducing a constraint graph to a tree. It is a transformation in which each node of the resulting tree consists of a set of variables from the original graph. A tree decomposition must satisfy three requirements: Every variable appears in at least one tree node.
If two variables have an edge between them, both variables and their constraint must appear in at least one tree node.
If a variable appears in two nodes, it must appear in each node along the path connecting those nodes. Value Symmetry: The situation where distinct values of a variable's domain lead to the same solution. You can reduce the search space by a factor of by breaking up symmetry in the assignments. This is achieved using symmetry breaking constraints. For example, you can enforce the values of three variables to be in alphabetical order, allowing only one solution. <br>
Competitive Environment: A multi-agent environment in which agents have conflicting goals. This results in <a data-href="Adversarial Search Problems" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Search Problems</a>. In the case where there is a large number of agents, we can consider them in the aggregate as an economy, allowing us to make predictions without considering the actions of each individual agent.
We can also model adversaries as a stochastic part of the environment itself.
<br>A third option is to model the adversarial agents explicitly with the techniques of <a data-href="Adversarial Game Search Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Adversarial Game Search Tree</a>. Pruning is the process of ignoring certain parts of the search tree that don't impact the optimal move.
A heuristic evaluation function estimates who is winning in each state based on the features of the state. An agent has imperfect information if it doesn't have complete knowledge about the environment. Imperfect information is also called partial observability, where perfect information is called full observability. <br>
Chess is a two-player, deterministic, turn-taking, perfect-information, <a data-href="Zero-Sum" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Zero-Sum</a> game. In multi-agent environments, actions are called moves and states are called positions.
A zero-sum game is a game where the sum of the payoffs to all players equals 0. Meaning whatever one player gains is directly cancelled out by the loss of another player. A game can be formally defined with the following components: : The initial state of the game.
TO-MOVE(s): A function that returns the player whose turn it is in state .
ACTION(s): Returns the set of legal actions in state .
RESULT(s, a): The transition model defining the result of action in state .
IS-TERMINAL(s): Returns true if state is a terminal state, meaning the game is over.
UTILITY(s,p): A utility function defining the utility value to player when the game ends in terminal state . <br>
<a data-href="State-Space Graph" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">State-Space Graph</a>: Defined by the initial state, actions, and result function. Nodes represents positions (states), and edges represent moves. <br>
<a data-href="Game-Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Game-Tree</a>: A specialized form of a state-space graph, it assumes a two-player turn-taking game. One player is designated the MAX player, who is trying to maximize the objective function; the other player is the MIN player, who is trying to minimize the objective function.
A ply refers to a single move made by a single agent. <br>
For an agent to act rationally, its <a data-href="Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Strategy</a> must be conditioned upon the actions of the other player. <br>
<a data-href="Minimax Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minimax Algorithm</a>: Given a game tree, the optimal move can be determined by working out the minimax value of each state, denoted as MINIMAX(s). MAX prefers a higher value, while MIN prefers a lower value.
<br>The algorithm performs a complete <a data-href="Recursive" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive</a> <a data-href="Depth-First Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-First Search</a> exploration. It proceeds down to a leaf node, and backs up the minimax value through the tree as the recursion unwinds.
The complexity of minimax by itself is where is the branching factor of the tree and is the max depth of the tree. <br>
<a data-href="Alpha-Beta Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Alpha-Beta Pruning</a>: An optimization technique used in the minimax algorithm which prunes sub-optimal branches. It keeps track of two values: Alpha: The highest-value choice found so-far along the path for the MAX player.
Beta: The lowest-value choice found so-far along the path for the MIN player.
If MAX's score exceeds MIN's beta value, the branch is beta-pruned.
If MIN's score is less than MAX's alpha value, the branch is alpha-pruned. The effectiveness of alpha-beta pruning is dependent on the order in which states are examined. If we could first examine the best states, minimax with pruning would reduce to . This is in the case of perfect move ordering. If the best moves are evaluated first, the alpha and beta values can be updated more quickly. This allows for more effective pruning of suboptimal branches. Using heuristics can lead to better move orderings. For example, moves that capture pieces or attack the king can be examined first, in the case of a chess game.
Killer moves are moves that have caused pruning in previous searches. Prioritizing these moves is called the killer moves heuristic. Repeated states may occur in a game tree due to transpositions, which are different permutations of the same move sequence leading to the same position. <br>Transpositions are addressed using <a data-href="Transposition Tables" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transposition Tables</a>. Say two move sequences, and both lead to the same state . We can find the value of state when exploring sequence and store it in the transposition table. Then, when we reach state from sequence , we can simply look up its value in the table. <br>
<a data-href="Type A Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type A Strategy</a>: Evaluates all possible moves to a certain depth in the game tree and uses a heuristic function to estimate the utility of states at that depth. This cuts the search off early and applies a heuristic function to states, effectively treating non-terminal states as terminal.
In this case, you replace the utility function with an EVAL function, and the terminal test function is replaced with a cutoff test, which returns true for terminal nodes, but is otherwise free to decide when to cutoff a search. <br>
<a data-href="Type B Strategy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Type B Strategy</a>: Ignores moves that look bad, and follows promising lines as far as possible. <br>
<a data-href="Heuristic Evaluation Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic Evaluation Function</a>: Returns an estimated of the expected utility of a state to player . For terminal states, EVAL(s,p) must equal UTILITY(s,p). For non-terminal states, the evaluation must be between a loss and a win.
Most evaluations work by calculating various features of states. The features taken together define various categories or equivalence classes of states. This enables the evaluation function to return a single variable which estimated the proportion of states with each outcome in that equivalence class.
<br>A weighted linear function computes separate contributions from each feature, and combines them for the total value. It's defined as: . The weights should be normalized so that the sum is always within the <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="59" to="64" origin-text="range" class="internal-link virtual-link-a">range</a> . <br>
Cutting-Off: The most straightforward approach to cutting the search early. This method sets a fixed depth limit as the cutoff point. This is called a <a data-href="Depth-Limited Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Depth-Limited Search</a>. <br>
<a data-href="Iterative Deepening" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Iterative Deepening</a>: Iteratively performs depth-limited searches, incrementing the depth limit on each iteration. The evaluation function should only apply to positions that are quiescent or stable, meaning there is no pending move that would drastically change the evaluation. <br>The IS-CUTOFF function should return false for non-quiescent states. This is called a <a data-href="Quiescent Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quiescent Search</a>. Horizon Effect: Occurs when the agent is facing a devastating move from the opponent, but can delay it beyond its horizon by performing other moves. <br>One way to address this is to allow <a data-href="Singular Extensions" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Singular Extensions</a>, which are moves that are clearly better than all other available moves in a given position. <br>
<a data-href="Forward Pruning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Pruning</a>: Prunes moves that appear to be poor moves, but might in fact be good. This saves computation time by incurring the risk of pruning good moves and is considered a type B strategy.
<br>One approach, called <a data-href="Beam Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Beam Search</a>, on each ply, considers only the beam of the best moves according to the evaluation function.
Probabilistic Cut Algorithm: A forward-pruning approach to alpha-beta search that uses statistics derived from previous experience to lessen the chance that the optimal move gets pruned. <br>
<a data-href="Late Move Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Late Move Reduction</a> assumes that move ordering has been done well, therefore, moves that are later in the sequence are less likely to be good moves. Rather than pruning the late moves, we just reduce the depth at which they are searched. If the shallow search returns a value above the current alpha, the search is re-run at full depth. Table Lookup: Rather than search, table lookup stores and retrieves the best move from a data structure. A program can then produce a policy, which is a mapping from every possible state to the optimal move in that state. <br>This is commonly used in chess engines to save <a data-tooltip-position="top" aria-label="Endgame Tablebase" data-href="Endgame Tablebase" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Endgame Tablebases</a>, which allows the engine to play endgames perfectly. This table is constructed with a <a data-href="Retrograde Minimax Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Retrograde Minimax Search</a>, which involves evaluating the end of the game backward to the beginning. <br>
<a data-href="Monte-Carlo Tree Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monte-Carlo Tree Search</a>: A search algorithm that doesn't use a heuristic evaluation function, instead it calculates the average utility over a number of complete games starting from a given state. This is the same as the win percentage for games with binary win/lose outcomes MCTS is considered a kind of <a data-href="Reinforcement Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reinforcement Learning</a>. Playout Policy: chooses which moves to make during a play-out simulation. These policies can be learned by self-play using neural networks.
Early playout termination is when a playout is stopped early because it is taking too many moves. The playout is either evaluated with a heuristic or is declared a draw.
<br>A pure MCTS does simulations starting from the current state and tracks which possible moves have the highest win percentage. For some stochastic games, this converges to optimal play as increases, though it isn't sufficient for most games. We instead need a selection policy which balances the <a data-href="Exploration-Exploitation Tradeoff" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Exploration-Exploitation Tradeoff</a>.
MCTS does this by maintaining a search tree and growing it at each iteration of the following four steps: Selection: Starting at the root, we choose a move (according to the selection policy), leading to a successor state, and repeat this process to a leaf node.
Expansion: We grow the tree by generating a new child of the selected node.
Simulation: We perform a playout from the newly generated node, choosing moves according to the playout policy.
Back-Propagation: We use the result of the simulation to update all nodes going up to the root. <br>
<a data-href="Upper Confidence Bound" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Upper Confidence Bound</a>: A selection policy which ranks possible moves according to the UCB formula: Where is the average reward obtained from action , is the total number of trials, is the total number of trials where action was selected, and is a constant which controls the degree of exploration. Stochastic Games: A class of games which are in an environment that exhibit randomness. A standard game tree cannot be used to model stochastic game because of their inherit uncertainty. <br>Chance nodes are included which denote the possible outcomes of some random variable and their <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a>.
<br>Positions do not have definite MINIMAX values, an <a data-href="Expected Value" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Expected Value</a> is calculated instead. This leads to the expectminimax values for games with chance nodes. Knowledge-Based Agent: Uses reasoning processes over an internal knowledge representation. The central component of a knowledge-based agent is its knowledge base (KB). <br>
<a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>: A set of sentences, each expressed in an knowledge representation language and represents some assertion about the world. When the sentence isn't derived from other sentences, it is called an axiom.
A KB may initially contain some background knowledge. TELL and ASK are the names for adding to or querying the KB, respectively. Each of these operations may include inference: deriving new sentences from existing ones. Each time a knowledge-based agent is called it: TELLs the KB what it saw (its percepts).
ASKs the KB what action to perform. This usually requires extensive reasoning.
TELLs the KB what action was chosen and returns that action. Declarative Approach: Starts with an empty KB, and the agent designer TELLs sentences one by one until the agent can operate in its environment. Procedural Approach: Encodes desired behavior directly as program code. <br>
<a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a>: A formal system that uses symbols and syntax to represent logical expressions and arguments. A logic must also define the semantics, or meaning, of sentences. The semantics defines the truth of each sentence with respect to each possible world.
The term model is commonly used in place of possible world. When possible worlds represent potentially real environments, a model is a mathematical abstraction, which has a fixed truth value for every relevant sentence. Logical entailment between two sentences means that a sentence follows logically from another sentence. Entailment is represented symbolically as . This means entails if and only if, in every model where is true, is also true. <br>
<a data-href="Logical Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logical Inference</a>: The process of deriving new conclusions from existing premises. Model Checking: Enumerating all possible models to check if is true in all models where the KB is true. <br>
<a data-href="Inference Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Inference Algorithm</a>: A computational method which derives entailed sentences based on a KB. IF a inference algorithm derives only entailed sentences, it is sound or truth preserving. If it derives all entailed sentences, it is complete. If some inference algorithm can derive from KB, it is said that " is derived from KB by ". This sentence is represented symbolically as: Grounding: The connection between logical reasoning processes and the real environment. The agent's sensors create this connection and the general rules of this environment are produced by a sentence construction process called learning. <br>
<a data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Propositional Logic</a>: A branch of <a data-href="Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic</a> that deals with propositions, which are statements that are either true or false. <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="2" to="21" origin-text="Propositional logic" class="internal-link virtual-link-a">Propositional logic</a> is made up of: Propositional Symbols: Symbols that start with an uppercase letter and refer to a proposition. For example, , , and are examples of propositional symbols. Each symbol represents a distinct statement that can be true or false. Individual symbols are commonly referred to as literals. A literal is negative if there is a negation applied to it (e.g. ), else, it's a positive literal. Logical Connectives: Operators which combine propositional symbols to create complex sentences. The common connectives include: Negation (NOT, ¬)
Conjunction (AND, ∧)
Disjunction (OR, ∨)
Implication (IMPLIES, →)
Biconditional (IF AND ONLY IF, ↔)
XOR (EXCLUSIVE OR, ) Atomic Sentence: An atomic sentence consists of a single propositional symbol and represents a basic assertion. Complex Sentence: A complex sentence is made up of propositional symbols connected by parenthesis and logical connectives. They are also called formulas. In propositional logic, a model is simply a setting of truth values for each propositional symbol. There are possible models, where is the number of propositional symbols. <br>
<a data-href="Truth Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Truth Table</a>: species the truth value of sentences for each possible assignment of truth values for symbols. <br>
Propositional logic is <a data-tooltip-position="top" aria-label="Monotonicity" data-href="Monotonicity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Monotonic</a>, meaning that when you add knowledge to a propositional <a data-href="Knowledge Base" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>, it cannot lead to the loss of previously established truths. <br>
<a data-href="Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Theorem Proving</a>: Applying rules of inference to sentences in a KB to construct a proof of a sentence without checking models. <br>
<a data-href="Rules of Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rules of Inference</a>: Logical rules which provide the structure for how new statements can be derived from existing ones. Proofs: In propositional logic, proofs are essential for establishing the truth of a statement or the validity of an argument. A proof is a demonstration that a conclusion follows from a set of premises. Any of the ch.3 search algorithms can be used to find a sequence of steps to constitute a proof. We define a proof as the following components: Initial State: The initial KB.
<br>Actions: The set of all the inference rules applied to all the sentences that match the top half of the inference rule. The top half refers to the numerator of the inference rule in <a data-href="Gentzen Notation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gentzen Notation</a>.
Result: The bottom half of the inference rule, or the denominator of the inference rule in Gentzen notation.
Goal: A state that contains the sentence which we are trying to prove. <br>
<a data-href="Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Modus Ponens</a>: Modus Ponens is a syllogistic argument form and rule of inference. It has the following structure: If then .
.
Therefore, . <br>
Logical Equivalence: Two sentences are said to be logically equivalent if they have the same truth table. This is denoted using the symbol. A <a data-href="Rule of Replacement" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rule of Replacement</a> is a logical principle that allows for the substitution of one logical expression, for another, logically equivalent expression. Rules of replacement are used to construct proofs, simply logical expressions, and verify the correctness of logical statements. <br>
Validity: A sentence is valid if it is true in all models. This is called a <a data-href="Tautology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Tautology</a>, meaning that the sentence is necessarily true. Satisfiability: A formula is satisfiable if there is at least one assignment of truth values which makes the formula true. If there is no assignment of truth values to make the formula true, then it is unsatisfiable, also called a contradiction. <br>
<a data-href="Proof by Contradiction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Proof by Contradiction</a>: An indirect proof that assumes the conclusion is false, then proves that this assumption leads to a contradiction. If assuming the conclusion is false does lead to a contradiction, then the conclusion must be true. A clause is a disjunction/conjunction of literals. When talking about clauses, usually it refers to a disjunctive clause, which is a logical expression formed by connecting literals with the OR operator. The empty clause is a clause with no literals, commonly denoted as , , or . An empty disjunctive clause is always false, making it analogous to a contradiction. This is an important concept in proof by contradiction, as reaching an empty clause indicates that a contradiction has been proven. <br>
<a data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clause</a>: A disjunctive clause with at most one positive literal. Definite Clause: If a Horn clause has exactly one positive literal, it is a definite clause. For example, .
Goal Clause: If it has no positive literals, it is a goal clause. For example, .
<br>Horn clauses are computationally efficient for algorithms such as <a data-href="Resolution Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution Theorem Proving</a>, or for <a data-href="Forward/Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward/Backward Chaining</a>. This makes them the basis of many <a data-href="Logic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Logic Programming</a> languages, as well as for automated theorem proving or database querying. <br>
Proof by <a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Resolution resolves two clauses which contain complementary literals. Two literals are complements of one another if one is the negation of the other (e.g. and ). Resolution is defined: The above example resolves and resulting in a new clause called the resolvent. Only one pair of complementary literals can be resolved at a time.
<br>In the context of <a data-href="Automated Theorem Proving" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Automated Theorem Proving</a>, resolution is applied repeatedly to derive a contradiction, thereby proving that the negation of the statement that's being proven, is unsatisfiable. Resolution closure of a set of clauses is the set of all clauses derivable by repeated application of the resolution rule to clauses in or their derivatives.
<br>The completeness theorem for resolution in <a data-tooltip-position="top" aria-label="Propositional Logic" data-href="Propositional Logic" href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" class="internal-link" target="_self" rel="noopener nofollow">propositional logic</a> is called the ground resolution theorem. <br>
<a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a>: A sentence is considered to be in conjunctive normal form (CNF) if it's a conjunction (AND) of one or more clauses. A -CNF sentence is a a CNF sentence where each clause has at most literals. If a KB contains only definite clauses: Every definite clause can be written as an implication whose premise is a conjunction of positive literals and whose conclusion is a single positive literal. Ex: .
In Horn form, the premise is called the body and the conclusion is called the head. <br>
<a data-href="Forward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Forward Chaining</a>: An algorithm which determines if a single propositional symbol (the query), is entailed by a knowledge base of definite clauses. It starts with known facts (single, positive literals), if all the premises of an implication are known, then its conclusion is added to the set of known facts.
This process continues until the query is added, or until no further inferences is made.
Forward chaining runs in linear time, is sound, and complete. <br>
<a data-href="Backward Chaining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backward Chaining</a>: Works backwards from the query. If is known to be true then no work is needed. Else, the implications in the KB whose conclusion is are found.
If all the premises of one of those implications is known to be true, then is true.
Often runs in sub-linear time. Model checking is used to check the satisfiability of a query. <br><a data-href="Davis-Putnam Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Davis-Putnam Algorithm</a>: A model checking algorithm which takes as input a formula in CNF. Like <a data-href="Backtracking Search" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Backtracking Search</a>, it is essentially a depth-first enumeration of possible models. Early termination occurs if the algorithm detects that the sentence must be true or false, even with a partially completed model. For example, a clause is true if any literal is true.
Pure Symbol Heuristic: A pure symbol is a symbol that always appears with the same sign in all clauses. if a sentence has a model, then it has a model with the pure symbols assigned so as to make their literals true, because doing so never makes a clause false.
Unit Clause Heuristic: In the context of DPLL, a unit clause also means a clause in which all but one literal are already assigned false by the model. Unit propagation occurs when a unit's truth value leads to the simplification of other clauses by removing the occurrence of the literal. Hill-Climbing can be assigned to satisfiability (SAT) problems, provided a correct evaluation function is selected. Since the goal is to find an assignment that satisfices every clause, an evaluation function that counts the number of unsatisfied clauses works well. <br>
<a data-href="WalkSAT Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">WalkSAT Algorithm</a>: A local search algorithm which, on every iteration, picks an unsatisfied clause and picks a symbol to flip. The symbol that is picked is the one that minimizes the number of unsatisfied clauses in the new state. A fluent variable is an aspect of the world that changes. An atemporal variable is static. Hybrid Agent maintains and updates a KB as well as a current plan. The initial KB contains the atemporal variables. At each time step , the new percept sequence is added, along with all the fluent axioms, such as the successor state axioms.
The agent then uses logical inference to to derive new knowledge and update its knowledge base (KB).
Though, with this program, as increases, the computational expense to logically infer increases due to inferences having to go further back and involve more propositional symbols. <br>One solution is to save or cache the results of inference. This is a form of <a data-href="Dynamic Programming" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dynamic Programming</a>. <br>
The percept history and all their ramifications can be replace with the <a data-href="Belief State" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Belief State</a>, which is the set of all possible states of the world currently. The process of updating the belief state as new percepts arrive is called state estimation.
<br>The set of belief states is the <a data-href="Powerset" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Powerset</a> of the set of physical states, hence the size of the belief state set is . Programming languages are the largest class of formal languages in common use. The main drawback of programming languages is that they lack a general mechanism for deriving facts from other facts. In a compositional language, the meaning of a sentence is a function of its parts. <br>
<a data-href="First-Order Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Order Logic</a>: Extends <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="10" to="29" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> by introducing quantifiers and predicates, allowing for the representation of the relationships between objects. Predicates are symbols that represent properties or relations among objects. For example, might denote a certain property of , while could represent a relationship between objects and . The primary difference between propositional and first-order logic (FOL) is their ontological commitments, that is, what they assume about the nature of reality. Propositional logic assumes that facts are either true or false in the world. First-order logic assumes that the world consists of objects with relations that are either true or false.
In fuzzy logic, the ontological commitment allows degrees of truth between 0 and 1.
<br><a data-href="Temporal Logic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Temporal Logic</a> assumes that facts hold at particular times, and that those times are ordered.
Higher-order logics view the relations and functions of first-order logic as objects themselves. A logic can also be characterized by its epistemological commitments, that is, the possible states of knowledge that it allows with respect to each fact. Both first-order and propositional logic sentences are either true, false, or unknown.
<br>Systems using <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="14" to="25" origin-text="probability" class="internal-link virtual-link-a">probability</a> theory can have any degree of belief ranging from 0 to 1. The domain of a model in FOL is the set of objects it contains. The domain is required to be non-empty. Relation: The set of tuples of objects that are related. Function: maps a tuple to a single output. Models require total functions, functions that have an output for every input tuple. Constant symbols stand for objects (e.g. ), predicate symbols stand for relations (i.e. or ), and function symbols stand for functions (e.g. ). Each predicate and function symbol has an arity, fixing the number of arguments it takes. Model checking cannot be used to determine entailment in FOL because the number of first-order models is unbounded. Term: A logical expression that refers to an object. Complex Term: Formed by a function symbol followed by a parenthetical list of arguments. Atomic Sentence: Formed from a predicate symbol optionally followed by a parenthetical list of terms (i.e. ). Atomic sentences can have complex terms as arguments. Complex Sentences: One or more atomic sentences combined using logical connectives or quantifiers. Quantifiers: Allows for statements about some or all objects in a domain. Universal Quantifier (): Asserts that a certain statement is true for all objects. For example, means "for all , is true". Implication is the natural connective for . Existential Quantifier (): Asserts that there is at least one object for which the statement is true. For example, means "there exists an , such that is true". Conjunction (AND) is the natural connective for . Uniqueness Quantifier (): Asserts that exactly one objects makes the statement true. For example, means "there is exactly one , such that is true."
Consecutive quantifiers of the same type can be written as one quantifier with multiple variables: If two quantifiers use the same variable name, the variable belongs to the innermost quantifier that mentions it.
<br> is a conjunction and is a disjunction over the universe of objects, therefore, they obey <a data-href="De Morgan's Laws" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">De Morgan's Laws</a>: We can use the equality symbol to say that two terms refer to the same object. For example, . <br>
<a data-href="Database Semantics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Semantics</a>: Consists of the closed-world, unique names, and domain-closure assumptions. Unique Names Assumption: Assumes that every constant symbol refers to a distinct object.
Closed-World Assumption: Assumes that atomics sentences not known to be true are false.
Domain Closure: Assumes that each model contains no more domain elements than those named by the constant symbols. Domain: Some part of the universe about which we wish to express definite knowledge of what the world contains. Assertions: Sentences that are added to a knowledge base. Questions: Queries or goals which receive information from a knowledge base. Axioms: Provide the basic factual knowledge from which conclusions can be derived. Theorems: Logical sentences that are entailed by axioms. Theorems add no new information, though they are essential for reducing the computational cost of inference. <br>
<a data-href="Knowledge Engineering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Engineering</a>: The general process of constructing a knowledge base (KB). The knowledge engineering process is as follows: Identify the questions that the KB will support ant the kinds of facts that will be available.
Assemble the relevant knowledge.
<br>Decide on a vocabulary of predicates, functions, and constants. Translate domain-level concepts into logic-level names. The result is a vocabulary, known as the <a data-href="Ontology" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ontology</a> of the domain.
Encode general knowledge about the domain. Write the axioms for all vocabulary terms.
Encode a description of the problem instance. Write simple atomic sentences about concepts that are already a part of the ontology.
Pose queries to the inference procedure.
Debug and evaluate the knowledge base. <br>
<a data-href="First-Order Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">First-Order Inference</a>: The process of deriving new conclusions from existing statements in first-order logic. <br>One way to do first order inference is to convert a first-order KB into propositional logic and use <a data-href="Propositional Inference" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositional Inference</a>. This is called <a data-href="Propositionalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Propositionalization</a>. The first step is to eliminate universal quantifiers using the rule of universal instantiation, which says that we can infer any sentence obtained by substituting a ground term for a universally quantified variable.
<br>Existential instantiation replaces an existentially quantified variable with a single new constant symbol. A <a data-href="Skolem Constant" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Constant</a> is used to eliminate existential quantifiers. For example, in the formula , the existentially quantified variable can be replaced by a Skolem constant , as long as is does not exist elsewhere in the KB. This process is called <a data-href="Skolemization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolemization</a>.
Next, replace ground atomic sentences, such as , with propositional symbols, such as .
Then, apply any of the complete propositional inference algorithms to obtain conclusions.
One problem is that if the KB contains a function symbol, the set of possible ground-term substitutions is infinite. This can be addressed by generating all instantiations with constant symbols, then all terms at depth 1, and so on until a proof of the entailed sentence can be constructed. <br>
<a data-href="Generalized Modus Ponens" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Generalized Modus Ponens</a>: A lifted version of Modus Ponens, meaning it raises traditional Modus Ponens from variable-free <a href="https://emujakic.github.io/TechKB/notes/math/propositional-logic.html#_0" target="_self" rel="noopener noreferrer" from="88" to="107" origin-text="propositional logic" class="internal-link virtual-link-a">propositional logic</a> to FOL. Generalized Modus Ponens allows for the involvement of predicates and variables. For example: Substitution: A mapping of variables to terms. To apply a substitution, you replace all occurrences of a variable with the mapping defined by that substitution. Substitutions are denoted as , meaning substitute for the variable . <br>
<a data-href="Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Unification</a>: The process of finding substitutions which make different logical expressions look identical. This process is a key part of all first-order inference algorithms. For example, to unify the two sentences and , you can simply substitute for , . The substitution is known as the unifier.
If you try to unify the sentences , meaning "John knows everyone", and , meaning "Everyone knows Elizabeth", you will not be able to. This is because cannot be equal to and at the same time. This can be avoided by standardizing apart the variables. Standardizing apart a sentence involves renaming its variables to avoid name clashes. For example, you can rename the variable in to . Now the two sentences can be unified with the unifier . If there are multiple possible unifiers, it is best to choose the most general unifier. The most general unifier (MGU) is the unifier which places the fewest restrictions on variables. For example, on the sentence , the unifier is more general than . stores a sentence in the first-order KB, and returns all unifiers such that the query unifies with some sentence in the KB. can be made more efficient by not attempting to unify sentences that clearly have no chance of unifying. This can be done by implementing indexing. Predicate indexing buckets facts by their predicate and stores them in a hash table. For example, the facts may be stored in one bucket, and the facts in another.
<br>Given a sentence to be stored, it's possible to construct indices for all possible queries that unify with it. These queries form a <a data-href="Subsumption Lattice" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Subsumption Lattice</a>, where the child of any node is obtained from its parent by a single substitution, and the highest common descendant of any two nodes is the result of applying the most general unifier. <br>
The forward-chaining algorithm discussed earlier works for KBs of propositional definite clauses. Though, not all first-order sentences can be expressed as a <a data-href="Definite Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Definite Clause</a>—a clause with exactly one positive literal. Existential quantifiers aren't allowed, and universal quantifiers are left implicit. An example of a first-order definite clause is: Since the universal quantifier is implicit, the sentence means that all which is greedy and a king, is evil. A first-order forward-chaining algorithm starts from the known facts, and triggers all the rules whose premises are satisfied, adding their conclusions to the knowledge base. This is repeated until the query is answered, or no new facts can be derived. A fact is not new if it is just a renaming of an existing fact. A sentence is a renaming of another if they're identical except for the names of their variables.
If no new inferences are possible on a KB, then the KB is called a fixed point of the inference process. Forward-chaining can be made more efficient by considering the conjunct ordering problem—finding an ordering of the conjuncts in the premise so that the total cost of inference is minimized. <br>The minimum-remaining-values (MRV) heuristic would suggest an ordering where the next variable to be assigned a value is the variable with the least amount of valid values available. This is an example of <a data-href="Pattern Matching" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pattern Matching</a>, and is very similar to the previously discussed constraint satisfaction problems. We can view each conjunct as a constraint on the variables that it contains.
<br><a data-href="Rete Algorithm" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Algorithm</a>: A pattern matching algorithm which preprocesses the set of rules in the KB to construct a <a data-href="Rete Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Rete Network</a>—A graph data structure where each node is a literal from a rule premise. Variable bindings flow through the network and are filtered out when they fail to match a literal. If two literals in a rule share a variable, then the bindings from each literal are filtered through an equality node.
Rete networks are a key component to production systems and in cognitive architecture. Backward chaining over definite clauses works backwards from the goal, chaining through rules to find known facts that support the proof. Logic Programming: Programming paradigms based on formal logic systems. In logic programming, program statements express facts and rules about some problem domain, and computation is performed via logical inference. <br><a data-href="Prolog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Prolog</a> and <a data-href="Datalog" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Datalog</a> are two common logic programming languages. <br>
<a data-href="Resolution" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Resolution</a>: Here, we extend resolution to FOL. The first step to perform resolution is to convert the sentences in the KB into <a data-href="Conjunctive Normal Form" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Conjunctive Normal Form</a> (CNF). That is, a conjunction (AND) of clauses, where a clause is a disjunction (OR) of literals. In CNF, literals can contain variables, which are considered to be universally quantified. Every FOL sentence can be converted into an equivalent CNF sentence. To convert a sentence to CNF, you may have standardize variable names, that is, for sentences that use the same variable name twice, you must change one of them.
<br>You also may have to Skolemize a sentence. That is, eliminating existentially quantified variables with a <a data-href="Skolem Function" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Skolem Function</a>. These are functions which take as arguments all the universally quantified variables in scope of the existential quantifier. For example: Where is a Skolem function. The resolution rule for first-order clauses is a lifted version of the propositional rule discussed earlier. Two clauses, which are assumed to be standardized apart, can be resolved if they contain complementary literals. This is called the binary resolution rule, because it resolves two literals, and it isn't a complete inference procedure by itself. The full resolution rule resolves subsets of literals in each unifiable clause.
Another approach is first-order factoring, which reduces two literals to one if they are unifiable. The unifier must be applied to the entire clause. This combined with binary resolution is complete. Resolution is refutation-complete, meaning, that if a set of sentences is unsatisfiable, then resolution will always be able to derive a contradiction. Ground Resolution Theorem: States that propositional resolution is complete for ground sentences. <br>
<a data-href="Herbrand Universe" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand Universe</a>: If is a set of clauses, then the Herbrand universe of , denoted , is the set of all ground terms constructible from the function symbols in , and the constant symbols in ; if none, then a default constant symbol, . Saturation: If is a set of clauses and is a set of ground terms, then , the saturation of with respect to , is the set of all ground clauses obtained by applying all possible consistent substitutions of ground terms in for variables in .
Herbrand Base: The saturation of a set of clauses with respect to it's Herbrand universe is called the Herbrand base of , denoted <br><a data-href="Herbrand's Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Herbrand's Theorem</a>: If a set of clauses is unsatisfiable, then there exists a finite subset of that is also unsatisfiable. <br>
<a data-href="Equational Unification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Equational Unification</a>: The process of finding a substitution for variables in a set of equations that makes the equations become identical. Strategies for finding proofs by resolution efficiently include: <br>Unit Preference: Preferring resolutions where one of the sentences is a single literal, called a unit clause. This is complete for <a data-tooltip-position="top" aria-label="Horn Clause" data-href="Horn Clause" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Horn Clauses</a>.
Set of Support: Insisting that every resolution step involves at least one element from the set of clauses called the set of support.
Input Resolution: Every resolution combines one of the input sentences with some other sentence.
Subsumption: Eliminates all sentences that are subsumed (more specific than) an existing sentence in the KB.
<br>Learning: Training a <a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a> model to learn from experience. Question other relevant information Peter. R. Norvig, Artificial Intelligence: A Modern Approach, Global Edition. ]]></description><link>https://emujakic.github.io/TechKB/textbooks/ai-a-modern-approach/summary.html</link><guid isPermaLink="false">TEXTBOOKS/AI-A Modern Approach/Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Summary]]></title><description><![CDATA[
Name: Jiawei Han, Micheline Kamber, and Jian Pei
Edition: 3rd Edition
Data Mining: Concepts and Techniques is a comprehensive resource for the field of data mining. This book covers everything from data preprocessing to clustering and <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outlier</a> detection. This summary attempts to breaks down the main ideas and insights from the book.
<br>
<a data-href="Data Mining" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Mining</a>: The process of extracting knowledge from data. Is also referred to as knowledge mining/extraction or data pattern analysis. <br>
<a data-href="Data Warehouse" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Warehouse</a>: A centralized repository of data from multiple sources. <br>Data warehouses are typically constructed through a <a data-href="ETL Process" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">ETL Process</a>, where data is extracted from sources, transformed into a desirable format, and then loaded into the warehouse.
Data warehouses are typically used to store historical data, allowing for long-term trend analysis. <br>
<a data-href="Data Cube" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Cube</a>: A multi-dimensional array, where each dimension corresponds to an attribute or set of attributes. Cells typically store aggregate measures such as count or sum. Each dimension can contain hierarchies, such as yearly or quarterly, allowing for analysis at different levels. <br>
Knowledge discovery from data is an iterative process of the following steps (steps 1-4 are different forms of <a data-href="Data Preprocessing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Preprocessing</a>): Data Selection: Choosing and retrieving the data that is relevant for the analysis task.
Data Integration: Where data from multiple sources is combined.
Data Cleaning: Removing noise and inconsistencies from data.
Data Transformation: Where data is transformed into a form appropriate for mining.
Data Mining: Where intelligent methods are utilized to extract patterns present in the data.
Evaluation: Assessing the patterns discovered in the previous step based on measures to determine if they are useful.
<br>Knowledge Presentation: Presenting the discovered knowledge/patterns using intuitive methods such as <a data-href="Data Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Visualization</a> or report generation. <br>
<a data-href="Database Management System" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database Management System</a>: Software that enables users to create, manage, and manipulate a <a data-href="Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Database</a>. <br>
Database: A collection of interrelated <a data-href="Structured Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Structured Data</a> . <br>
<a data-href="Relational Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Relational Database</a>: A collection of structured tables, each which consist of a set of attributes (represented as columns), and stores entries as tuples of data (rows). Rows are typically identified using a primary key.
<br>Most relational databases use <a data-href="SQL" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">SQL</a> to query the database. These queries include commands such as INSERT, JOIN, DELETE, or aggregate operators like SUM or MIN.
<br>Relational databases can be modeled using an <a data-href="Entity-Relationship Diagram" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entity-Relationship Diagram</a>. <br>
Data warehouses made up of data cubes can inherently support <a data-href="Online Analytical Processing" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Online Analytical Processing</a> (OLAP). OLAP allows users to explore data from different perspectives, such as time, geography, product lines, and customer segments. This allows for data analysis across multiple dimensions at varying levels of granularity.
OLAP allows users to drill-down into more detailed/granular data, or roll-up to get more broad, summarized information. <br>
<a data-href="Transactional Database" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Transactional Database</a>: A database which stores transactions, such as purchases or clicks on a website. <br>
There are a number of data mining functionalities such as characterization, discrimination, frequent pattern mining, associations, correlations, <a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>, <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> , <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>, and <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outlier</a> analysis. Generally, such tasks can be classified as descriptive or predictive. Descriptive mining tasks describe characteristics of a dataset, this includes clustering or association rule learning.
Predictive mining tasks, like regression or classification, aim to make predictions on future outcomes based on historical data. Data entries can be associated with classes or concepts. Class/concept descriptions can be derived from data characterization or data discrimination methods. <br>
Data characterization is the process of summarizing the general characteristics of a dataset. The output of data characterization can be <a data-tooltip-position="top" aria-label="Bar Chart" data-href="Bar Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Bar Charts</a>, curves, <a data-tooltip-position="top" aria-label="Pie Chart" data-href="Pie Chart" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pie Charts</a>, data cubes, and multidimensional tables. The output of data characterization can also be characteristic rules.
<br>Common techniques for data characterization include <a data-href="Descriptive Statistics" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Descriptive Statistics</a>, <a data-href="Data Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Visualization</a>, and clustering. Data discrimination focuses on the comparison of the general characteristics of the target class against that of one or more contrasting classes. The forms of output are similar to those of data characterization. Discrimination descriptions expressed in rule form are referred to as discriminant rules.
<br>Common techniques for data discrimination include classification algorithms, such as <a data-tooltip-position="top" aria-label="Decision Tree" data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Trees</a> or <a data-tooltip-position="top" aria-label="Support Vector Machine" data-href="Support Vector Machine" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Support Vector Machines</a>. Frequent patterns are patterns that appear frequently in a dataset, they include frequent itemsets, subsequences, or substructures. Frequent itemsets are sets of items that are commonly together.
Frequent subsequences are events that commonly share a particular sequence.
Frequent substructures are patterns in structural representations like graphs or trees. <br>
<a data-href="Association Rule" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Association Rule</a>: A conditional rule that describes a relationship between variables in a dataset. An association rule is made up of an antecedent - the item or set of items that suggest the presence of another item if present, and a consequent - the item or set of items that are predicted to be present if the the antecedent is present.
Association rules with a single predicate are single-dimensional, otherwise it's a multidimensional association rule.
Confidence: Indicates how often the consequent is true, given the antecedent.
Support: measures how often the items appear together in the dataset.
Association rules can be discarded if they don't meet a specified support and confidence threshold. <br>
<a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a>: The process of finding a model that categorizes a set of data objects into predefined classes. The models are derived based on analysis performed on training data, that is, a set of pre-labelled data. <br>The model may be represented as classification rules, decision trees, neural networks, or distance based models such as <a data-href="K-Nearest Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest Neighbors</a>. A decision tree is a tree which splits a dataset based on feature values, where a path from the root to a leaf represents a decision rule. A neural network is a collection of neurons with weighted synapses (connections) between them. Each neuron functions as a processing unit that takes inputs, applies a transformation, and "activates" when a feature matches a specific pattern. <br>
<a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>: The process of finding a model that predicts a continuous-valued function. Regression analysis is used when the dependent variable is numeric, rather than categorical. Relevance Analysis: The process of identifying which features (independent variables) are most relevant for the prediction of the independent variable. Relevance analysis typically preempts regression and classification.
<br>Relevance analysis techniques include statistical tests such as the <a data-href="Chi-Square Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chi-Square Test</a>, or correlation analysis techniques like <a data-href="Pearson Correlation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pearson Correlation</a> or <a data-href="Spearman Rank Correlation" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Spearman Rank Correlation</a>.
<br>Other techniques include <a data-href="Recursive Feature Elimination" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recursive Feature Elimination</a>, <a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a>, or <a data-href="Lasso Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Lasso Regression</a>. <br>
<a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>: The Process of grouping similar data points together into 'clusters' where each cluster can be viewed as a class of data objects. <br>Clusters are formed based on <a data-href="Distance Measures" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measures</a>, which quantify the similarity or dissimilarity of data objects.
<br>Popular clustering techniques include <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a>, <a data-href="DBSCAN" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">DBSCAN</a>, or <a data-href="Gaussian Mixture Models" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Gaussian Mixture Models</a>. <br>
<a data-href="Outlier Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Outlier Analysis</a>: The process of detecting <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, or anomalies in a dataset. <br><a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="0" to="8" origin-text="Outliers" class="internal-link virtual-link-a">Outliers</a> may be detected using distance-based methods like <a data-href="K-Nearest-Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest-Neighbors</a>, statistical methods such s <a data-href="Z-Score" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score</a> or <a data-tooltip-position="top" aria-label="Box Plot" data-href="Box Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box Plots</a>, or density based methods like DBSCAN. <br>
<a data-href="Measures of Pattern Interestingness" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measures of Pattern Interestingness</a>: Measure the significance and usefulness of discovered patterns. <br><a data-href="Support" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Support</a>: The proportion of objects in the dataset that contain the pattern.
<br><a data-href="Confidence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Confidence</a>: The likelihood that a pattern is present given another pattern.
<br><a data-href="Lift" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Lift</a>: Measures how much more likely the presence of one pattern is to occur with another pattern compared to their individual <a data-tooltip-position="top" aria-label="Probability" data-href="Probability" href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" class="internal-link" target="_self" rel="noopener nofollow">probabilities</a>.
<br><a data-href="Accuracy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Accuracy</a>: The ratio of correctly predicted instances to the total number of instances.
<br><a data-href="Entropy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entropy</a>: Measures the amount of uncertainty in a dataset or pattern.
Coverage: The percentage of data to which the rule applies. Subjective interestingness measures are based on the user's beliefs, knowledge, and context rather than solely on statistical properties. Completeness: Referring to the ability of a data mining algorithm to generate all of the patterns that are present in the data. <br>
Statistical Model: A mathematical representation that describes the behavior of objects in a target class in terms of <a data-tooltip-position="top" aria-label="Random Variable" data-href="Random Variable" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Random Variables</a> and their associated <a href="https://emujakic.github.io/TechKB/notes/math/probability.html#_0" target="_self" rel="noopener noreferrer" from="22" to="33" origin-text="probability" class="internal-link virtual-link-a">probability</a> distributions. Statistical models can be the output of a data mining task, or the foundation upon which data mining tasks are built upon. Predictive statistics models data to account for uncertainty in the observations and is used to draw inferences about the underlying process under investigation. <br>
<a data-href="Confirmatory Data Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Confirmatory Data Analysis</a>: A statistical approach which aims to confirm or refute a hypothesis based on statistical evidence. A result is statistically significant if it is unlikely to have occurred by chance. <br>
<a data-href="Machine Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Machine Learning</a>: A branch of <a data-href="Artificial Intelligence" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Artificial Intelligence</a> which deals with the development of algorithms and statistical models which can learn patterns from data and make intelligent decisions. <br><a data-href="Supervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Supervised Learning</a>: Training a machine learning algorithm on prelabelled data. This includes <a data-href="Classification" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Classification</a> or <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a> algorithms.
<br><a data-href="Unsupervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Unsupervised Learning</a>: Models which identify patterns in unlabeled data. This includes <a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a> or <a data-href="Dimensionality Reduction" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Dimensionality Reduction</a> techniques.
<br><a data-href="Semi-Supervised Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Semi-Supervised Learning</a>: Combines both supervised and unsupervised learning. Useful for when there is a small amount of labeled data and a large amount of unlabeled data available.
<br><a data-href="Reinforcement Learning" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Reinforcement Learning</a>: Models learn by interacting with their environment and receiving feedback as rewards or penalties.
Active Learning: Models selectively query the user to label an example. The model identifies which unlabeled data points would provide the most valuable information if labeled and requests labels for those specific instances. Information Retrieval: The process of searching for and obtaining information from sources. This field focuses on searching through sources, such as documents or databases, and matching data points based on user queries that are mainly formed by keywords. <br>This process is often assessed with metrics such as <a data-href="Precision" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Precision</a> and <a data-href="Recall" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Recall</a>.
Common techniques include keyword-based searching, Boolean retrieval using logical operators, or machine learning approaches.
A topic model is a statistical model which models the topic of a document as a probability distribution over the vocabulary of the document. Search engines are very large data mining applications that use techniques such as crawling, indexing, and searching. <br>
<a data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Measure of Central Tendency</a>: Measures which give an idea about the center of a distribution. Common measures include <a data-tooltip-position="top" aria-label="Mean" data-href="Mean" href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mean</a>, <a data-tooltip-position="top" aria-label="Median" data-href="Median" href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" class="internal-link" target="_self" rel="noopener nofollow">median</a>, and <a data-tooltip-position="top" aria-label="Mode" data-href="Mode" href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" class="internal-link" target="_self" rel="noopener nofollow">mode</a>. Mean: Also called the average, is the sum of values over the number of values in a dataset. The mean is typically very sensitive to outliers.
<br><a href="https://emujakic.github.io/TechKB/notes/math/mode.html#_0" target="_self" rel="noopener noreferrer" from="0" to="4" origin-text="Mode" class="internal-link virtual-link-a">Mode</a>: The most frequently occurring value in a dataset. for unimodal, moderately skewed numerical data: Median: The middle value of an ordered dataset. Better for skewed data, since it is less affected by outliers. Dataset: A set of data objects— single entities described by attribute values. Data objects are also referred to as samples, records, or data points. If the data objects are stored in a database, they are data tuples. Attribute: Also called a feature, is a data field representing a specific characteristic of a data object. Observed values for attributes are called observations.
A set of attributes used to describe an object are called an attribute/feature vector. The type of an attribute is determined by its domain. The most common types include. <br><a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal</a>: Each value represents some sort of category, therefore, they are also commonly referred to as categorical. A nominal attribute may be instantiated as an integer, though this integer is only used to refer to a category and cannot be used quantitatively.
<br><a data-tooltip-position="top" aria-label="Binary Data" data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Binary</a>: A nominal attribute with only 2 states, zero or one. Binary attributes are called Boolean if the values represent true and false.
<br><a data-tooltip-position="top" aria-label="Ordinal Data" data-href="Ordinal Data" href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Ordinal</a>: A type of categorical data, where values have some sort of meaningful order among them. Ordinal attributes may be obtained from the discretization of a numeric attribute.
<br><a data-tooltip-position="top" aria-label="Numeric Data" data-href="Numeric Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Numeric</a>: A quantitative attribute represented by integer or real values. Numeric attributes can be interval or ratio scaled. <br>
<a data-href="Interval Scaled" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interval Scaled</a>: Numeric attributes measured on a scale of equal units. Interval scaled attributes have no true zero point, that is, the value zero doesn't represent the absence of the attribute. For example, 0° does not represent no temperature. You can perform addition and subtraction on interval scaled attributes, but no multiplication or division. <br>
<a data-href="Ratio Scaled" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Ratio Scaled</a>: Numeric attributes with a true zero point, allowing for the comparison of absolute magnitudes. This means all arithmetic operations are applicable. Discrete Attribute: An attribute with a finite or countable infinite set of possible values. <br>
Continuous Attribute: An attribute which can take on any value in a given <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="54" to="59" origin-text="range" class="internal-link virtual-link-a">range</a>. <br>
Statistical Descriptions: Used to infer properties of data and highlight what values should be treated as noise or <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>. <br>
<a data-href="Midrange" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Midrange</a>: The <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="6" to="10" origin-text="mean" class="internal-link virtual-link-a">mean</a> of the minimum and maximum values in a dataset. <br>
Data is positively skewed if the mean is a value smaller than the <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="41" to="47" origin-text="median" class="internal-link virtual-link-a">median</a>. Data is negatively skewed if the mean is greater than the median. <br>
<a data-href="Measures of Dispersion" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Measures of Dispersion</a>: Statistical measures which characterize the spread of data. Common measures include: <br><a data-href="Range" href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Range</a>: The difference between the maximum and minimum values in a dataset.
<br><a data-href="Quantile" href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quantile</a>: The data points which split an ordered dataset into equal or near-equal parts.
<br><a data-href="Quartile" href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Quartile</a>: The 4-quantiles, or the three data points which split a dataset into four equal parts.
<br><a data-href="Percentile" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Percentile</a>: The 100-quantiles, or the 99 values which split a dataset into 100 equal subsets.
<br><a data-href="Interquartile Range" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Interquartile Range</a>: The difference between the third and first quartile.
<br><a data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Variance</a>: The average squared distance of each value from the mean value of the dataset.
<br><a data-href="Standard Deviation" href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a>: The average distance of each value from the mean value of the dataset. <br>
<a data-href="Chebyshev's Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev's Inequality</a>: A statistical theorem which shows that the proportion of values that lie more than <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="1" to="20" origin-text="standard deviations" class="internal-link virtual-link-a">standard deviations</a> away from the mean is at most . <br>
<a data-href="Five-Number Summary" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Five-Number Summary</a>: The first and third <a href="https://emujakic.github.io/TechKB/notes/math/quartile.html#_0" target="_self" rel="noopener noreferrer" from="22" to="30" origin-text="quartile" class="internal-link virtual-link-a">quartile</a>, median, and least and greatest values in a dataset. A <a data-href="Box Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Box Plot</a> is used to visualize the five-number summary. Data Visualization: Graphical representations of data using charts, graphs, or maps. <br>
<a data-href="Quantile Plot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Quantile Plot</a>: A data visualization technique where the x-axis represents the <a href="https://emujakic.github.io/TechKB/notes/math/quantile.html#_0" target="_self" rel="noopener noreferrer" from="65" to="74" origin-text="quantiles" class="internal-link virtual-link-a">quantiles</a> of a theoretical or real distribution, and the y-axis represents the quantiles of the observed data. Quantile plots are used to visualize the distribution of data, including any bias or skewness in the dataset. <br>
<a data-href="Histogram" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Histogram</a>: Also known as a bar chart, where a bar is drawn for each known value of , and the height of the bar represents the frequency of that value in the dataset. If is numeric, the domain of is partitioned into bins—disjoint, consecutive subranges. The range of a bin is called its width. <br>
<a data-href="Scatterplot" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Scatterplot</a>: A data visualization technique which visualizes the relationship between two numeric attributes. Scatterplots are useful to visualize clusters, <a data-tooltip-position="top" aria-label="Outlier" data-href="Outlier" href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" class="internal-link" target="_self" rel="noopener nofollow">outliers</a>, or correlations. Scatterplots can be extended to n-dimensions to create a scatter matrix. <br>
<a data-href="Pixel-Oriented Visualization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pixel-Oriented Visualization</a>: A class of data visualization techniques which use individual pixels as the primary unit of display. <br>
<a data-href="Space-Filling Curve" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Space-Filling Curve</a>: Continuous curves that pass through every point in a multidimensional space. One of the most common curves is the <a data-href="Hilbert Curve" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Hilbert Curve</a>. Circle-Segment Technique: Uses windows in the shape of segments of a circle, each point corresponds to one dimension of one data record. <br>
<a data-href="Geometric Projection" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Geometric Projection</a>: Techniques used to represent high-dimensional objects on a two-dimensional surface. Scatterplot Matrix: An by grid of 2D scatterplots that visualize each dimension with each other dimension. <br>
<a data-href="Parallel Coordinates" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Parallel Coordinates</a>: A visualization technique that can handle high-dimensional data. Each -dimensional data point is a line crossing equally spaced parallel axes, each representing one dimension. Icon-Based Visualization: A class of visualization techniques which used icons to represent multidimensional data objects. Two common techniques are Chernoff faces and "stick figures". Hierarchical Visualization: A class of visualization techniques which organize dimensions in a nested, hierarchical manner. Tree maps are a popular hierarchical visualization technique which visualize data as a set of nested triangles. Commonly used for visualizing changes in the stock market based on sector. <br>
Cluster: A collection of 'similar' data objects. Clustering is important for discovering potential classes of data objects, or for identifying <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="136" to="144" origin-text="outliers" class="internal-link virtual-link-a">outliers</a>. Measures of Proximity: Statistical measures which quantify the similarity or dissimilarity of data objects. Multiattribute Objects are also referred to as data samples or feature vectors. Data Matrix: A data structure which stores data objects in an matrix, where is the number of attributes. Each row represents a data object. Dissimilarity Matrix: An matrix which stores the dissimilarity values for all pairs of objects. This matrix is symmetric, meaning that . Many clustering and nearest-neighbor algorithms operate on a dissimilarity matrix. <br>
<a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Nominal Attribute</a>: A type of <a data-href="Categorical Data" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Categorical Data</a> that represents categories that don't have a specific order or ranking. The dissimilarity between 2 objects represented by <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="124" to="131" origin-text="nominal" class="internal-link virtual-link-a">nominal</a> attributes is computed based on the ratio of mismatches: Where is the number of matches and is the total number of attributes. <br>
<a data-href="One-Hot Encoding" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">One-Hot Encoding</a>: A technique for encoding nominal attributes into <a data-tooltip-position="top" aria-label="Binary Data" data-href="Binary Data" href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">binary attributes</a>, where is the number of states in the nominal attribute. A binary attribute is symmetric if each state 0 or 1 is equally valuable. A binary attribute is asymmetric if the 2 states are not equally important, such as the outcomes of a disease test. <br>One approach for computing the dissimilarity of <a href="https://emujakic.github.io/TechKB/notes/math/binary-data.html#_0" target="_self" rel="noopener noreferrer" from="48" to="59" origin-text="binary data" class="internal-link virtual-link-a">binary data</a> involves computing a dissimilarity matrix. If all binary attributes have equal weight, then can represent the number of attributes that are 1 for both object and . A variable can represent the number of attributes that are 1 for and 0 for , can represent the number of attributes which are 0 for and 1 for . Finally, can represent the number of attributes which are 0 for both and . If objects and are described by symmetric binary attributes, then the dissimilarity between and is .
If objects and are described by asymmetric binary attributes, then the dissimilarity between and is defined as . Conversely, the asymmetric binary similarity between and is . <br>The coefficient is called the <a data-href="Jaccard Coefficient" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Jaccard Coefficient</a>. <br>
<a data-href="Distance Measures" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measures</a>: A class of statistical measures used to quantify the proximity of numeric attributes. The most common measures include the <a data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean Distance</a>, <a data-href="Chebyshev Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chebyshev Distance</a>, <a data-href="Manhattan Distance" href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Manhattan Distance</a>, and <a data-href="Minkowski Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Minkowski Distance</a>. <br>
The <a href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" target="_self" rel="noopener noreferrer" from="4" to="22" origin-text="Euclidean distance" class="internal-link virtual-link-a">Euclidean distance</a> is the most popular <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> and it represents the straight-line distance between two points in Euclidean space and is calculated using the <a data-href="Pythagorean Theorem" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Pythagorean Theorem</a>. <br>
The <a href="https://emujakic.github.io/TechKB/notes/math/manhattan-distance.html#_0" target="_self" rel="noopener noreferrer" from="4" to="22" origin-text="Manhattan distance" class="internal-link virtual-link-a">Manhattan distance</a>, also called the city-block distance, is defined as . Both the Euclidean distance and the Manhattan distance satisfy the following properties: Non-Negativity: is never negative.
Identity of Indiscernibles: , the distance of an object to itself is always 0.
Symmetry: <br><a data-href="Triangle Inequality" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Triangle Inequality</a>: , going directly from one point to another is never more than making a detour to some third point. A measure that satisfies all of these qualities is called a metric. The non-negative property is implied by the 3 other properties. The Minkowski distance is a generalization of the Euclidean and Manhattan distances, , where is some real number such that . Such a distance is also the norm where refers to . When is 1, it represents the Manhattan distance. When is 2, it represents the Euclidean distance ( norm). The Chebyshev distance (, norm, supremum distance), is a generalization of the Minkowski distance for . To compute it, we find the attribute that gives the maximum distance in values between 2 objects, . <br>
The treatment of <a href="https://emujakic.github.io/TechKB/notes/math/ordinal-data.html#_0" target="_self" rel="noopener noreferrer" from="17" to="24" origin-text="ordinal" class="internal-link virtual-link-a">ordinal</a> attributes is similar to numeric attributes when computing dissimilarity between objects. To compute the dissimilarity of objects of mixed attribute types, you process the attributes types together, then perform a single analysis. Suppose a dataset has attributes of mixed type, the dissimilarity of objects and is defined as: Where the indicator if either or is missing, or and attribute is asymmetric binary. Otherwise, . The computation of attribute to the dissimilarity of and () depends on the attribute type of : If is numeric, , where runs over all non-missing values of attribute . <br>
If is <a data-tooltip-position="top" aria-label="Nominal Data" data-href="Nominal Data" href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" class="internal-link" target="_self" rel="noopener nofollow">nominal</a> or binary, if , otherwise it equals 1. If is ordinal, compute the ranks and , then treat as numeric. <br>
<a data-href="Data Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Data Normalization</a>: The process of adjusting the values in a dataset to a common scale without distorting the differences in the ranges of values. A document can be represented by a term-frequency vector, with each attribute recording the frequency of a particular word or phrase in the document. Term frequency vectors are typically long and sparse, meaning they have many 0 values. Traditional distance measures are incompatible with sparse data, since the many shared 0 values would suggest that the two documents are similar, even if they're vastly different. <br><a data-href="Cosine Similarity" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Cosine Similarity</a> can be used to compare term-frequency vectors with respect to a third vector of query words. Let and be two vectors, using the cosine similarity measure, we have: Where is the Euclidean norm of vector defined as .
The measure computes the cosine of the angle between vector and . A cosine value of 0 means the 2 vectors are at 90° to each other and have no match.
Cosine similarity is a non-metric measure.
When attributes are binary, the cosine similarity function can be interpreted in terms of shared features. Therefore, is a measure of relative possession of shared features: <br>Which is the ratio of the number of shared attributes between and to the number of attributes possessed by or . This is known as the <a data-href="Tanimoto Distance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Tanimoto Distance</a>. Data preprocessing is the process taken to improve the quality of data in order to increase the efficiency, ease, and quality of the data mining process. Data preprocessing consists of: Data Cleaning: Involves dealing with missing values, smoothing noisy data, removing outliers, and resolving inconsistencies.
Data Integration: Involves consolidating data from multiple sources into one location, typically a dataset, data cube, or file.
Data Reduction: Involves obtaining a reduced representation of the data while minimizing the loss of relevant information for the data mining process.
Data Transformation: Involves normalization (feature scaling), discretization, and concept hierarchy generation. Data quality is measured using the following metrics: Accuracy: Having the correct attribute values. Data may be inaccurate due to faulty data collection, entry, transmission, or from inconsistencies in how fields are formatted. Disguised missing data occurs when users intentionally enter incorrect data in order to preserve anonymity.
Completeness: Having attribute values filled out. Data may be incomplete due to failure to collect, enter, or transmit the data.
Consistency:
Timeliness: Having the data available when needed. Timeliness may be compromised if users fail to submit data on time.
Believability: How trustworthy the data is by users. If users believe that the data is of poor quality, that belief in and of itself reduces the quality of the data. This is due to users not willing to use the data or take it seriously, thus, reducing the value of the data.
Interpretability: How easily the data is understood. A missing value may not necessarily indicate an error. Each attribute should have at least one rule for handling null values. To handle missing values you can: Ignore the tuple: This is usually done if the class label is missing in the case of a classification problem, if a single tuple has many missing values, or if they're few tuples missing values. This is generally a poor choice since useful data is also being removed.
Manually fill in the values: This is only feasible for very small datasets and is still a poor method due to arbitrary values being inserted, thereby adding noise to the data.
Use a global constant: Missing values can be replaced with a constant such as null or , though the mining program may mistakenly think there is a relationship between tuples with the global constant present.
<br>Use a <a data-tooltip-position="top" aria-label="Measure of Central Tendency" data-href="Measure of Central Tendency" href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" class="internal-link" target="_self" rel="noopener nofollow">measure of central tendency</a>: A measure, such as the <a href="https://emujakic.github.io/TechKB/notes/math/mean.html#_0" target="_self" rel="noopener noreferrer" from="25" to="29" origin-text="mean" class="internal-link virtual-link-a">mean</a> or <a href="https://emujakic.github.io/TechKB/notes/math/median.html#_0" target="_self" rel="noopener noreferrer" from="33" to="39" origin-text="median" class="internal-link virtual-link-a">median</a> can be used to fill in the value. The mean is more appropriate for symmetric distributions, while the median is more appropriate for skewed distributions.
<br>Use a measure of central tendency from the samples from the same class: Calculate a <a href="https://emujakic.github.io/TechKB/notes/math/measure-of-central-tendency.html#_0" target="_self" rel="noopener noreferrer" from="14" to="41" origin-text="measure of central tendency" class="internal-link virtual-link-a">measure of central tendency</a> using only data objects that are of the same class as the tuple with the missing value. <br>Fill in the most probable missing value: This may be calculated using <a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>, Bayesian formalism, or <a data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Tree</a> induction. This method uses the most information from the available data. <br>
Noise: Random error or <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">variance</a> present in a dataset. <a href="https://emujakic.github.io/TechKB/notes/math/outlier.html#_0" target="_self" rel="noopener noreferrer" from="23" to="31" origin-text="Outliers" class="internal-link virtual-link-a">Outliers</a> commonly represent noise since they stray far most other observations. Noise can be smoothed using techniques like: Binning: Performs local smoothing by discretizing attribute values using the neighborhood of observations in the sorted data. Attribute values are sorted, then partitioned into a fixed number of bins, which are consecutive disjoint sets. In smoothing by bin means, each value in a bin is replaced by that bin's mean. Smoothing by bin medians, similarly, replaces each value in the bin with the bin's median. Smoothing by bin boundaries replaces each value in the bin with the value of the nearest bin boundary. Bins may be equal-frequency, where each bin has the same number of values; or they may be equal width, that is, they have the same range. Binning is also a form of data discretization.
<br><a data-href="Regression" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Regression</a>: Data can be smoothed using regression—the process of finding a function which best fits a dataset. The values of the attribute can be replaced with the regression models's predicted values.
<br><a data-href="Outlier Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Outlier Analysis</a>: Techniques like clustering, scatterplots, or z-score analysis can be used to identify and remove outliers from a dataset. The first step in data cleaning is discrepancy detection. Discrepancies may arise due to human error, deliberate errors, or data decay (data becoming less accurate over time). Inconsistent data representations are also a source of discrepancies, such as inconsistent encoding schemas or formatting. Nested discrepancies occur when the correction of one discrepancy reveals the presence of another. Metadata is data about data. Metadata is useful for discrepancy detection for providing information about an attribute's data type, acceptable range, or dependencies.
Field overloading is another source of discrepancies where fields can have the same name but be of different data types.
Unique rules say that each value in a dataset must be unique. Consecutive rules say that there can be no missing values between the range of an attribute. Null rules specify the handling of null conditions, such as whether they are permitted or not. Data scrubbing tools, such as spell-checking, make use of domain knowledge to detect and correct errors. Data auditing tools analyze the data to find rules or relationships, as well as identifying objects that violate such rules. Data migration tools allow simple transformations, such as renaming of attributes. Extraction/Transformation/Loading (ETL) tools provide users with a GUI for performing transformations. Careful data integration can help reduce the amount of data cleaning needed by avoiding redundancies and inconsistencies. One of the biggest problems in data integration is the entity identification problem, which is the problem of identifying which real-world entities correspond to which data objects. This includes the schema integration and object matching processes. <br>Redundancy occurs when two columns refer to the same measure, or when a column can be derived for the other attributes. The former typically occurs when there is no standard for dimension naming, resulting in one attribute having multiple different names. Some redundancies can be detected using correlation analysis methods. This includes the <a data-href="Chi-Square Test" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Chi-Square Test</a> for nominal attributes, or the correlation coefficient and <a data-href="Covariance" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Covariance</a> for numerical attributes. The chi-square test is performed as follows: <br>Suppose attribute has distinct values, . Attribute has distinct values, . The tuples described by and can be represented by a <a data-href="Contingency Table" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Contingency Table</a> of dimensions . Each possible tuple has its own cell in the table. The value is computed as: Where is the observed frequency of the tuple , and is the expected frequency of the tuple calculated as: <br>Where is the number of data tuples. The statistic assumes the two attributes to be independent, the test is based on a significance level with <a data-tooltip-position="top" aria-label="Degree of Freedom" data-href="Degree of Freedom" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Degrees of Freedom</a>. The correlation coefficient between two attributes and can be calculated as: <br>Where is the number of data tuples, and are the respective mean values of and , and is the <a href="https://emujakic.github.io/TechKB/notes/math/standard-deviation.html#_0" target="_self" rel="noopener noreferrer" from="8" to="26" origin-text="standard deviation" class="internal-link virtual-link-a">standard deviation</a>. The returned correlation coefficient is between +1 and -1, where a positive value indicates a positive correlation, a negative value indicates a negative correlation, and 0 indicates no correlation. Correlation and covariance are similar measures for assessing the relationship between two attributes. The covariance between and is: Note that a covariance of 0 does not necessitate independence. Data reduction techniques result in a reduced representation of the data while minimizing the amount of relevant information lost. Common data reduction strategies include: <br>Dimensionality Reduction: Involves reducing the number of attributes in the data. Common techniques include <a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a> and <a data-href="Wavelet Transform" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Wavelet Transform</a>.
Numerosity Reduction: replaces the original dataset with smaller forms, such as parametric and non-parametric machine learning models.
Compression: Data compression transforms the data into a reduced form. Lossy compression occurs when only an approximation of the original data can be reconstructed from the compressed version. If the compression technique results in no information loss then it is lossless compression. <br>
<a data-href="Discrete Wavelet Transform" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Discrete Wavelet Transform</a>: The DWT is a linear signal processing technique which transforms a data vector into a equal-length vector of wavelet coefficients. The data is reduced by setting all coefficients under a given threshold to 0, thus making it a sparse vector. Therefore, operations that can take advantage of this sparsity can exploited. DWT can also be used to smooth out noise in a dataset. The general steps for applying a DWT is as follows: The length if the input vector must be a power of two,. If not the vector can be padded with zeros as necessary.
Each transform applies a smoothing function, such as a weighted mean. Then a weighted difference is applied to bring out the details of the dataset.
These two functions are applied to pairs of points in . This results in two datasets of length .
The two functions are applied recursively until the resulting datasets are of length 2.
Selected values are obtained and designated the wavelet coefficients. <br>
<a data-href="Principal Component Analysis" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Principal Component Analysis</a>: Reduces a -dimensional dataset into dimensions where is a user-specified hyperparameter and . PCA reduces the dimensionality by combining certain attributes, thereby creating a smaller subset of attributes without entirely removing dimensions. The process is as follows: The input data is scaled to a common range.
<br>Compute <a data-tooltip-position="top" aria-label="Orthonormalilty" data-href="Orthonormalilty" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Orthonormal</a> unit vectors, each pointing in a direction perpendicular to the others. These vectors are called principal components.
<br>The principal components are sorted in decreasing order of significance. Significance refers to how much of the <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://emujakic.github.io/TechKB/notes/math/variance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">variance</a> of the dataset is explained by the axis.
Eliminate the axes that are the least significant. Attribute Subset Selection: The process of entirely removing attributes that are redundant or irrelevant for the data mining task. This can be done manually by a domain expert, though it is almost always better to be performed analytically using one of the following techniques: Forward Selection: Start with an empty set of attributes and at each iteration, add the best attribute.
Backward Elimination: Start with the full set of attributes, and at each iteration, remove the worst attribute.
<br>Decision Tree Induction: Create a <a data-href="Decision Tree" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Decision Tree</a> of the given data, and attributes that do not appear in the tree can be assumed to be irrelevant. <br>
Histograms: A visualization technique that uses binning to approximate data distributions. A histogram partitions a distribution into consecutive disjoint subsets known as bins. Bins often represent a continuous <a href="https://emujakic.github.io/TechKB/notes/math/range.html#_0" target="_self" rel="noopener noreferrer" from="36" to="41" origin-text="range" class="internal-link virtual-link-a">range</a> of values for an attribute. An equal-width histogram has a uniform range for each bin.
An equal-frequency histogram has a uniform number of samples in each bucket. <br>
<a data-href="Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Clustering</a>: The process of partitioning a dataset of objects into clusters such that intra-cluster items are similar and inter-cluster items are dissimilar. Similarity can be defined using a <a data-href="Distance Measure" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Distance Measure</a> such as <a data-tooltip-position="top" aria-label="Euclidean Distance" data-href="Euclidean Distance" href="https://emujakic.github.io/TechKB/notes/math/euclidean-distance.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Euclidean distance</a>. The quality of a cluster can be quantified by its diameter, which is the maximum distance between any two values in the cluster. The centroid distance is another measure of cluster quality which is defined as the average distance of each object in the cluster from the cluster's centroid. The centroid is the average point in space of the cluster.
Clustering can be used for data reduction by replacing the actual data with the cluster representations of the data. Sampling: Can be used as a data reduction method by selecting a subset of the data objects in the whole dataset. Common sampling techniques include: Simple random sample without replacement: Drawing tuples randomly from the dataset and removing the chosen tuple from the drawing pool.
Simple random sample with replacement: Drawing samples randomly without removing them from the pool.
Stratified Sample: Performing simple random sampling from mutually disjoint subsets of the dataset, called strata. This is useful for skewed datasets to ensure equal representation from the entire distribution. Data cubes are multidimensional representations of data stored in data warehouses. Data cubes typically store aggregated data (e.g. Yearly Sales). Each cell holds an aggregate data value and each dimension represents a different level of abstraction (e.g. Yearly). The cube at the lowest abstraction level is the base cuboid. This typically corresponds to individual entity such as sales.
The cube at the highest level of abstraction is the apex cuboid. It summarizes the data across all dimensions. Data Transformation: The process of converting data from one form into another to prepare for mining. Common transformation strategies include: Smoothing: The process of removing noise from data. This includes binning, regression, and clustering.
Feature Engineering: The process of constructing new features from existing features.
Aggregation: Summarizing data at a higher level of abstraction, such as calculating average monthly sales rather than daily sales.
Normalization: Changing values of attributes to a uniform scale.
Discretization: Converting continuous range values into discrete categories.
Concept Hierarchy Generation: Where specific attributes can be generalized to to higher levels of abstraction by organizing data into a tree structure. Lower levels of the tree are more specific, higher levels are more broad. <br>
To avoid having the unit of measurement impact the results of the data mining process, it is recommended to normalize the data to a common range. Normalization is particularly important for distance-based algorithms like <a data-href="K-Nearest Neighbors" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Nearest Neighbors</a> or <a data-href="K-Means Clustering" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">K-Means Clustering</a>. Normalization is also critical for <a data-tooltip-position="top" aria-label="Neural Network" data-href="Neural Network" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Neural Networks</a>, because the backpropogation algorithm performs significantly better if input values are normalized. <br><a data-href="Min-Max Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Min-Max Normalization</a>: A linear transformation which maps a set of values to a new range by computing: <br><a data-href="Z-Score Normalization" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Z-Score Normalization</a>: Normalizes the data to have a mean of 0 and standard deviation of 1, and is computed as: Decimal Scaling: Normalizes by moving the decimal point of the values. Decimal scaling is computed as: Where is the smallest integer such that . Discretization techniques are supervised if they use class information to perform its discretization, else, its unsupervised. Top-down discretization techniques start from the entire attribute range and split the range into intervals. Bottom-up techniques start with individual values and merge them to form intervals. Binning, as mentioned previously, can be used as an unsupervised, top-down discretization technique.
Clustering: Can be used to generate concept hierarchies with top-down or bottom-up algorithms.
<br>Classification Decision Trees: Can be used as a supervised top-down discretization technique. The main idea is to split points in a way that maximizes information gain. This is the split point which results in partitions that contain as many tuples of the same class as possible. The reduction in <a data-href="Entropy" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Entropy</a> is what quantifies the information gain.
ChiMerge: A supervised bottom-up discretization technique based on the chi-squared test. tests are performed on each pair of adjacent values and pairs with the lest values are merged together. <br>
Concept Hierarchy: A concept hierarchy for <a href="https://emujakic.github.io/TechKB/notes/math/nominal-data.html#_0" target="_self" rel="noopener noreferrer" from="26" to="33" origin-text="nominal" class="internal-link virtual-link-a">nominal</a> attributes is a tree-like structure which groups categories into broader categories or classes. Leaves typically represent specific values, such as 'cat' or 'dog', and nodes represent higher level categories such as 'animals'. Manual definition of concept hierarchies can be a tedious task, though, there are methods for more efficient generation: Specification of a partial ordering of attributes at the schema level. A domain expert can define a ordering on attributes at the schema level, such as food &gt; fruits &gt; citrus &gt; lemon.
<br>A system can automatically generate a hierarchical ordering using a <a data-href="Heuristic" href="https://emujakic.github.io/TechKB/.html" class="internal-link" target="_self" rel="noopener nofollow">Heuristic</a> function. One common heuristic is the number of distinct values in the domains of each attribute. More granularized attributes tend to have more distinct values, for example, there are more countries then there are continents. Some manual adjustments may be needed by users. Question other relevant information J. Han and M. Kamber,&nbsp;Data Mining : Concepts and Techniques, 3rd ed. Haryana, India ; Burlington, Ma: Elsevier, 2018.
]]></description><link>https://emujakic.github.io/TechKB/textbooks/data-mining-concepts-and-techniques/summary.html</link><guid isPermaLink="false">TEXTBOOKS/Data Mining-Concepts and Techniques/Summary.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Sun, 29 Jun 2025 05:00:00 GMT</pubDate></item><item><title><![CDATA[Contact]]></title><description><![CDATA[
<a data-tooltip-position="top" aria-label="https://www.ernadm.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ernadm.com" target="_self">Personal Website</a>
<br><a data-tooltip-position="top" aria-label="https://www.https://github.com/eMujakic" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.https://github.com/eMujakic" target="_self">Github</a>
<br><a data-tooltip-position="top" aria-label="https://www.linkedin.com/in/ernad-mujakic-a13085362/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.linkedin.com/in/ernad-mujakic-a13085362/" target="_self">LinkedIn</a>
<br><a data-tooltip-position="top" aria-label="mailto:ernadmwork@gmail.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://emujakic.github.io/TechKB/mailto:ernadmwork@gmail.com" target="_self">ernadmwork@gmail.com</a>
]]></description><link>https://emujakic.github.io/TechKB/contact.html</link><guid isPermaLink="false">Contact.md</guid><dc:creator><![CDATA[Ernad Mujakic]]></dc:creator><pubDate>Tue, 05 Aug 2025 15:45:31 GMT</pubDate></item><item><title><![CDATA[Math MOC]]></title><description><![CDATA[ ]]></description><link>notes/math/math-moc.html</link><guid isPermaLink="false">NOTES/Math/Math MOC.md</guid><pubDate>Thu, 31 Jul 2025 00:00:00 GMT</pubDate></item></channel></rss>